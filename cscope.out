cscope 15 $HOME/code/stm32-projects/template -q 0000011422 0001451907
	@inc/inc/misc.h

24 #i‚de‡
__MISC_H


25 
	#__MISC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt8_t
 
NVIC_IRQCh™√l
;

57 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

61 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

65 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

68 } 
	tNVIC_InôTy≥Def
;

115 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

116 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

117 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

118 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

127 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

128 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

129 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

130 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

131 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

132 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

141 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

143 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

145 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

147 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

149 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

152 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

156 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

158 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

160 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

162 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

172 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

173 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

174 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

175 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

196 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

197 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

198 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

199 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

200 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

202 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_adc.h

24 #i‚de‡
__STM32F10x_ADC_H


25 
	#__STM32F10x_ADC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
ADC_Mode
;

56 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

60 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

68 
uöt32_t
 
ADC_D©aAlign
;

71 
uöt8_t
 
ADC_NbrOfCh™√l
;

74 }
	tADC_InôTy≥Def
;

83 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

84 ((
PERIPH
Ë=
ADC2
) || \

85 ((
PERIPH
Ë=
ADC3
))

87 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

88 ((
PERIPH
Ë=
ADC3
))

94 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

95 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

96 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

97 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

98 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

99 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

100 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

101 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

102 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

103 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

105 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

106 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

107 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

110 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

112 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

114 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

128 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

138 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

140 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

153 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

162 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

163 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

165 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

174 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

175 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

176 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

177 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

178 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

179 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

180 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

181 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

182 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

183 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

184 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

185 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

186 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

187 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

188 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

189 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

190 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

191 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

193 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

194 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

196 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

197 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

201 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

202 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

203 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

204 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

213 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

214 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

215 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

216 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

217 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

218 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

219 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

220 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

221 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

222 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

225 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

226 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

227 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

228 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

238 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

245 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

251 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

253 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
Ë|| \

	)

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

265 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

274 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

275 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

276 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

277 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

278 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

281 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

290 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

291 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

292 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

293 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

294 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

295 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

296 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

298 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

304 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

313 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

314 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

315 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

317 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

319 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

320 ((
IT
Ë=
ADC_IT_JEOC
))

329 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

330 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

331 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

332 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

333 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

334 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

335 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
Ë|| \

	)

336 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

337 ((
FLAG
Ë=
ADC_FLAG_STRT
))

346 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

356 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

366 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

376 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

387 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

396 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

406 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

428 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

429 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

431 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

435 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

437 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

438 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

440 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

441 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

443 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

445 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

446 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

449 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

452 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

453 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

454 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

455 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

456 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

457 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

458 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

459 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

462 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

463 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

465 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_bkp.h

24 #i‚de‡
__STM32F10x_BKP_H


25 
	#__STM32F10x_BKP_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

59 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

60 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
Ë|| \

	)

61 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

70 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

71 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

72 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

73 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

74 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
Ë|| \

	)

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

77 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

86 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

87 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

88 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

89 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

90 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

91 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

92 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

93 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

94 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

95 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

96 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

97 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

98 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

99 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

100 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

101 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

102 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

103 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

104 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

105 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

106 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

107 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

108 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

109 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

110 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

111 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

112 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

113 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

114 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

115 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

116 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

117 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

118 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

119 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

120 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

121 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

122 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

123 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

124 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

125 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

126 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

127 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

129 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
Ë|| \

	)

130 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

131 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

132 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

133 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

134 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

135 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

136 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

137 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

138 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

139 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

140 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

141 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

142 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

144 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

165 
BKP_DeInô
();

166 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

167 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

169 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

170 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

171 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

172 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

173 
FœgSètus
 
BKP_GëFœgSètus
();

174 
BKP_CÀ¨Fœg
();

175 
ITSètus
 
BKP_GëITSètus
();

176 
BKP_CÀ¨ITPídögBô
();

178 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_can.h

24 #i‚de‡
__STM32F10x_CAN_H


25 
	#__STM32F10x_CAN_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
Ë|| \

	)

47 ((
PERIPH
Ë=
CAN2
))

55 
uöt16_t
 
CAN_PªsˇÀr
;

58 
uöt8_t
 
CAN_Mode
;

62 
uöt8_t
 
CAN_SJW
;

68 
uöt8_t
 
CAN_BS1
;

72 
uöt8_t
 
CAN_BS2
;

77 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

81 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

85 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

89 
Fun˘i⁄ÆSèã
 
CAN_NART
;

93 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

97 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

100 } 
	tCAN_InôTy≥Def
;

108 
uöt16_t
 
CAN_FûãrIdHigh
;

112 
uöt16_t
 
CAN_FûãrIdLow
;

116 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

121 
uöt16_t
 
CAN_FûãrMaskIdLow
;

126 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

129 
uöt8_t
 
CAN_FûãrNumbî
;

131 
uöt8_t
 
CAN_FûãrMode
;

134 
uöt8_t
 
CAN_FûãrSˇÀ
;

137 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

139 } 
	tCAN_FûãrInôTy≥Def
;

147 
uöt32_t
 
StdId
;

150 
uöt32_t
 
ExtId
;

153 
uöt8_t
 
IDE
;

157 
uöt8_t
 
RTR
;

161 
uöt8_t
 
DLC
;

165 
uöt8_t
 
D©a
[8];

167 } 
	tC™TxMsg
;

175 
uöt32_t
 
StdId
;

178 
uöt32_t
 
ExtId
;

181 
uöt8_t
 
IDE
;

185 
uöt8_t
 
RTR
;

189 
uöt8_t
 
DLC
;

192 
uöt8_t
 
D©a
[8];

195 
uöt8_t
 
FMI
;

198 } 
	tC™RxMsg
;

212 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

213 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

223 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

224 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

225 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

226 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

228 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| \

	)

229 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

230 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

231 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

241 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

242 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

243 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

246 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
Ë||\

	)

247 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

248 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

258 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

259 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

270 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

271 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

272 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

273 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

275 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

276 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

285 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

286 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

287 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

288 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

289 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

290 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

291 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

292 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

293 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

294 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

295 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

296 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

297 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

298 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

299 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

300 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

302 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

311 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

313 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

314 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

315 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

316 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

317 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

318 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

320 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

330 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

339 #i‚de‡
STM32F10X_CL


340 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

342 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

352 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

353 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

355 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

356 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

365 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

366 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

368 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

369 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

379 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

380 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

381 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

382 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

390 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

399 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

400 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

401 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

402 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

412 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

413 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

414 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
Ë|| \

	)

415 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

424 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

425 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

426 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

436 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

437 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

438 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

439 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

449 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

450 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

452 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

462 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

463 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

473 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

474 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

485 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

486 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

487 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

488 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

489 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

490 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

491 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

492 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

507 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

508 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

509 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

512 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

513 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

514 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

515 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

516 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

517 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

520 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

521 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

526 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

527 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

528 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

529 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

531 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
Ë|| \

	)

532 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

533 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

534 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

535 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

536 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

537 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

538 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

540 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
Ë|| \

	)

541 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

542 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

543 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

544 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

556 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

559 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

560 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

561 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

562 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

563 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

564 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

567 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

568 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

571 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

572 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

573 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

574 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

575 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

578 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

579 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

580 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

583 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

584 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

585 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

586 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

587 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

588 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

589 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

591 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
Ë||\

	)

592 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

593 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

594 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

595 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

596 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

605 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

606 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

607 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

608 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

609 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

610 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

611 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

612 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

613 
	#CANTXFAILE
 
CAN_TxSètus_Faûed


	)

614 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

615 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

616 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

617 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

618 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

619 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

620 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

642 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

645 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

646 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

647 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

648 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

649 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

650 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

653 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

654 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

655 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

658 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

659 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

660 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

664 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

665 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

666 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

669 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

670 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

671 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

674 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

675 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

676 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

677 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

678 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

680 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_cec.h

24 #i‚de‡
__STM32F10x_CEC_H


25 
	#__STM32F10x_CEC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
CEC_BôTimögMode
;

54 
uöt16_t
 
CEC_BôPîiodMode
;

56 }
	tCEC_InôTy≥Def
;

69 
	#CEC_BôTimögStdMode
 ((
uöt16_t
)0x00Ë

	)

70 
	#CEC_BôTimögEºFªeMode
 
CEC_CFGR_BTEM


	)

72 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôTimögStdMode
Ë|| \

	)

73 ((
MODE
Ë=
CEC_BôTimögEºFªeMode
))

81 
	#CEC_BôPîiodStdMode
 ((
uöt16_t
)0x00Ë

	)

82 
	#CEC_BôPîiodFÀxibÀMode
 
CEC_CFGR_BPEM


	)

84 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôPîiodStdMode
Ë|| \

	)

85 ((
MODE
Ë=
CEC_BôPîiodFÀxibÀMode
))

94 
	#CEC_IT_TERR
 
CEC_CSR_TERR


	)

95 
	#CEC_IT_TBTRF
 
CEC_CSR_TBTRF


	)

96 
	#CEC_IT_RERR
 
CEC_CSR_RERR


	)

97 
	#CEC_IT_RBTF
 
CEC_CSR_RBTF


	)

98 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TERR
Ë|| ((ITË=
CEC_IT_TBTRF
Ë|| \

	)

99 ((
IT
Ë=
CEC_IT_RERR
Ë|| ((ITË=
CEC_IT_RBTF
))

108 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

116 
	#IS_CEC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0x3FFF)

	)

129 
	#CEC_FLAG_BTE
 ((
uöt32_t
)0x10010000)

	)

130 
	#CEC_FLAG_BPE
 ((
uöt32_t
)0x10020000)

	)

131 
	#CEC_FLAG_RBTFE
 ((
uöt32_t
)0x10040000)

	)

132 
	#CEC_FLAG_SBE
 ((
uöt32_t
)0x10080000)

	)

133 
	#CEC_FLAG_ACKE
 ((
uöt32_t
)0x10100000)

	)

134 
	#CEC_FLAG_LINE
 ((
uöt32_t
)0x10200000)

	)

135 
	#CEC_FLAG_TBTFE
 ((
uöt32_t
)0x10400000)

	)

140 
	#CEC_FLAG_TEOM
 ((
uöt32_t
)0x00000002)

	)

141 
	#CEC_FLAG_TERR
 ((
uöt32_t
)0x00000004)

	)

142 
	#CEC_FLAG_TBTRF
 ((
uöt32_t
)0x00000008)

	)

143 
	#CEC_FLAG_RSOM
 ((
uöt32_t
)0x00000010)

	)

144 
	#CEC_FLAG_REOM
 ((
uöt32_t
)0x00000020)

	)

145 
	#CEC_FLAG_RERR
 ((
uöt32_t
)0x00000040)

	)

146 
	#CEC_FLAG_RBTF
 ((
uöt32_t
)0x00000080)

	)

148 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF03Ë=0x00Ë&& ((FLAGË!0x00))

	)

150 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_BTE
Ë|| ((FLAGË=
CEC_FLAG_BPE
Ë|| \

	)

151 ((
FLAG
Ë=
CEC_FLAG_RBTFE
Ë|| ((FLAG)=
CEC_FLAG_SBE
) || \

152 ((
FLAG
Ë=
CEC_FLAG_ACKE
Ë|| ((FLAGË=
CEC_FLAG_LINE
) || \

153 ((
FLAG
Ë=
CEC_FLAG_TBTFE
Ë|| ((FLAGË=
CEC_FLAG_TEOM
) || \

154 ((
FLAG
Ë=
CEC_FLAG_TERR
Ë|| ((FLAGË=
CEC_FLAG_TBTRF
) || \

155 ((
FLAG
Ë=
CEC_FLAG_RSOM
Ë|| ((FLAGË=
CEC_FLAG_REOM
) || \

156 ((
FLAG
Ë=
CEC_FLAG_RERR
Ë|| ((FLAGË=
CEC_FLAG_RBTF
))

177 
CEC_DeInô
();

178 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

179 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

181 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

182 
CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
);

183 
CEC_SídD©aByã
(
uöt8_t
 
D©a
);

184 
uöt8_t
 
CEC_Re˚iveD©aByã
();

185 
CEC_SèπOfMesßge
();

186 
CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
FœgSètus
 
CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
);

188 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

189 
ITSètus
 
CEC_GëITSètus
(
uöt8_t
 
CEC_IT
);

190 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

192 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_crc.h

24 #i‚de‡
__STM32F10x_CRC_H


25 
	#__STM32F10x_CRC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

70 
CRC_Re£tDR
();

71 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

72 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

73 
uöt32_t
 
CRC_GëCRC
();

74 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

75 
uöt8_t
 
CRC_GëIDRegi°î
();

77 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_dac.h

24 #i‚de‡
__STM32F10x_DAC_H


25 
	#__STM32F10x_DAC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DAC_Triggî
;

55 
uöt32_t
 
DAC_WaveGíî©i⁄
;

59 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

63 
uöt32_t
 
DAC_OuçutBuf„r
;

65 }
	tDAC_InôTy≥Def
;

79 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

81 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

82 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

84 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

86 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

87 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

88 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

90 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

91 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

92 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

93 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

95 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

96 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

103 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

113 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

114 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

115 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

116 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

118 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

127 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

128 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

129 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

130 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

131 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

132 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

133 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

134 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

135 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

136 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

137 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

138 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

150 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

152 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

163 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

175 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

184 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

185 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

186 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

187 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

196 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

197 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

199 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

208 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

209 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

210 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

211 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

212 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

213 ((
ALIGN
Ë=
DAC_Align_8b_R
))

222 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

223 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

224 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

225 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

234 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

238 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

243 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

244 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

254 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

255 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

278 
DAC_DeInô
();

279 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

280 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

281 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

282 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

283 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

290 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

291 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

292 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

293 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

294 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

295 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

296 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

297 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

300 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_dbgmcu.h

24 #i‚de‡
__STM32F10x_DBGMCU_H


25 
	#__STM32F10x_DBGMCU_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

54 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

55 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

56 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

57 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

58 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

59 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

60 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

61 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

62 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

63 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

64 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

65 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

66 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

67 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

68 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

69 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

70 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x01000000)

	)

74 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x02000000)

	)

75 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x04000000)

	)

76 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x08000000)

	)

77 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x10000000)

	)

78 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x20000000)

	)

79 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x40000000)

	)

81 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x800000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

98 
uöt32_t
 
DBGMCU_GëREVID
();

99 
uöt32_t
 
DBGMCU_GëDEVID
();

100 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

102 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_dma.h

24 #i‚de‡
__STM32F10x_DMA_H


25 
	#__STM32F10x_DMA_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

54 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

56 
uöt32_t
 
DMA_DIR
;

59 
uöt32_t
 
DMA_Buf„rSize
;

63 
uöt32_t
 
DMA_PîùhîÆInc
;

66 
uöt32_t
 
DMA_Mem‹yInc
;

69 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

72 
uöt32_t
 
DMA_Mem‹yD©aSize
;

75 
uöt32_t
 
DMA_Mode
;

80 
uöt32_t
 
DMA_Pri‹ôy
;

83 
uöt32_t
 
DMA_M2M
;

85 }
	tDMA_InôTy≥Def
;

95 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
Ë|| \

	)

96 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

101 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

106 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

112 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

113 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

114 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
Ë|| \

	)

115 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

124 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

125 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

126 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

127 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

136 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

137 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

138 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

139 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

148 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

149 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

150 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

151 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

153 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

162 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

163 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

164 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

165 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

167 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

176 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

177 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

178 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

187 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

188 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

189 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

190 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

191 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

194 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

203 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

204 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

205 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

215 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

216 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

217 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

218 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

220 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

221 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

222 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

223 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

224 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

225 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

226 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

227 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

228 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

229 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

230 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

231 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

232 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

233 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

234 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

235 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

236 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

237 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

238 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

239 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

240 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

241 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

242 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

243 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

244 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

245 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

246 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

247 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

249 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

250 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

251 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

252 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

253 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

254 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

255 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

256 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

257 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

258 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

259 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

260 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

261 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

262 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

263 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

264 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

265 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

266 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

267 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

268 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

270 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

272 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

273 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

274 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

275 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

276 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

277 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

278 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

279 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

280 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

281 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

282 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

283 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

284 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

285 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

286 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

287 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

288 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

289 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

290 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

291 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

292 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

293 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

294 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

295 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

304 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

305 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

306 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

307 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

308 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

309 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

310 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

311 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

312 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

313 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

314 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

315 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

316 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

317 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

318 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

319 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

320 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

321 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

322 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

323 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

324 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

325 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

326 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

327 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

328 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

329 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

330 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

331 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

333 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

334 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

335 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

336 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

337 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

338 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

339 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

340 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

341 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

342 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

343 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

344 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

345 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

346 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

347 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

348 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

349 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

350 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

351 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

352 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

354 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

356 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

357 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

369 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

379 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

388 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

410 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

411 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

413 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
);

416 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

417 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
);

418 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
);

419 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
);

420 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
);

422 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_exti.h

24 #i‚de‡
__STM32F10x_EXTI_H


25 
	#__STM32F10x_EXTI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
EXTI_Mode_I¡îru±
 = 0x00,

53 
EXTI_Mode_Evít
 = 0x04

54 }
	tEXTIMode_Ty≥Def
;

56 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

64 
EXTI_Triggî_Risög
 = 0x08,

65 
EXTI_Triggî_FÆlög
 = 0x0C,

66 
EXTI_Triggî_Risög_FÆlög
 = 0x10

67 }
	tEXTITriggî_Ty≥Def
;

69 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

70 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

71 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

78 
uöt32_t
 
EXTI_Löe
;

81 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

84 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

87 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

89 }
	tEXTI_InôTy≥Def
;

103 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

104 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

105 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

106 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

107 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

108 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

109 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

110 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

111 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

112 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

113 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

114 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

115 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

116 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

117 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

118 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

119 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

120 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

121 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

123 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

126 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

127 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

128 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

129 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

130 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

131 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

132 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

133 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

134 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

135 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

158 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

162 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

163 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

164 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

167 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_flash.h

24 #i‚de‡
__STM32F10x_FLASH_H


25 
	#__STM32F10x_FLASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
FLASH_BUSY
 = 1,

53 
FLASH_ERROR_PG
,

54 
FLASH_ERROR_WRP
,

55 
FLASH_COMPLETE
,

56 
FLASH_TIMEOUT


57 }
	tFLASH_Sètus
;

71 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

72 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

73 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

74 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

75 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

76 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

85 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

86 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

87 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
Ë|| \

	)

88 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

97 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

98 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

99 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
Ë|| \

	)

100 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

110 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

111 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

112 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

113 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

114 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

115 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

116 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

117 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

120 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

121 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

122 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

123 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

124 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

125 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

126 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

127 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

128 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

129 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

130 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

132 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

133 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

134 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

135 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

136 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

143 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

146 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

148 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

150 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

152 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

154 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

156 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

158 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

160 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

162 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

164 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

166 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

168 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

170 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

172 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

174 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

176 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

178 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

180 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

182 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

184 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

186 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

188 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

190 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

192 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

194 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

196 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

198 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

200 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

202 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

204 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

206 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

210 
	#FLASH_WRPrŸ_Pages62to511
 ((
uöt32_t
)0x80000000Ë

	)

212 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

214 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

216 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x080FFFFF))

	)

218 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

228 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

229 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

230 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

240 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

241 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

242 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

252 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

253 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

254 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

256 #ifde‡
STM32F10X_XL


263 
	#FLASH_BOOT_B™k1
 ((
uöt16_t
)0x0000Ë

	)

265 
	#FLASH_BOOT_B™k2
 ((
uöt16_t
)0x0001Ë

	)

268 
	#IS_FLASH_BOOT
(
BOOT
Ë(((BOOTË=
FLASH_BOOT_B™k1
Ë|| ((BOOTË=
FLASH_BOOT_B™k2
))

	)

276 #ifde‡
STM32F10X_XL


277 
	#FLASH_IT_BANK2_ERROR
 ((
uöt32_t
)0x80000400Ë

	)

278 
	#FLASH_IT_BANK2_EOP
 ((
uöt32_t
)0x80001000Ë

	)

280 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

281 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

283 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

284 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

285 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x7FFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

287 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

288 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

289 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

290 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

292 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

302 #ifde‡
STM32F10X_XL


303 
	#FLASH_FLAG_BANK2_BSY
 ((
uöt32_t
)0x80000001Ë

	)

304 
	#FLASH_FLAG_BANK2_EOP
 ((
uöt32_t
)0x80000020Ë

	)

305 
	#FLASH_FLAG_BANK2_PGERR
 ((
uöt32_t
)0x80000004Ë

	)

306 
	#FLASH_FLAG_BANK2_WRPRTERR
 ((
uöt32_t
)0x80000010Ë

	)

308 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

309 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

310 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

311 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

313 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

314 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

315 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

316 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

317 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

319 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0x7FFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

320 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

321 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

322 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
)|| \

323 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

324 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

325 ((
FLAG
Ë=
FLASH_FLAG_BANK2_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_EOP
) || \

326 ((
FLAG
Ë=
FLASH_FLAG_BANK2_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_WRPRTERR
))

328 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

329 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

330 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

331 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

332 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

334 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

335 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

336 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

337 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

339 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

340 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

341 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

342 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

343 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

344 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

368 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

369 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

370 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

371 
FLASH_U∆ock
();

372 
FLASH_Lock
();

373 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

374 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

375 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

376 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

377 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

378 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

379 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

380 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

382 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

383 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

384 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

385 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

386 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

388 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

389 
FLASH_Sètus
 
FLASH_GëSètus
();

390 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

393 
FLASH_U∆ockB™k1
();

394 
FLASH_LockB™k1
();

395 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Pages
();

396 
FLASH_Sètus
 
FLASH_GëB™k1Sètus
();

397 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
);

399 #ifde‡
STM32F10X_XL


401 
FLASH_U∆ockB™k2
();

402 
FLASH_LockB™k2
();

403 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Pages
();

404 
FLASH_Sètus
 
FLASH_GëB™k2Sètus
();

405 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
);

406 
FLASH_Sètus
 
FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
);

409 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_fsmc.h

24 #i‚de‡
__STM32F10x_FSMC_H


25 
	#__STM32F10x_FSMC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
FSMC_AddªssSëupTime
;

57 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

62 
uöt32_t
 
FSMC_D©aSëupTime
;

67 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

72 
uöt32_t
 
FSMC_CLKDivisi⁄
;

76 
uöt32_t
 
FSMC_D©aL©ícy
;

84 
uöt32_t
 
FSMC_Ac˚ssMode
;

86 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

94 
uöt32_t
 
FSMC_B™k
;

97 
uöt32_t
 
FSMC_D©aAddªssMux
;

101 
uöt32_t
 
FSMC_Mem‹yTy≥
;

105 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

108 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

112 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

116 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

120 
uöt32_t
 
FSMC_WøpMode
;

124 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

129 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

132 
uöt32_t
 
FSMC_WaôSig«l
;

136 
uöt32_t
 
FSMC_ExãndedMode
;

139 
uöt32_t
 
FSMC_WrôeBur°
;

142 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

144 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

145 }
	tFSMC_NORSRAMInôTy≥Def
;

153 
uöt32_t
 
FSMC_SëupTime
;

159 
uöt32_t
 
FSMC_WaôSëupTime
;

165 
uöt32_t
 
FSMC_HﬁdSëupTime
;

172 
uöt32_t
 
FSMC_HiZSëupTime
;

177 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

185 
uöt32_t
 
FSMC_B™k
;

188 
uöt32_t
 
FSMC_Waô„©uª
;

191 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

194 
uöt32_t
 
FSMC_ECC
;

197 
uöt32_t
 
FSMC_ECCPageSize
;

200 
uöt32_t
 
FSMC_TCLRSëupTime
;

204 
uöt32_t
 
FSMC_TARSëupTime
;

208 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

210 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

211 }
	tFSMC_NANDInôTy≥Def
;

219 
uöt32_t
 
FSMC_Waô„©uª
;

222 
uöt32_t
 
FSMC_TCLRSëupTime
;

226 
uöt32_t
 
FSMC_TARSëupTime
;

231 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

233 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

235 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

236 }
	tFSMC_PCCARDInôTy≥Def
;

249 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

250 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

251 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

252 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

260 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

261 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

269 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

274 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

275 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

276 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

277 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

279 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

280 ((
BANK
Ë=
FSMC_B™k3_NAND
))

282 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

283 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

284 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

286 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

287 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

288 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

298 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

299 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

300 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

301 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

311 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

312 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

313 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

314 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

315 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

316 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

326 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

327 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

328 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

329 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

339 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

340 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

341 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

342 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

350 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

351 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

352 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
Ë|| \

	)

353 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

363 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

364 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

365 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

366 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

376 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

377 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

378 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

379 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

389 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

390 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

391 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

392 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

402 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

403 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

404 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

405 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

415 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

416 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

417 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

418 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

427 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

428 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

430 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

431 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

441 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

442 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

443 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

444 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

453 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

463 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

473 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

483 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

493 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

503 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

513 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

514 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

515 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

516 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

517 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

518 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

519 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

520 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

538 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

539 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

540 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

541 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

552 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

553 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

554 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

555 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

565 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

566 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

567 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

568 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

569 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

570 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

571 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

572 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

573 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

574 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

575 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

576 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

586 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

596 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

606 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

616 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

626 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

636 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

646 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

647 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

648 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

649 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

650 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

651 ((
IT
Ë=
FSMC_IT_Levñ
) || \

652 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

661 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

662 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

663 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

664 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

665 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

666 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

667 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

668 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

670 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

696 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

697 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

698 
FSMC_PCCARDDeInô
();

699 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

700 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

701 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

702 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

703 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

704 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

705 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

706 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

707 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

708 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

709 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

710 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

711 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

712 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

713 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

714 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

716 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_gpio.h

24 #i‚de‡
__STM32F10x_GPIO_H


25 
	#__STM32F10x_GPIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

47 ((
PERIPH
Ë=
GPIOB
) || \

48 ((
PERIPH
Ë=
GPIOC
) || \

49 ((
PERIPH
Ë=
GPIOD
) || \

50 ((
PERIPH
Ë=
GPIOE
) || \

51 ((
PERIPH
Ë=
GPIOF
) || \

52 ((
PERIPH
Ë=
GPIOG
))

60 
GPIO_S≥ed_10MHz
 = 1,

61 
GPIO_S≥ed_2MHz
,

62 
GPIO_S≥ed_50MHz


63 }
	tGPIOS≥ed_Ty≥Def
;

64 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

65 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

72 { 
GPIO_Mode_AIN
 = 0x0,

73 
GPIO_Mode_IN_FLOATING
 = 0x04,

74 
GPIO_Mode_IPD
 = 0x28,

75 
GPIO_Mode_IPU
 = 0x48,

76 
GPIO_Mode_Out_OD
 = 0x14,

77 
GPIO_Mode_Out_PP
 = 0x10,

78 
GPIO_Mode_AF_OD
 = 0x1C,

79 
GPIO_Mode_AF_PP
 = 0x18

80 }
	tGPIOMode_Ty≥Def
;

82 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
Ë|| \

	)

83 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

84 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

85 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

93 
uöt16_t
 
GPIO_Pö
;

96 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

99 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

101 }
	tGPIO_InôTy≥Def
;

109 { 
Bô_RESET
 = 0,

110 
Bô_SET


111 }
	tBôA˘i⁄
;

113 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

127 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

128 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

129 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

130 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

131 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

132 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

133 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

134 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

135 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

136 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

137 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

138 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

139 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

140 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

141 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

142 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

143 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

145 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

147 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

148 ((
PIN
Ë=
GPIO_Pö_1
) || \

149 ((
PIN
Ë=
GPIO_Pö_2
) || \

150 ((
PIN
Ë=
GPIO_Pö_3
) || \

151 ((
PIN
Ë=
GPIO_Pö_4
) || \

152 ((
PIN
Ë=
GPIO_Pö_5
) || \

153 ((
PIN
Ë=
GPIO_Pö_6
) || \

154 ((
PIN
Ë=
GPIO_Pö_7
) || \

155 ((
PIN
Ë=
GPIO_Pö_8
) || \

156 ((
PIN
Ë=
GPIO_Pö_9
) || \

157 ((
PIN
Ë=
GPIO_Pö_10
) || \

158 ((
PIN
Ë=
GPIO_Pö_11
) || \

159 ((
PIN
Ë=
GPIO_Pö_12
) || \

160 ((
PIN
Ë=
GPIO_Pö_13
) || \

161 ((
PIN
Ë=
GPIO_Pö_14
) || \

162 ((
PIN
Ë=
GPIO_Pö_15
))

172 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

173 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

174 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

175 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

176 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

177 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

178 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

179 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

180 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

181 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

182 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

183 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

184 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

185 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

186 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

187 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

188 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

189 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

191 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

193 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

194 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

195 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

196 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

197 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

198 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

199 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201100Ë

	)

200 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

203 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

205 
	#GPIO_Rem≠_TIM15
 ((
uöt32_t
)0x80000001Ë

	)

206 
	#GPIO_Rem≠_TIM16
 ((
uöt32_t
)0x80000002Ë

	)

207 
	#GPIO_Rem≠_TIM17
 ((
uöt32_t
)0x80000004Ë

	)

208 
	#GPIO_Rem≠_CEC
 ((
uöt32_t
)0x80000008Ë

	)

209 
	#GPIO_Rem≠_TIM1_DMA
 ((
uöt32_t
)0x80000010Ë

	)

211 
	#GPIO_Rem≠_TIM9
 ((
uöt32_t
)0x80000020Ë

	)

212 
	#GPIO_Rem≠_TIM10
 ((
uöt32_t
)0x80000040Ë

	)

213 
	#GPIO_Rem≠_TIM11
 ((
uöt32_t
)0x80000080Ë

	)

214 
	#GPIO_Rem≠_TIM13
 ((
uöt32_t
)0x80000100Ë

	)

215 
	#GPIO_Rem≠_TIM14
 ((
uöt32_t
)0x80000200Ë

	)

216 
	#GPIO_Rem≠_FSMC_NADV
 ((
uöt32_t
)0x80000400Ë

	)

218 
	#GPIO_Rem≠_TIM67_DAC_DMA
 ((
uöt32_t
)0x80000800Ë

	)

219 
	#GPIO_Rem≠_TIM12
 ((
uöt32_t
)0x80001000Ë

	)

220 
	#GPIO_Rem≠_MISC
 ((
uöt32_t
)0x80002000Ë

	)

223 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
Ë|| \

	)

224 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

225 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

226 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

227 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

228 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

229 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

230 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

231 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

232 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

233 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

234 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

235 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

236 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

237 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
) || \

238 ((
REMAP
Ë=
GPIO_Rem≠_TIM15
Ë|| ((REMAPË=
GPIO_Rem≠_TIM16
) || \

239 ((
REMAP
Ë=
GPIO_Rem≠_TIM17
Ë|| ((REMAPË=
GPIO_Rem≠_CEC
) || \

240 ((
REMAP
Ë=
GPIO_Rem≠_TIM1_DMA
Ë|| ((REMAPË=
GPIO_Rem≠_TIM9
) || \

241 ((
REMAP
Ë=
GPIO_Rem≠_TIM10
Ë|| ((REMAPË=
GPIO_Rem≠_TIM11
) || \

242 ((
REMAP
Ë=
GPIO_Rem≠_TIM13
Ë|| ((REMAPË=
GPIO_Rem≠_TIM14
) || \

243 ((
REMAP
Ë=
GPIO_Rem≠_FSMC_NADV
Ë|| ((REMAPË=
GPIO_Rem≠_TIM67_DAC_DMA
) || \

244 ((
REMAP
Ë=
GPIO_Rem≠_TIM12
Ë|| ((REMAPË=
GPIO_Rem≠_MISC
))

254 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

255 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

256 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

257 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

258 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

259 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

260 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

261 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

262 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

263 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

264 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

265 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

267 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

268 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

269 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

270 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

271 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

272 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

273 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

283 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

284 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

285 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

286 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

287 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

288 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

289 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

290 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

291 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

292 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

293 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

294 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

295 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

296 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

297 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

298 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

300 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

301 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

302 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

303 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

304 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

305 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

306 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

307 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

308 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

309 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

310 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

311 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

312 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

313 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

314 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

315 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

324 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

325 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

327 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
Ë|| \

	)

328 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

349 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

350 
GPIO_AFIODeInô
();

351 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

352 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

353 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

354 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

355 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

356 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

357 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

358 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

359 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

360 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

361 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

362 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

363 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

364 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

365 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

366 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

368 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_i2c.h

24 #i‚de‡
__STM32F10x_I2C_H


25 
	#__STM32F10x_I2C_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
I2C_ClockS≥ed
;

55 
uöt16_t
 
I2C_Mode
;

58 
uöt16_t
 
I2C_DutyCy˛e
;

61 
uöt16_t
 
I2C_OwnAddªss1
;

64 
uöt16_t
 
I2C_Ack
;

67 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

69 }
	tI2C_InôTy≥Def
;

80 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
Ë|| \

	)

81 ((
PERIPH
Ë=
I2C2
))

86 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

87 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

88 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

89 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

90 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

91 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

100 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

101 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

102 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

103 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

112 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

113 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

114 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

115 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

124 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

125 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

126 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

127 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

136 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

137 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

138 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

139 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

148 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

149 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

150 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

151 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

152 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

153 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

154 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

155 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

156 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

157 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

158 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

165 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

174 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

175 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

176 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

177 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

186 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

187 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

188 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

189 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

198 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

199 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

200 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
Ë|| \

	)

201 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

210 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

211 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

212 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

213 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

222 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

223 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

224 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

225 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

226 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

227 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

228 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

229 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

230 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

231 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

232 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

233 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

234 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

235 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

237 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

239 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

240 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

241 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

242 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

243 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

244 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

245 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

258 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

259 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

260 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

261 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

262 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

263 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

264 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

270 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

271 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

272 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

273 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

274 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

275 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

276 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

277 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

278 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

279 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

280 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

281 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

282 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

283 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

285 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

287 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

288 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

289 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

290 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

291 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

292 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

293 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

294 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

295 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

296 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

297 ((
FLAG
Ë=
I2C_FLAG_SB
))

319 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

347 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

348 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

350 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

383 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

387 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

389 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

424 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

425 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

428 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

429 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

432 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

463 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

465 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

469 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

470 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

472 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

476 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

477 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

478 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

479 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

480 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

481 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

482 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

483 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

484 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

485 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

486 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

487 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

488 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

489 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

490 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

491 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

492 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

493 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

494 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

495 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

504 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

513 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

534 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

535 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

536 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

537 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

538 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

540 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

542 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

544 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

547 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

548 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

549 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

550 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

551 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

553 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

554 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

555 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

556 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

558 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

645 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

651 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

657 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

663 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

664 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

665 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

667 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_iwdg.h

24 #i‚de‡
__STM32F10x_IWDG_H


25 
	#__STM32F10x_IWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

70 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

71 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

72 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

73 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

74 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

75 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

76 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

77 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

83 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

92 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

93 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

94 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

95 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

116 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

117 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

118 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

119 
IWDG_RñﬂdCou¡î
();

120 
IWDG_E«bÀ
();

121 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

123 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_pwr.h

24 #i‚de‡
__STM32F10x_PWR_H


25 
	#__STM32F10x_PWR_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

59 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

60 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

61 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

62 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

63 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

64 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

65 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

66 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

	)

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

78 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

79 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

80 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

81 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

90 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

91 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

92 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

102 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

103 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

104 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

105 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

106 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

108 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

129 
PWR_DeInô
();

130 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

132 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

133 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

134 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

135 
PWR_E¡îSTANDBYMode
();

136 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

137 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

139 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_rcc.h

24 #i‚de‡
__STM32F10x_RCC_H


25 
	#__STM32F10x_RCC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SYSCLK_Fªquícy
;

49 
uöt32_t
 
HCLK_Fªquícy
;

50 
uöt32_t
 
PCLK1_Fªquícy
;

51 
uöt32_t
 
PCLK2_Fªquícy
;

52 
uöt32_t
 
ADCCLK_Fªquícy
;

53 }
	tRCC_ClocksTy≥Def
;

67 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

68 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

69 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

70 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

71 ((
HSE
Ë=
RCC_HSE_By∑ss
))

81 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

83 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_CL
)

84 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

85 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

86 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

88 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

90 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

91 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

92 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

102 #i‚de‡
STM32F10X_CL


103 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

104 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

105 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

106 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

107 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

108 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

109 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

110 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

111 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

112 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

113 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

114 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

115 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

116 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

117 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

118 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

119 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

120 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

121 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

122 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

123 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

124 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

125 ((
MUL
Ë=
RCC_PLLMul_16
))

128 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

129 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

130 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

131 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

132 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

133 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

134 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

136 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
Ë|| \

	)

137 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

138 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

139 ((
MUL
Ë=
RCC_PLLMul_6_5
))

148 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

149 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

150 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

151 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

152 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

153 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

154 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

155 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

156 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

157 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

158 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

159 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

160 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

161 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

162 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

163 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

164 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

166 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
Ë|| \

	)

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

173 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

183 #ifde‡
STM32F10X_CL


185 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

186 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

188 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
Ë|| \

	)

189 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

190 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

192 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

194 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
))

	)

200 #ifde‡
STM32F10X_CL


205 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

207 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

208 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

209 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

210 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

211 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

212 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

213 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

214 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

215 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

216 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

217 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

218 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

219 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

220 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

222 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
Ë|| \

	)

223 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

224 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

225 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

226 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

227 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

228 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

229 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

239 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

240 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

241 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

242 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

243 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

244 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

245 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

246 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

247 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

249 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
Ë|| \

	)

250 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

251 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

252 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

253 ((
MUL
Ë=
RCC_PLL2Mul_20
))

263 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

264 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

265 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

266 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

267 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

268 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

269 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

270 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

271 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

273 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
Ë|| \

	)

274 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

275 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

276 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

277 ((
MUL
Ë=
RCC_PLL3Mul_20
))

289 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

290 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

291 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

292 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

293 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

294 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

303 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

304 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

305 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

306 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

307 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

308 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

309 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

310 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

311 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

312 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

313 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

314 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

315 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

316 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

325 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

326 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

327 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

328 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

329 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

330 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

331 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

332 ((
PCLK
Ë=
RCC_HCLK_Div16
))

341 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

342 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

343 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

344 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

345 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

346 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

348 #i‚de‡
STM32F10X_CL


349 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

350 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

351 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

352 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

353 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

355 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

356 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

357 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

358 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

359 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

360 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

361 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

362 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

370 #i‚de‡
STM32F10X_CL


375 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

376 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

378 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

379 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

387 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

388 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

390 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
Ë|| \

	)

391 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

398 #ifde‡
STM32F10X_CL


402 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

403 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

405 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
Ë|| \

	)

406 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

414 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

415 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

417 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
Ë|| \

	)

418 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

429 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

430 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

431 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

432 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

433 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
Ë|| \

	)

434 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

443 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

444 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

445 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

446 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

447 ((
LSE
Ë=
RCC_LSE_By∑ss
))

456 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

457 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

458 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

459 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

460 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

461 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

470 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

471 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

472 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

473 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

474 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

476 #i‚de‡
STM32F10X_CL


477 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

478 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

479 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

481 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

482 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

483 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

484 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

486 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

487 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

497 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

498 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

499 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

500 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

501 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

502 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

503 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

504 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

505 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

506 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

507 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

508 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

509 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

510 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

511 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

512 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

513 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

514 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

515 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00080000)

	)

516 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00100000)

	)

517 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00200000)

	)

519 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC00002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

528 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

529 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

530 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

531 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

532 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

533 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

534 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

535 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

536 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

537 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

538 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

539 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

540 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

541 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

542 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

543 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

544 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

545 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

546 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

547 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

548 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

549 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

550 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

551 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

552 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x40000000)

	)

554 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

564 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

565 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

566 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

567 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

568 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

570 #i‚de‡
STM32F10X_CL


571 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

572 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

573 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

575 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

576 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

577 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

578 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

580 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

581 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

582 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

583 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

584 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

595 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

596 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

597 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

598 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

599 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

600 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

601 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

602 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

603 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

604 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

605 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

607 #i‚de‡
STM32F10X_CL


608 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

609 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

610 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

611 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

612 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

613 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

615 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

616 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

617 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

618 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

619 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

620 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

621 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

622 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

623 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

626 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

647 
RCC_DeInô
();

648 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

649 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

650 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

651 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

652 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

653 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

655 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

656 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

659 #ifde‡ 
STM32F10X_CL


660 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

661 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

662 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

663 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

664 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

667 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

668 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

669 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

670 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

671 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

672 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

674 #i‚de‡
STM32F10X_CL


675 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

677 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

680 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

682 #ifde‡
STM32F10X_CL


683 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

684 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

687 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

688 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

689 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

690 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

692 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

694 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

696 #ifde‡
STM32F10X_CL


697 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

700 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

701 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

703 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

704 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

705 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

706 
RCC_CÀ¨Fœg
();

707 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

708 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

710 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_rtc.h

24 #i‚de‡
__STM32F10x_RTC_H


25 
	#__STM32F10x_RTC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

59 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

60 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

61 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

62 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
Ë|| \

	)

63 ((
IT
Ë=
RTC_IT_SEC
))

72 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

73 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

74 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

75 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

76 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

77 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

78 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
Ë|| \

	)

79 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

80 ((
FLAG
Ë=
RTC_FLAG_SEC
))

81 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

103 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

104 
RTC_E¡îC⁄figMode
();

105 
RTC_ExôC⁄figMode
();

106 
uöt32_t
 
RTC_GëCou¡î
();

107 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

108 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

109 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

110 
uöt32_t
 
RTC_GëDividî
();

111 
RTC_WaôF‹La°Task
();

112 
RTC_WaôF‹Synchro
();

113 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

114 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

115 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

116 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

118 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_sdio.h

24 #i‚de‡
__STM32F10x_SDIO_H


25 
	#__STM32F10x_SDIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SDIO_ClockEdge
;

51 
uöt32_t
 
SDIO_ClockBy∑ss
;

55 
uöt32_t
 
SDIO_ClockPowîSave
;

59 
uöt32_t
 
SDIO_BusWide
;

62 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

65 
uöt8_t
 
SDIO_ClockDiv
;

68 } 
	tSDIO_InôTy≥Def
;

72 
uöt32_t
 
SDIO_Argumít
;

77 
uöt32_t
 
SDIO_CmdIndex
;

79 
uöt32_t
 
SDIO_Re•⁄£
;

82 
uöt32_t
 
SDIO_Waô
;

85 
uöt32_t
 
SDIO_CPSM
;

88 } 
	tSDIO_CmdInôTy≥Def
;

92 
uöt32_t
 
SDIO_D©aTimeOut
;

94 
uöt32_t
 
SDIO_D©aLígth
;

96 
uöt32_t
 
SDIO_D©aBlockSize
;

99 
uöt32_t
 
SDIO_Tøns„rDú
;

103 
uöt32_t
 
SDIO_Tøns„rMode
;

106 
uöt32_t
 
SDIO_DPSM
;

109 } 
	tSDIO_D©aInôTy≥Def
;

123 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

124 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

125 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

126 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

135 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

136 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

137 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

138 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

147 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

148 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

149 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

150 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

159 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

160 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

161 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

162 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

163 ((
WIDE
Ë=
SDIO_BusWide_8b
))

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

174 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

175 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

176 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

185 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

186 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

187 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

197 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

198 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

199 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

200 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

201 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

202 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

203 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

204 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

205 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

206 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

207 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

208 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

209 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

210 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

211 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

212 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

213 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

214 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

215 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

216 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

217 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

218 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

219 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

220 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

221 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

230 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

239 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

240 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

241 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

242 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

244 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

253 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

254 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

255 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

256 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

257 ((
WAIT
Ë=
SDIO_Waô_Píd
))

266 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

267 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

268 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

277 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

278 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

279 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

280 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

281 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

282 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

291 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

300 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

301 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

302 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

303 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

304 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

305 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

306 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

307 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

308 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

309 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

310 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

311 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

312 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

313 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

314 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

315 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

338 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

339 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

340 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

341 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

350 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

351 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

352 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

353 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

362 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

363 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

364 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

373 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

374 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

375 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

376 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

377 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

378 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

379 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

380 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

381 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

382 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

383 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

384 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

385 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

386 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

387 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

388 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

389 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

390 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

391 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

392 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

393 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

394 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

395 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

396 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

397 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

398 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

422 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

424 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

425 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

426 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

428 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

429 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

430 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

431 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

432 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

433 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

434 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

435 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

436 ((
IT
Ë=
SDIO_IT_TXACT
) || \

437 ((
IT
Ë=
SDIO_IT_RXACT
) || \

438 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

439 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

440 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

442 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

444 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

446 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

447 ((
IT
Ë=
SDIO_IT_CEATAEND
))

449 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

459 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

460 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

461 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

462 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

483 
SDIO_DeInô
();

484 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

486 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

487 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

488 
uöt32_t
 
SDIO_GëPowîSèã
();

489 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

491 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

492 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

493 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

494 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

495 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

497 
uöt32_t
 
SDIO_GëD©aCou¡î
();

498 
uöt32_t
 
SDIO_RódD©a
();

499 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

500 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

510 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

511 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

512 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

514 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_spi.h

24 #i‚de‡
__STM32F10x_SPI_H


25 
	#__STM32F10x_SPI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
SPI_Dúe˘i⁄
;

55 
uöt16_t
 
SPI_Mode
;

58 
uöt16_t
 
SPI_D©aSize
;

61 
uöt16_t
 
SPI_CPOL
;

64 
uöt16_t
 
SPI_CPHA
;

67 
uöt16_t
 
SPI_NSS
;

71 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

77 
uöt16_t
 
SPI_Fú°Bô
;

80 
uöt16_t
 
SPI_CRCPﬁynomül
;

81 }
	tSPI_InôTy≥Def
;

90 
uöt16_t
 
I2S_Mode
;

93 
uöt16_t
 
I2S_Sènd¨d
;

96 
uöt16_t
 
I2S_D©aF‹m©
;

99 
uöt16_t
 
I2S_MCLKOuçut
;

102 
uöt32_t
 
I2S_AudioFªq
;

105 
uöt16_t
 
I2S_CPOL
;

107 }
	tI2S_InôTy≥Def
;

117 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

118 ((
PERIPH
Ë=
SPI2
) || \

119 ((
PERIPH
Ë=
SPI3
))

121 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

122 ((
PERIPH
Ë=
SPI3
))

128 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

129 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

131 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

132 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

135 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

144 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

145 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

146 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

147 ((
MODE
Ë=
SPI_Mode_Sœve
))

156 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

157 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

158 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

159 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

168 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

169 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

170 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

171 ((
CPOL
Ë=
SPI_CPOL_High
))

180 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

181 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

182 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

183 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

192 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

193 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

194 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

195 ((
NSS
Ë=
SPI_NSS_H¨d
))

204 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

205 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

206 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

207 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

208 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

209 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

210 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

211 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

212 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

219 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

228 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

229 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

230 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

231 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

240 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

241 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

242 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

243 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

244 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

245 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

247 ((
MODE
Ë=
I2S_Mode_Ma°îRx
) )

256 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

257 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

258 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

259 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

260 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

261 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

262 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

265 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

274 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

275 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

276 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

277 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

278 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

281 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

290 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

291 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

292 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

293 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

302 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

303 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

304 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

305 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

306 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

307 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

308 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

309 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

310 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

311 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

313 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
Ë&& \

	)

314 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

324 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

325 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

326 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

327 ((
CPOL
Ë=
I2S_CPOL_High
))

336 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

337 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

338 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

347 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

348 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

349 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

350 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

359 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

360 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

361 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

370 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

371 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

372 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

373 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

382 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

383 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

384 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

385 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

386 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

387 ((
IT
Ë=
SPI_I2S_IT_ERR
))

388 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

389 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

390 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

391 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

392 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

393 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

394 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

395 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

404 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

405 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

406 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

407 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

408 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

409 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

410 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

411 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

412 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

413 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

414 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

415 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

416 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

425 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

446 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

447 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

448 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

449 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

450 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

451 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

456 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

457 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

458 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

460 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

461 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

463 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

465 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

466 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

467 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

468 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

470 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_tim.h

24 #i‚de‡
__STM32F10x_TIM_H


25 
	#__STM32F10x_TIM_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

53 
uöt16_t
 
TIM_PªsˇÀr
;

56 
uöt16_t
 
TIM_Cou¡îMode
;

59 
uöt16_t
 
TIM_Pîiod
;

63 
uöt16_t
 
TIM_ClockDivisi⁄
;

66 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

74 } 
	tTIM_TimeBa£InôTy≥Def
;

82 
uöt16_t
 
TIM_OCMode
;

85 
uöt16_t
 
TIM_OuçutSèã
;

88 
uöt16_t
 
TIM_OuçutNSèã
;

92 
uöt16_t
 
TIM_Pul£
;

95 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

98 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCIdÀSèã
;

106 
uöt16_t
 
TIM_OCNIdÀSèã
;

109 } 
	tTIM_OCInôTy≥Def
;

118 
uöt16_t
 
TIM_Ch™√l
;

121 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

124 
uöt16_t
 
TIM_ICSñe˘i⁄
;

127 
uöt16_t
 
TIM_ICPªsˇÀr
;

130 
uöt16_t
 
TIM_ICFûãr
;

132 } 
	tTIM_ICInôTy≥Def
;

142 
uöt16_t
 
TIM_OSSRSèã
;

145 
uöt16_t
 
TIM_OSSISèã
;

148 
uöt16_t
 
TIM_LOCKLevñ
;

151 
uöt16_t
 
TIM_DódTime
;

155 
uöt16_t
 
TIM_Bªak
;

158 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

161 
uöt16_t
 
TIM_Autom©icOuçut
;

163 } 
	tTIM_BDTRInôTy≥Def
;

169 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

170 ((
PERIPH
Ë=
TIM2
) || \

171 ((
PERIPH
Ë=
TIM3
) || \

172 ((
PERIPH
Ë=
TIM4
) || \

173 ((
PERIPH
Ë=
TIM5
) || \

174 ((
PERIPH
Ë=
TIM6
) || \

175 ((
PERIPH
Ë=
TIM7
) || \

176 ((
PERIPH
Ë=
TIM8
) || \

177 ((
PERIPH
Ë=
TIM9
) || \

178 ((
PERIPH
Ë=
TIM10
)|| \

179 ((
PERIPH
Ë=
TIM11
)|| \

180 ((
PERIPH
Ë=
TIM12
)|| \

181 ((
PERIPH
Ë=
TIM13
)|| \

182 ((
PERIPH
Ë=
TIM14
)|| \

183 ((
PERIPH
Ë=
TIM15
)|| \

184 ((
PERIPH
Ë=
TIM16
)|| \

185 ((
PERIPH
Ë=
TIM17
))

188 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

189 ((
PERIPH
Ë=
TIM8
))

192 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

193 ((
PERIPH
Ë=
TIM8
) || \

194 ((
PERIPH
Ë=
TIM15
)|| \

195 ((
PERIPH
Ë=
TIM16
)|| \

196 ((
PERIPH
Ë=
TIM17
))

199 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

200 ((
PERIPH
Ë=
TIM2
) || \

201 ((
PERIPH
Ë=
TIM3
) || \

202 ((
PERIPH
Ë=
TIM4
) || \

203 ((
PERIPH
Ë=
TIM5
) || \

204 ((
PERIPH
Ë=
TIM8
))

207 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

208 ((
PERIPH
Ë=
TIM2
) || \

209 ((
PERIPH
Ë=
TIM3
) || \

210 ((
PERIPH
Ë=
TIM4
) || \

211 ((
PERIPH
Ë=
TIM5
) || \

212 ((
PERIPH
Ë=
TIM8
) || \

213 ((
PERIPH
Ë=
TIM15
)|| \

214 ((
PERIPH
Ë=
TIM16
)|| \

215 ((
PERIPH
Ë=
TIM17
))

218 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

219 ((
PERIPH
Ë=
TIM2
) || \

220 ((
PERIPH
Ë=
TIM3
) || \

221 ((
PERIPH
Ë=
TIM4
) || \

222 ((
PERIPH
Ë=
TIM5
) || \

223 ((
PERIPH
Ë=
TIM8
) || \

224 ((
PERIPH
Ë=
TIM15
))

227 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

228 ((
PERIPH
Ë=
TIM2
) || \

229 ((
PERIPH
Ë=
TIM3
) || \

230 ((
PERIPH
Ë=
TIM4
) || \

231 ((
PERIPH
Ë=
TIM5
) || \

232 ((
PERIPH
Ë=
TIM8
) || \

233 ((
PERIPH
Ë=
TIM9
) || \

234 ((
PERIPH
Ë=
TIM12
)|| \

235 ((
PERIPH
Ë=
TIM15
))

238 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

239 ((
PERIPH
Ë=
TIM2
) || \

240 ((
PERIPH
Ë=
TIM3
) || \

241 ((
PERIPH
Ë=
TIM4
) || \

242 ((
PERIPH
Ë=
TIM5
) || \

243 ((
PERIPH
Ë=
TIM6
) || \

244 ((
PERIPH
Ë=
TIM7
) || \

245 ((
PERIPH
Ë=
TIM8
) || \

246 ((
PERIPH
Ë=
TIM9
) || \

247 ((
PERIPH
Ë=
TIM12
)|| \

248 ((
PERIPH
Ë=
TIM15
))

251 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

252 ((
PERIPH
Ë=
TIM2
) || \

253 ((
PERIPH
Ë=
TIM3
) || \

254 ((
PERIPH
Ë=
TIM4
) || \

255 ((
PERIPH
Ë=
TIM5
) || \

256 ((
PERIPH
Ë=
TIM8
) || \

257 ((
PERIPH
Ë=
TIM9
) || \

258 ((
PERIPH
Ë=
TIM10
)|| \

259 ((
PERIPH
Ë=
TIM11
)|| \

260 ((
PERIPH
Ë=
TIM12
)|| \

261 ((
PERIPH
Ë=
TIM13
)|| \

262 ((
PERIPH
Ë=
TIM14
)|| \

263 ((
PERIPH
Ë=
TIM15
)|| \

264 ((
PERIPH
Ë=
TIM16
)|| \

265 ((
PERIPH
Ë=
TIM17
))

268 
	#IS_TIM_LIST9_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

269 ((
PERIPH
Ë=
TIM2
) || \

270 ((
PERIPH
Ë=
TIM3
) || \

271 ((
PERIPH
Ë=
TIM4
) || \

272 ((
PERIPH
Ë=
TIM5
) || \

273 ((
PERIPH
Ë=
TIM6
) || \

274 ((
PERIPH
Ë=
TIM7
) || \

275 ((
PERIPH
Ë=
TIM8
) || \

276 ((
PERIPH
Ë=
TIM15
)|| \

277 ((
PERIPH
Ë=
TIM16
)|| \

278 ((
PERIPH
Ë=
TIM17
))

288 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

289 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

290 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

291 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

292 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

293 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

294 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

295 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

296 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

297 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

298 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

299 ((
MODE
Ë=
TIM_OCMode_PWM2
))

300 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

301 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

302 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

303 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

304 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

305 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

306 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

307 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

316 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

317 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

318 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

319 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

328 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

329 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

330 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

331 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

332 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

333 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

334 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

335 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

336 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

337 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

338 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

339 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

340 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

349 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

350 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

351 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

352 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

353 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

354 ((
DIV
Ë=
TIM_CKD_DIV4
))

363 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

364 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

365 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

366 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

367 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

368 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

369 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

370 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

371 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

372 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

381 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

382 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

383 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

384 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

393 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

394 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

395 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

396 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

405 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

406 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

407 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

408 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

417 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

418 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

419 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

420 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

429 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

430 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

431 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

432 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

441 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

442 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

443 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

444 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

453 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

454 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

455 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

456 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

465 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

466 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

467 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

468 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

477 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

478 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

479 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

480 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

489 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

490 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

491 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

492 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

493 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

494 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

495 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

496 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

505 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

506 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

507 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

508 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

517 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

518 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

519 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

520 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

529 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

530 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

531 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

532 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

541 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

542 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

543 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

544 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

553 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

554 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

556 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

557 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

558 
	#IS_TIM_IC_POLARITY_LITE
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

559 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

560 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

569 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

571 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

573 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

574 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

575 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

576 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

585 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

586 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

587 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

588 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

589 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

590 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

591 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

592 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

601 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

602 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

603 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

604 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

605 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

606 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

607 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

608 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

609 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

611 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

612 ((
IT
Ë=
TIM_IT_CC1
) || \

613 ((
IT
Ë=
TIM_IT_CC2
) || \

614 ((
IT
Ë=
TIM_IT_CC3
) || \

615 ((
IT
Ë=
TIM_IT_CC4
) || \

616 ((
IT
Ë=
TIM_IT_COM
) || \

617 ((
IT
Ë=
TIM_IT_Triggî
) || \

618 ((
IT
Ë=
TIM_IT_Bªak
))

627 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

629 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

630 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

631 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

632 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

633 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

634 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

635 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

636 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

637 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

638 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

639 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

640 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

641 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

642 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

643 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

644 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

645 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

646 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

647 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

648 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

649 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

650 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

651 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

652 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

653 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

654 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

655 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

656 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

657 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

658 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

659 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

660 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

661 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

662 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

663 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

664 ((
BASE
Ë=
TIM_DMABa£_DCR
))

673 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

674 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

675 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

676 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

677 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

678 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

679 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

680 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

681 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

682 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

683 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

684 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

685 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

686 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

687 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

688 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

689 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

691 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
Ë|| \

	)

692 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

693 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

694 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

695 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

696 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

697 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

698 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

699 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

700 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

701 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

702 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

703 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

704 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

705 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

706 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

707 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

708 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

717 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

718 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

719 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

720 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

721 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

722 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

723 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

724 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

734 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

735 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

736 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

737 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

738 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

739 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

740 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

741 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

750 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

751 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

752 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

753 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

754 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

755 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

756 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

757 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

758 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

759 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

760 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

761 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

762 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

763 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

764 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

765 ((
SELECTION
Ë=
TIM_TS_ETRF
))

766 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

767 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

768 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

769 ((
SELECTION
Ë=
TIM_TS_ITR3
))

778 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

779 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

780 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

781 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
Ë|| \

	)

782 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

783 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

791 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

792 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

793 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

794 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

803 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

804 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

805 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

806 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

815 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

816 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

817 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

818 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

827 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

828 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

829 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

830 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

831 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

832 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

842 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

843 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

844 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

845 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

846 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

847 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

848 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

849 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

850 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

860 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

863 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

864 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

865 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

874 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

875 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

876 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

877 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

886 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

887 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

888 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

889 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

899 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

900 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

901 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

902 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

911 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

912 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

913 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

914 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

915 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

916 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

917 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

918 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

919 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

920 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

921 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

922 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

923 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

924 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

925 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

926 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

935 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

936 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

937 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

938 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

939 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

940 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

941 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

942 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

951 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

952 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

953 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

954 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

963 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

964 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

965 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

966 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

967 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

968 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

969 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

970 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

971 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

972 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

973 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

974 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

975 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

976 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

977 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

978 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

979 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

980 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

981 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

982 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

983 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

984 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

985 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

986 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

989 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

998 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1007 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1016 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

1017 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

1018 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

1019 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1020 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1021 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1022 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1023 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1024 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1025 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1026 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1027 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1028 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1029 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1030 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1031 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1032 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1033 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1054 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1055 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1056 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1057 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1058 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1059 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1060 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1061 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1062 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1063 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1064 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1065 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1066 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1067 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1068 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1069 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1070 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1071 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1072 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1073 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1074 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1075 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1076 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1077 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1078 
uöt16_t
 
ExtTRGFûãr
);

1079 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1080 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1081 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1082 
uöt16_t
 
ExtTRGFûãr
);

1083 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1084 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1085 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1086 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1087 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1088 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1089 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1090 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1091 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1092 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1093 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1094 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1095 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1097 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1098 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1099 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1100 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1101 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1102 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1103 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1104 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1105 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1106 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1107 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1108 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1109 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1110 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1111 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1112 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1113 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1114 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1115 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1116 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1117 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1118 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1119 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1120 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1121 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1126 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1127 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1128 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1129 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1130 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1131 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1132 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1133 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1134 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1135 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1136 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1137 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1138 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1139 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1140 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1141 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1142 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1143 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1144 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1145 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1147 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_usart.h

24 #i‚de‡
__STM32F10x_USART_H


25 
	#__STM32F10x_USART_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
USART_BaudR©e
;

57 
uöt16_t
 
USART_W‹dLígth
;

60 
uöt16_t
 
USART_St›Bôs
;

63 
uöt16_t
 
USART_P¨ôy
;

70 
uöt16_t
 
USART_Mode
;

73 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

76 } 
	tUSART_InôTy≥Def
;

85 
uöt16_t
 
USART_Clock
;

88 
uöt16_t
 
USART_CPOL
;

91 
uöt16_t
 
USART_CPHA
;

94 
uöt16_t
 
USART_La°Bô
;

97 } 
	tUSART_ClockInôTy≥Def
;

107 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

108 ((
PERIPH
Ë=
USART2
) || \

109 ((
PERIPH
Ë=
USART3
) || \

110 ((
PERIPH
Ë=
UART4
) || \

111 ((
PERIPH
Ë=
UART5
))

113 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

114 ((
PERIPH
Ë=
USART2
) || \

115 ((
PERIPH
Ë=
USART3
))

117 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

118 ((
PERIPH
Ë=
USART2
) || \

119 ((
PERIPH
Ë=
USART3
) || \

120 ((
PERIPH
Ë=
UART4
))

125 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

126 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

128 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

129 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

138 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

139 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

140 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

141 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

142 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

143 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

145 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

154 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

155 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

156 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

157 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

158 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

159 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

168 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

169 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

170 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

182 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

183 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

186 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

194 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

195 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

196 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

197 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

206 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

207 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

208 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

218 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

219 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

220 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

230 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

231 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

232 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

233 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

242 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

243 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

244 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

245 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

246 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

247 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

248 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

249 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

250 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

251 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

252 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

253 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

254 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

255 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

256 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

257 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

258 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

259 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

260 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

261 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

262 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

263 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

272 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

273 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

274 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

284 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

285 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

286 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

287 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

296 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

297 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

298 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

299 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

300 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

309 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

310 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

311 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

312 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

321 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

322 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

323 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

324 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

325 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

326 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

327 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

328 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

329 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

330 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

331 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

332 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

333 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

334 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

335 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

337 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

338 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&&\

	)

339 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

340 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

341 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

342 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

343 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

365 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

366 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

368 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

370 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

373 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

374 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

375 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

376 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

377 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

378 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

379 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

381 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

382 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

383 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

388 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

389 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

390 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

391 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

392 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

393 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

395 #ifde‡
__˝lu•lus


	@inc/inc/stm32f10x_wwdg.h

24 #i‚de‡
__STM32F10x_WWDG_H


25 
	#__STM32F10x_WWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

59 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

60 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

61 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

62 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

66 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

67 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

88 
WWDG_DeInô
();

89 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

90 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

91 
WWDG_E«bÀIT
();

92 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

93 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@inc/stm32f10x.h

50 #i‚de‡
__STM32F10x_H


51 
	#__STM32F10x_H


	)

53 #ifde‡
__˝lu•lus


65 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

95 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

99 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


105 
	#USE_STDPERIPH_DRIVER


	)

115 #i‡!
deföed
 
HSE_VALUE


116 #ifde‡
STM32F10X_CL


117 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

119 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

128 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

130 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

135 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03Ë

	)

136 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x05Ë

	)

137 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

138 
	#__STM32F10X_STDPERIPH_VERSION_RC
 (0x00Ë

	)

139 
	#__STM32F10X_STDPERIPH_VERSION
 ( (
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 24)\

	)

140 |(
__STM32F10X_STDPERIPH_VERSION_SUB1
 << 16)\

141 |(
__STM32F10X_STDPERIPH_VERSION_SUB2
 << 8)\

142 |(
__STM32F10X_STDPERIPH_VERSION_RC
))

155 #ifde‡
STM32F10X_XL


156 
	#__MPU_PRESENT
 1

	)

158 
	#__MPU_PRESENT
 0

	)

160 
	#__NVIC_PRIO_BITS
 4

	)

161 
	#__Víd‹_SysTickC⁄fig
 0

	)

167 
	eIRQn


170 
N⁄MaskabÀI¡_IRQn
 = -14,

171 
Mem‹yM™agemít_IRQn
 = -12,

172 
BusFau…_IRQn
 = -11,

173 
UßgeFau…_IRQn
 = -10,

174 
SVCÆl_IRQn
 = -5,

175 
DebugM⁄ô‹_IRQn
 = -4,

176 
PídSV_IRQn
 = -2,

177 
SysTick_IRQn
 = -1,

180 
WWDG_IRQn
 = 0,

181 
PVD_IRQn
 = 1,

182 
TAMPER_IRQn
 = 2,

183 
RTC_IRQn
 = 3,

184 
FLASH_IRQn
 = 4,

185 
RCC_IRQn
 = 5,

186 
EXTI0_IRQn
 = 6,

187 
EXTI1_IRQn
 = 7,

188 
EXTI2_IRQn
 = 8,

189 
EXTI3_IRQn
 = 9,

190 
EXTI4_IRQn
 = 10,

191 
DMA1_Ch™√l1_IRQn
 = 11,

192 
DMA1_Ch™√l2_IRQn
 = 12,

193 
DMA1_Ch™√l3_IRQn
 = 13,

194 
DMA1_Ch™√l4_IRQn
 = 14,

195 
DMA1_Ch™√l5_IRQn
 = 15,

196 
DMA1_Ch™√l6_IRQn
 = 16,

197 
DMA1_Ch™√l7_IRQn
 = 17,

199 #ifde‡
STM32F10X_LD


200 
ADC1_2_IRQn
 = 18,

201 
USB_HP_CAN1_TX_IRQn
 = 19,

202 
USB_LP_CAN1_RX0_IRQn
 = 20,

203 
CAN1_RX1_IRQn
 = 21,

204 
CAN1_SCE_IRQn
 = 22,

205 
EXTI9_5_IRQn
 = 23,

206 
TIM1_BRK_IRQn
 = 24,

207 
TIM1_UP_IRQn
 = 25,

208 
TIM1_TRG_COM_IRQn
 = 26,

209 
TIM1_CC_IRQn
 = 27,

210 
TIM2_IRQn
 = 28,

211 
TIM3_IRQn
 = 29,

212 
I2C1_EV_IRQn
 = 31,

213 
I2C1_ER_IRQn
 = 32,

214 
SPI1_IRQn
 = 35,

215 
USART1_IRQn
 = 37,

216 
USART2_IRQn
 = 38,

217 
EXTI15_10_IRQn
 = 40,

218 
RTCAœrm_IRQn
 = 41,

219 
USBWakeUp_IRQn
 = 42

222 #ifde‡
STM32F10X_LD_VL


223 
ADC1_IRQn
 = 18,

224 
EXTI9_5_IRQn
 = 23,

225 
TIM1_BRK_TIM15_IRQn
 = 24,

226 
TIM1_UP_TIM16_IRQn
 = 25,

227 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

228 
TIM1_CC_IRQn
 = 27,

229 
TIM2_IRQn
 = 28,

230 
TIM3_IRQn
 = 29,

231 
I2C1_EV_IRQn
 = 31,

232 
I2C1_ER_IRQn
 = 32,

233 
SPI1_IRQn
 = 35,

234 
USART1_IRQn
 = 37,

235 
USART2_IRQn
 = 38,

236 
EXTI15_10_IRQn
 = 40,

237 
RTCAœrm_IRQn
 = 41,

238 
CEC_IRQn
 = 42,

239 
TIM6_DAC_IRQn
 = 54,

240 
TIM7_IRQn
 = 55

243 #ifde‡
STM32F10X_MD


244 
ADC1_2_IRQn
 = 18,

245 
USB_HP_CAN1_TX_IRQn
 = 19,

246 
USB_LP_CAN1_RX0_IRQn
 = 20,

247 
CAN1_RX1_IRQn
 = 21,

248 
CAN1_SCE_IRQn
 = 22,

249 
EXTI9_5_IRQn
 = 23,

250 
TIM1_BRK_IRQn
 = 24,

251 
TIM1_UP_IRQn
 = 25,

252 
TIM1_TRG_COM_IRQn
 = 26,

253 
TIM1_CC_IRQn
 = 27,

254 
TIM2_IRQn
 = 28,

255 
TIM3_IRQn
 = 29,

256 
TIM4_IRQn
 = 30,

257 
I2C1_EV_IRQn
 = 31,

258 
I2C1_ER_IRQn
 = 32,

259 
I2C2_EV_IRQn
 = 33,

260 
I2C2_ER_IRQn
 = 34,

261 
SPI1_IRQn
 = 35,

262 
SPI2_IRQn
 = 36,

263 
USART1_IRQn
 = 37,

264 
USART2_IRQn
 = 38,

265 
USART3_IRQn
 = 39,

266 
EXTI15_10_IRQn
 = 40,

267 
RTCAœrm_IRQn
 = 41,

268 
USBWakeUp_IRQn
 = 42

271 #ifde‡
STM32F10X_MD_VL


272 
ADC1_IRQn
 = 18,

273 
EXTI9_5_IRQn
 = 23,

274 
TIM1_BRK_TIM15_IRQn
 = 24,

275 
TIM1_UP_TIM16_IRQn
 = 25,

276 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

277 
TIM1_CC_IRQn
 = 27,

278 
TIM2_IRQn
 = 28,

279 
TIM3_IRQn
 = 29,

280 
TIM4_IRQn
 = 30,

281 
I2C1_EV_IRQn
 = 31,

282 
I2C1_ER_IRQn
 = 32,

283 
I2C2_EV_IRQn
 = 33,

284 
I2C2_ER_IRQn
 = 34,

285 
SPI1_IRQn
 = 35,

286 
SPI2_IRQn
 = 36,

287 
USART1_IRQn
 = 37,

288 
USART2_IRQn
 = 38,

289 
USART3_IRQn
 = 39,

290 
EXTI15_10_IRQn
 = 40,

291 
RTCAœrm_IRQn
 = 41,

292 
CEC_IRQn
 = 42,

293 
TIM6_DAC_IRQn
 = 54,

294 
TIM7_IRQn
 = 55

297 #ifde‡
STM32F10X_HD


298 
ADC1_2_IRQn
 = 18,

299 
USB_HP_CAN1_TX_IRQn
 = 19,

300 
USB_LP_CAN1_RX0_IRQn
 = 20,

301 
CAN1_RX1_IRQn
 = 21,

302 
CAN1_SCE_IRQn
 = 22,

303 
EXTI9_5_IRQn
 = 23,

304 
TIM1_BRK_IRQn
 = 24,

305 
TIM1_UP_IRQn
 = 25,

306 
TIM1_TRG_COM_IRQn
 = 26,

307 
TIM1_CC_IRQn
 = 27,

308 
TIM2_IRQn
 = 28,

309 
TIM3_IRQn
 = 29,

310 
TIM4_IRQn
 = 30,

311 
I2C1_EV_IRQn
 = 31,

312 
I2C1_ER_IRQn
 = 32,

313 
I2C2_EV_IRQn
 = 33,

314 
I2C2_ER_IRQn
 = 34,

315 
SPI1_IRQn
 = 35,

316 
SPI2_IRQn
 = 36,

317 
USART1_IRQn
 = 37,

318 
USART2_IRQn
 = 38,

319 
USART3_IRQn
 = 39,

320 
EXTI15_10_IRQn
 = 40,

321 
RTCAœrm_IRQn
 = 41,

322 
USBWakeUp_IRQn
 = 42,

323 
TIM8_BRK_IRQn
 = 43,

324 
TIM8_UP_IRQn
 = 44,

325 
TIM8_TRG_COM_IRQn
 = 45,

326 
TIM8_CC_IRQn
 = 46,

327 
ADC3_IRQn
 = 47,

328 
FSMC_IRQn
 = 48,

329 
SDIO_IRQn
 = 49,

330 
TIM5_IRQn
 = 50,

331 
SPI3_IRQn
 = 51,

332 
UART4_IRQn
 = 52,

333 
UART5_IRQn
 = 53,

334 
TIM6_IRQn
 = 54,

335 
TIM7_IRQn
 = 55,

336 
DMA2_Ch™√l1_IRQn
 = 56,

337 
DMA2_Ch™√l2_IRQn
 = 57,

338 
DMA2_Ch™√l3_IRQn
 = 58,

339 
DMA2_Ch™√l4_5_IRQn
 = 59

342 #ifde‡
STM32F10X_HD_VL


343 
ADC1_IRQn
 = 18,

344 
EXTI9_5_IRQn
 = 23,

345 
TIM1_BRK_TIM15_IRQn
 = 24,

346 
TIM1_UP_TIM16_IRQn
 = 25,

347 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

348 
TIM1_CC_IRQn
 = 27,

349 
TIM2_IRQn
 = 28,

350 
TIM3_IRQn
 = 29,

351 
TIM4_IRQn
 = 30,

352 
I2C1_EV_IRQn
 = 31,

353 
I2C1_ER_IRQn
 = 32,

354 
I2C2_EV_IRQn
 = 33,

355 
I2C2_ER_IRQn
 = 34,

356 
SPI1_IRQn
 = 35,

357 
SPI2_IRQn
 = 36,

358 
USART1_IRQn
 = 37,

359 
USART2_IRQn
 = 38,

360 
USART3_IRQn
 = 39,

361 
EXTI15_10_IRQn
 = 40,

362 
RTCAœrm_IRQn
 = 41,

363 
CEC_IRQn
 = 42,

364 
TIM12_IRQn
 = 43,

365 
TIM13_IRQn
 = 44,

366 
TIM14_IRQn
 = 45,

367 
TIM5_IRQn
 = 50,

368 
SPI3_IRQn
 = 51,

369 
UART4_IRQn
 = 52,

370 
UART5_IRQn
 = 53,

371 
TIM6_DAC_IRQn
 = 54,

372 
TIM7_IRQn
 = 55,

373 
DMA2_Ch™√l1_IRQn
 = 56,

374 
DMA2_Ch™√l2_IRQn
 = 57,

375 
DMA2_Ch™√l3_IRQn
 = 58,

376 
DMA2_Ch™√l4_5_IRQn
 = 59,

377 
DMA2_Ch™√l5_IRQn
 = 60

382 #ifde‡
STM32F10X_XL


383 
ADC1_2_IRQn
 = 18,

384 
USB_HP_CAN1_TX_IRQn
 = 19,

385 
USB_LP_CAN1_RX0_IRQn
 = 20,

386 
CAN1_RX1_IRQn
 = 21,

387 
CAN1_SCE_IRQn
 = 22,

388 
EXTI9_5_IRQn
 = 23,

389 
TIM1_BRK_TIM9_IRQn
 = 24,

390 
TIM1_UP_TIM10_IRQn
 = 25,

391 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

392 
TIM1_CC_IRQn
 = 27,

393 
TIM2_IRQn
 = 28,

394 
TIM3_IRQn
 = 29,

395 
TIM4_IRQn
 = 30,

396 
I2C1_EV_IRQn
 = 31,

397 
I2C1_ER_IRQn
 = 32,

398 
I2C2_EV_IRQn
 = 33,

399 
I2C2_ER_IRQn
 = 34,

400 
SPI1_IRQn
 = 35,

401 
SPI2_IRQn
 = 36,

402 
USART1_IRQn
 = 37,

403 
USART2_IRQn
 = 38,

404 
USART3_IRQn
 = 39,

405 
EXTI15_10_IRQn
 = 40,

406 
RTCAœrm_IRQn
 = 41,

407 
USBWakeUp_IRQn
 = 42,

408 
TIM8_BRK_TIM12_IRQn
 = 43,

409 
TIM8_UP_TIM13_IRQn
 = 44,

410 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

411 
TIM8_CC_IRQn
 = 46,

412 
ADC3_IRQn
 = 47,

413 
FSMC_IRQn
 = 48,

414 
SDIO_IRQn
 = 49,

415 
TIM5_IRQn
 = 50,

416 
SPI3_IRQn
 = 51,

417 
UART4_IRQn
 = 52,

418 
UART5_IRQn
 = 53,

419 
TIM6_IRQn
 = 54,

420 
TIM7_IRQn
 = 55,

421 
DMA2_Ch™√l1_IRQn
 = 56,

422 
DMA2_Ch™√l2_IRQn
 = 57,

423 
DMA2_Ch™√l3_IRQn
 = 58,

424 
DMA2_Ch™√l4_5_IRQn
 = 59

427 #ifde‡
STM32F10X_CL


428 
ADC1_2_IRQn
 = 18,

429 
CAN1_TX_IRQn
 = 19,

430 
CAN1_RX0_IRQn
 = 20,

431 
CAN1_RX1_IRQn
 = 21,

432 
CAN1_SCE_IRQn
 = 22,

433 
EXTI9_5_IRQn
 = 23,

434 
TIM1_BRK_IRQn
 = 24,

435 
TIM1_UP_IRQn
 = 25,

436 
TIM1_TRG_COM_IRQn
 = 26,

437 
TIM1_CC_IRQn
 = 27,

438 
TIM2_IRQn
 = 28,

439 
TIM3_IRQn
 = 29,

440 
TIM4_IRQn
 = 30,

441 
I2C1_EV_IRQn
 = 31,

442 
I2C1_ER_IRQn
 = 32,

443 
I2C2_EV_IRQn
 = 33,

444 
I2C2_ER_IRQn
 = 34,

445 
SPI1_IRQn
 = 35,

446 
SPI2_IRQn
 = 36,

447 
USART1_IRQn
 = 37,

448 
USART2_IRQn
 = 38,

449 
USART3_IRQn
 = 39,

450 
EXTI15_10_IRQn
 = 40,

451 
RTCAœrm_IRQn
 = 41,

452 
OTG_FS_WKUP_IRQn
 = 42,

453 
TIM5_IRQn
 = 50,

454 
SPI3_IRQn
 = 51,

455 
UART4_IRQn
 = 52,

456 
UART5_IRQn
 = 53,

457 
TIM6_IRQn
 = 54,

458 
TIM7_IRQn
 = 55,

459 
DMA2_Ch™√l1_IRQn
 = 56,

460 
DMA2_Ch™√l2_IRQn
 = 57,

461 
DMA2_Ch™√l3_IRQn
 = 58,

462 
DMA2_Ch™√l4_IRQn
 = 59,

463 
DMA2_Ch™√l5_IRQn
 = 60,

464 
ETH_IRQn
 = 61,

465 
ETH_WKUP_IRQn
 = 62,

466 
CAN2_TX_IRQn
 = 63,

467 
CAN2_RX0_IRQn
 = 64,

468 
CAN2_RX1_IRQn
 = 65,

469 
CAN2_SCE_IRQn
 = 66,

470 
OTG_FS_IRQn
 = 67

472 } 
	tIRQn_Ty≥
;

478 
	~"c‹e_cm3.h
"

479 
	~"sy°em_°m32f10x.h
"

480 
	~<°döt.h
>

487 
öt32_t
 
	ts32
;

488 
öt16_t
 
	ts16
;

489 
öt8_t
 
	ts8
;

491 c⁄° 
	töt32_t
 
	tsc32
;

492 c⁄° 
	töt16_t
 
	tsc16
;

493 c⁄° 
	töt8_t
 
	tsc8
;

495 
__IO
 
	töt32_t
 
	tvs32
;

496 
__IO
 
	töt16_t
 
	tvs16
;

497 
__IO
 
	töt8_t
 
	tvs8
;

499 
__I
 
	töt32_t
 
	tvsc32
;

500 
__I
 
	töt16_t
 
	tvsc16
;

501 
__I
 
	töt8_t
 
	tvsc8
;

503 
uöt32_t
 
	tu32
;

504 
uöt16_t
 
	tu16
;

505 
uöt8_t
 
	tu8
;

507 c⁄° 
	tuöt32_t
 
	tuc32
;

508 c⁄° 
	tuöt16_t
 
	tuc16
;

509 c⁄° 
	tuöt8_t
 
	tuc8
;

511 
__IO
 
	tuöt32_t
 
	tvu32
;

512 
__IO
 
	tuöt16_t
 
	tvu16
;

513 
__IO
 
	tuöt8_t
 
	tvu8
;

515 
__I
 
	tuöt32_t
 
	tvuc32
;

516 
__I
 
	tuöt16_t
 
	tvuc16
;

517 
__I
 
	tuöt8_t
 
	tvuc8
;

519 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

521 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

522 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

524 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

527 
	#HSESèπUp_TimeOut
 
HSE_STARTUP_TIMEOUT


	)

528 
	#HSE_VÆue
 
HSE_VALUE


	)

529 
	#HSI_VÆue
 
HSI_VALUE


	)

544 
__IO
 
uöt32_t
 
SR
;

545 
__IO
 
uöt32_t
 
CR1
;

546 
__IO
 
uöt32_t
 
CR2
;

547 
__IO
 
uöt32_t
 
SMPR1
;

548 
__IO
 
uöt32_t
 
SMPR2
;

549 
__IO
 
uöt32_t
 
JOFR1
;

550 
__IO
 
uöt32_t
 
JOFR2
;

551 
__IO
 
uöt32_t
 
JOFR3
;

552 
__IO
 
uöt32_t
 
JOFR4
;

553 
__IO
 
uöt32_t
 
HTR
;

554 
__IO
 
uöt32_t
 
LTR
;

555 
__IO
 
uöt32_t
 
SQR1
;

556 
__IO
 
uöt32_t
 
SQR2
;

557 
__IO
 
uöt32_t
 
SQR3
;

558 
__IO
 
uöt32_t
 
JSQR
;

559 
__IO
 
uöt32_t
 
JDR1
;

560 
__IO
 
uöt32_t
 
JDR2
;

561 
__IO
 
uöt32_t
 
JDR3
;

562 
__IO
 
uöt32_t
 
JDR4
;

563 
__IO
 
uöt32_t
 
DR
;

564 } 
	tADC_Ty≥Def
;

572 
uöt32_t
 
RESERVED0
;

573 
__IO
 
uöt16_t
 
DR1
;

574 
uöt16_t
 
RESERVED1
;

575 
__IO
 
uöt16_t
 
DR2
;

576 
uöt16_t
 
RESERVED2
;

577 
__IO
 
uöt16_t
 
DR3
;

578 
uöt16_t
 
RESERVED3
;

579 
__IO
 
uöt16_t
 
DR4
;

580 
uöt16_t
 
RESERVED4
;

581 
__IO
 
uöt16_t
 
DR5
;

582 
uöt16_t
 
RESERVED5
;

583 
__IO
 
uöt16_t
 
DR6
;

584 
uöt16_t
 
RESERVED6
;

585 
__IO
 
uöt16_t
 
DR7
;

586 
uöt16_t
 
RESERVED7
;

587 
__IO
 
uöt16_t
 
DR8
;

588 
uöt16_t
 
RESERVED8
;

589 
__IO
 
uöt16_t
 
DR9
;

590 
uöt16_t
 
RESERVED9
;

591 
__IO
 
uöt16_t
 
DR10
;

592 
uöt16_t
 
RESERVED10
;

593 
__IO
 
uöt16_t
 
RTCCR
;

594 
uöt16_t
 
RESERVED11
;

595 
__IO
 
uöt16_t
 
CR
;

596 
uöt16_t
 
RESERVED12
;

597 
__IO
 
uöt16_t
 
CSR
;

598 
uöt16_t
 
RESERVED13
[5];

599 
__IO
 
uöt16_t
 
DR11
;

600 
uöt16_t
 
RESERVED14
;

601 
__IO
 
uöt16_t
 
DR12
;

602 
uöt16_t
 
RESERVED15
;

603 
__IO
 
uöt16_t
 
DR13
;

604 
uöt16_t
 
RESERVED16
;

605 
__IO
 
uöt16_t
 
DR14
;

606 
uöt16_t
 
RESERVED17
;

607 
__IO
 
uöt16_t
 
DR15
;

608 
uöt16_t
 
RESERVED18
;

609 
__IO
 
uöt16_t
 
DR16
;

610 
uöt16_t
 
RESERVED19
;

611 
__IO
 
uöt16_t
 
DR17
;

612 
uöt16_t
 
RESERVED20
;

613 
__IO
 
uöt16_t
 
DR18
;

614 
uöt16_t
 
RESERVED21
;

615 
__IO
 
uöt16_t
 
DR19
;

616 
uöt16_t
 
RESERVED22
;

617 
__IO
 
uöt16_t
 
DR20
;

618 
uöt16_t
 
RESERVED23
;

619 
__IO
 
uöt16_t
 
DR21
;

620 
uöt16_t
 
RESERVED24
;

621 
__IO
 
uöt16_t
 
DR22
;

622 
uöt16_t
 
RESERVED25
;

623 
__IO
 
uöt16_t
 
DR23
;

624 
uöt16_t
 
RESERVED26
;

625 
__IO
 
uöt16_t
 
DR24
;

626 
uöt16_t
 
RESERVED27
;

627 
__IO
 
uöt16_t
 
DR25
;

628 
uöt16_t
 
RESERVED28
;

629 
__IO
 
uöt16_t
 
DR26
;

630 
uöt16_t
 
RESERVED29
;

631 
__IO
 
uöt16_t
 
DR27
;

632 
uöt16_t
 
RESERVED30
;

633 
__IO
 
uöt16_t
 
DR28
;

634 
uöt16_t
 
RESERVED31
;

635 
__IO
 
uöt16_t
 
DR29
;

636 
uöt16_t
 
RESERVED32
;

637 
__IO
 
uöt16_t
 
DR30
;

638 
uöt16_t
 
RESERVED33
;

639 
__IO
 
uöt16_t
 
DR31
;

640 
uöt16_t
 
RESERVED34
;

641 
__IO
 
uöt16_t
 
DR32
;

642 
uöt16_t
 
RESERVED35
;

643 
__IO
 
uöt16_t
 
DR33
;

644 
uöt16_t
 
RESERVED36
;

645 
__IO
 
uöt16_t
 
DR34
;

646 
uöt16_t
 
RESERVED37
;

647 
__IO
 
uöt16_t
 
DR35
;

648 
uöt16_t
 
RESERVED38
;

649 
__IO
 
uöt16_t
 
DR36
;

650 
uöt16_t
 
RESERVED39
;

651 
__IO
 
uöt16_t
 
DR37
;

652 
uöt16_t
 
RESERVED40
;

653 
__IO
 
uöt16_t
 
DR38
;

654 
uöt16_t
 
RESERVED41
;

655 
__IO
 
uöt16_t
 
DR39
;

656 
uöt16_t
 
RESERVED42
;

657 
__IO
 
uöt16_t
 
DR40
;

658 
uöt16_t
 
RESERVED43
;

659 
__IO
 
uöt16_t
 
DR41
;

660 
uöt16_t
 
RESERVED44
;

661 
__IO
 
uöt16_t
 
DR42
;

662 
uöt16_t
 
RESERVED45
;

663 } 
	tBKP_Ty≥Def
;

671 
__IO
 
uöt32_t
 
TIR
;

672 
__IO
 
uöt32_t
 
TDTR
;

673 
__IO
 
uöt32_t
 
TDLR
;

674 
__IO
 
uöt32_t
 
TDHR
;

675 } 
	tCAN_TxMaûBox_Ty≥Def
;

683 
__IO
 
uöt32_t
 
RIR
;

684 
__IO
 
uöt32_t
 
RDTR
;

685 
__IO
 
uöt32_t
 
RDLR
;

686 
__IO
 
uöt32_t
 
RDHR
;

687 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

695 
__IO
 
uöt32_t
 
FR1
;

696 
__IO
 
uöt32_t
 
FR2
;

697 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

705 
__IO
 
uöt32_t
 
MCR
;

706 
__IO
 
uöt32_t
 
MSR
;

707 
__IO
 
uöt32_t
 
TSR
;

708 
__IO
 
uöt32_t
 
RF0R
;

709 
__IO
 
uöt32_t
 
RF1R
;

710 
__IO
 
uöt32_t
 
IER
;

711 
__IO
 
uöt32_t
 
ESR
;

712 
__IO
 
uöt32_t
 
BTR
;

713 
uöt32_t
 
RESERVED0
[88];

714 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

715 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

716 
uöt32_t
 
RESERVED1
[12];

717 
__IO
 
uöt32_t
 
FMR
;

718 
__IO
 
uöt32_t
 
FM1R
;

719 
uöt32_t
 
RESERVED2
;

720 
__IO
 
uöt32_t
 
FS1R
;

721 
uöt32_t
 
RESERVED3
;

722 
__IO
 
uöt32_t
 
FFA1R
;

723 
uöt32_t
 
RESERVED4
;

724 
__IO
 
uöt32_t
 
FA1R
;

725 
uöt32_t
 
RESERVED5
[8];

726 #i‚de‡
STM32F10X_CL


727 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

729 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

731 } 
	tCAN_Ty≥Def
;

738 
__IO
 
uöt32_t
 
CFGR
;

739 
__IO
 
uöt32_t
 
OAR
;

740 
__IO
 
uöt32_t
 
PRES
;

741 
__IO
 
uöt32_t
 
ESR
;

742 
__IO
 
uöt32_t
 
CSR
;

743 
__IO
 
uöt32_t
 
TXD
;

744 
__IO
 
uöt32_t
 
RXD
;

745 } 
	tCEC_Ty≥Def
;

753 
__IO
 
uöt32_t
 
DR
;

754 
__IO
 
uöt8_t
 
IDR
;

755 
uöt8_t
 
RESERVED0
;

756 
uöt16_t
 
RESERVED1
;

757 
__IO
 
uöt32_t
 
CR
;

758 } 
	tCRC_Ty≥Def
;

766 
__IO
 
uöt32_t
 
CR
;

767 
__IO
 
uöt32_t
 
SWTRIGR
;

768 
__IO
 
uöt32_t
 
DHR12R1
;

769 
__IO
 
uöt32_t
 
DHR12L1
;

770 
__IO
 
uöt32_t
 
DHR8R1
;

771 
__IO
 
uöt32_t
 
DHR12R2
;

772 
__IO
 
uöt32_t
 
DHR12L2
;

773 
__IO
 
uöt32_t
 
DHR8R2
;

774 
__IO
 
uöt32_t
 
DHR12RD
;

775 
__IO
 
uöt32_t
 
DHR12LD
;

776 
__IO
 
uöt32_t
 
DHR8RD
;

777 
__IO
 
uöt32_t
 
DOR1
;

778 
__IO
 
uöt32_t
 
DOR2
;

779 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

780 
__IO
 
uöt32_t
 
SR
;

782 } 
	tDAC_Ty≥Def
;

790 
__IO
 
uöt32_t
 
IDCODE
;

791 
__IO
 
uöt32_t
 
CR
;

792 }
	tDBGMCU_Ty≥Def
;

800 
__IO
 
uöt32_t
 
CCR
;

801 
__IO
 
uöt32_t
 
CNDTR
;

802 
__IO
 
uöt32_t
 
CPAR
;

803 
__IO
 
uöt32_t
 
CMAR
;

804 } 
	tDMA_Ch™√l_Ty≥Def
;

808 
__IO
 
uöt32_t
 
ISR
;

809 
__IO
 
uöt32_t
 
IFCR
;

810 } 
	tDMA_Ty≥Def
;

818 
__IO
 
uöt32_t
 
MACCR
;

819 
__IO
 
uöt32_t
 
MACFFR
;

820 
__IO
 
uöt32_t
 
MACHTHR
;

821 
__IO
 
uöt32_t
 
MACHTLR
;

822 
__IO
 
uöt32_t
 
MACMIIAR
;

823 
__IO
 
uöt32_t
 
MACMIIDR
;

824 
__IO
 
uöt32_t
 
MACFCR
;

825 
__IO
 
uöt32_t
 
MACVLANTR
;

826 
uöt32_t
 
RESERVED0
[2];

827 
__IO
 
uöt32_t
 
MACRWUFFR
;

828 
__IO
 
uöt32_t
 
MACPMTCSR
;

829 
uöt32_t
 
RESERVED1
[2];

830 
__IO
 
uöt32_t
 
MACSR
;

831 
__IO
 
uöt32_t
 
MACIMR
;

832 
__IO
 
uöt32_t
 
MACA0HR
;

833 
__IO
 
uöt32_t
 
MACA0LR
;

834 
__IO
 
uöt32_t
 
MACA1HR
;

835 
__IO
 
uöt32_t
 
MACA1LR
;

836 
__IO
 
uöt32_t
 
MACA2HR
;

837 
__IO
 
uöt32_t
 
MACA2LR
;

838 
__IO
 
uöt32_t
 
MACA3HR
;

839 
__IO
 
uöt32_t
 
MACA3LR
;

840 
uöt32_t
 
RESERVED2
[40];

841 
__IO
 
uöt32_t
 
MMCCR
;

842 
__IO
 
uöt32_t
 
MMCRIR
;

843 
__IO
 
uöt32_t
 
MMCTIR
;

844 
__IO
 
uöt32_t
 
MMCRIMR
;

845 
__IO
 
uöt32_t
 
MMCTIMR
;

846 
uöt32_t
 
RESERVED3
[14];

847 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

848 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

849 
uöt32_t
 
RESERVED4
[5];

850 
__IO
 
uöt32_t
 
MMCTGFCR
;

851 
uöt32_t
 
RESERVED5
[10];

852 
__IO
 
uöt32_t
 
MMCRFCECR
;

853 
__IO
 
uöt32_t
 
MMCRFAECR
;

854 
uöt32_t
 
RESERVED6
[10];

855 
__IO
 
uöt32_t
 
MMCRGUFCR
;

856 
uöt32_t
 
RESERVED7
[334];

857 
__IO
 
uöt32_t
 
PTPTSCR
;

858 
__IO
 
uöt32_t
 
PTPSSIR
;

859 
__IO
 
uöt32_t
 
PTPTSHR
;

860 
__IO
 
uöt32_t
 
PTPTSLR
;

861 
__IO
 
uöt32_t
 
PTPTSHUR
;

862 
__IO
 
uöt32_t
 
PTPTSLUR
;

863 
__IO
 
uöt32_t
 
PTPTSAR
;

864 
__IO
 
uöt32_t
 
PTPTTHR
;

865 
__IO
 
uöt32_t
 
PTPTTLR
;

866 
uöt32_t
 
RESERVED8
[567];

867 
__IO
 
uöt32_t
 
DMABMR
;

868 
__IO
 
uöt32_t
 
DMATPDR
;

869 
__IO
 
uöt32_t
 
DMARPDR
;

870 
__IO
 
uöt32_t
 
DMARDLAR
;

871 
__IO
 
uöt32_t
 
DMATDLAR
;

872 
__IO
 
uöt32_t
 
DMASR
;

873 
__IO
 
uöt32_t
 
DMAOMR
;

874 
__IO
 
uöt32_t
 
DMAIER
;

875 
__IO
 
uöt32_t
 
DMAMFBOCR
;

876 
uöt32_t
 
RESERVED9
[9];

877 
__IO
 
uöt32_t
 
DMACHTDR
;

878 
__IO
 
uöt32_t
 
DMACHRDR
;

879 
__IO
 
uöt32_t
 
DMACHTBAR
;

880 
__IO
 
uöt32_t
 
DMACHRBAR
;

881 } 
	tETH_Ty≥Def
;

889 
__IO
 
uöt32_t
 
IMR
;

890 
__IO
 
uöt32_t
 
EMR
;

891 
__IO
 
uöt32_t
 
RTSR
;

892 
__IO
 
uöt32_t
 
FTSR
;

893 
__IO
 
uöt32_t
 
SWIER
;

894 
__IO
 
uöt32_t
 
PR
;

895 } 
	tEXTI_Ty≥Def
;

903 
__IO
 
uöt32_t
 
ACR
;

904 
__IO
 
uöt32_t
 
KEYR
;

905 
__IO
 
uöt32_t
 
OPTKEYR
;

906 
__IO
 
uöt32_t
 
SR
;

907 
__IO
 
uöt32_t
 
CR
;

908 
__IO
 
uöt32_t
 
AR
;

909 
__IO
 
uöt32_t
 
RESERVED
;

910 
__IO
 
uöt32_t
 
OBR
;

911 
__IO
 
uöt32_t
 
WRPR
;

912 #ifde‡
STM32F10X_XL


913 
uöt32_t
 
RESERVED1
[8];

914 
__IO
 
uöt32_t
 
KEYR2
;

915 
uöt32_t
 
RESERVED2
;

916 
__IO
 
uöt32_t
 
SR2
;

917 
__IO
 
uöt32_t
 
CR2
;

918 
__IO
 
uöt32_t
 
AR2
;

920 } 
	tFLASH_Ty≥Def
;

928 
__IO
 
uöt16_t
 
RDP
;

929 
__IO
 
uöt16_t
 
USER
;

930 
__IO
 
uöt16_t
 
D©a0
;

931 
__IO
 
uöt16_t
 
D©a1
;

932 
__IO
 
uöt16_t
 
WRP0
;

933 
__IO
 
uöt16_t
 
WRP1
;

934 
__IO
 
uöt16_t
 
WRP2
;

935 
__IO
 
uöt16_t
 
WRP3
;

936 } 
	tOB_Ty≥Def
;

944 
__IO
 
uöt32_t
 
BTCR
[8];

945 } 
	tFSMC_B™k1_Ty≥Def
;

953 
__IO
 
uöt32_t
 
BWTR
[7];

954 } 
	tFSMC_B™k1E_Ty≥Def
;

962 
__IO
 
uöt32_t
 
PCR2
;

963 
__IO
 
uöt32_t
 
SR2
;

964 
__IO
 
uöt32_t
 
PMEM2
;

965 
__IO
 
uöt32_t
 
PATT2
;

966 
uöt32_t
 
RESERVED0
;

967 
__IO
 
uöt32_t
 
ECCR2
;

968 } 
	tFSMC_B™k2_Ty≥Def
;

976 
__IO
 
uöt32_t
 
PCR3
;

977 
__IO
 
uöt32_t
 
SR3
;

978 
__IO
 
uöt32_t
 
PMEM3
;

979 
__IO
 
uöt32_t
 
PATT3
;

980 
uöt32_t
 
RESERVED0
;

981 
__IO
 
uöt32_t
 
ECCR3
;

982 } 
	tFSMC_B™k3_Ty≥Def
;

990 
__IO
 
uöt32_t
 
PCR4
;

991 
__IO
 
uöt32_t
 
SR4
;

992 
__IO
 
uöt32_t
 
PMEM4
;

993 
__IO
 
uöt32_t
 
PATT4
;

994 
__IO
 
uöt32_t
 
PIO4
;

995 } 
	tFSMC_B™k4_Ty≥Def
;

1003 
__IO
 
uöt32_t
 
CRL
;

1004 
__IO
 
uöt32_t
 
CRH
;

1005 
__IO
 
uöt32_t
 
IDR
;

1006 
__IO
 
uöt32_t
 
ODR
;

1007 
__IO
 
uöt32_t
 
BSRR
;

1008 
__IO
 
uöt32_t
 
BRR
;

1009 
__IO
 
uöt32_t
 
LCKR
;

1010 } 
	tGPIO_Ty≥Def
;

1018 
__IO
 
uöt32_t
 
EVCR
;

1019 
__IO
 
uöt32_t
 
MAPR
;

1020 
__IO
 
uöt32_t
 
EXTICR
[4];

1021 
uöt32_t
 
RESERVED0
;

1022 
__IO
 
uöt32_t
 
MAPR2
;

1023 } 
	tAFIO_Ty≥Def
;

1030 
__IO
 
uöt16_t
 
CR1
;

1031 
uöt16_t
 
RESERVED0
;

1032 
__IO
 
uöt16_t
 
CR2
;

1033 
uöt16_t
 
RESERVED1
;

1034 
__IO
 
uöt16_t
 
OAR1
;

1035 
uöt16_t
 
RESERVED2
;

1036 
__IO
 
uöt16_t
 
OAR2
;

1037 
uöt16_t
 
RESERVED3
;

1038 
__IO
 
uöt16_t
 
DR
;

1039 
uöt16_t
 
RESERVED4
;

1040 
__IO
 
uöt16_t
 
SR1
;

1041 
uöt16_t
 
RESERVED5
;

1042 
__IO
 
uöt16_t
 
SR2
;

1043 
uöt16_t
 
RESERVED6
;

1044 
__IO
 
uöt16_t
 
CCR
;

1045 
uöt16_t
 
RESERVED7
;

1046 
__IO
 
uöt16_t
 
TRISE
;

1047 
uöt16_t
 
RESERVED8
;

1048 } 
	tI2C_Ty≥Def
;

1056 
__IO
 
uöt32_t
 
KR
;

1057 
__IO
 
uöt32_t
 
PR
;

1058 
__IO
 
uöt32_t
 
RLR
;

1059 
__IO
 
uöt32_t
 
SR
;

1060 } 
	tIWDG_Ty≥Def
;

1068 
__IO
 
uöt32_t
 
CR
;

1069 
__IO
 
uöt32_t
 
CSR
;

1070 } 
	tPWR_Ty≥Def
;

1078 
__IO
 
uöt32_t
 
CR
;

1079 
__IO
 
uöt32_t
 
CFGR
;

1080 
__IO
 
uöt32_t
 
CIR
;

1081 
__IO
 
uöt32_t
 
APB2RSTR
;

1082 
__IO
 
uöt32_t
 
APB1RSTR
;

1083 
__IO
 
uöt32_t
 
AHBENR
;

1084 
__IO
 
uöt32_t
 
APB2ENR
;

1085 
__IO
 
uöt32_t
 
APB1ENR
;

1086 
__IO
 
uöt32_t
 
BDCR
;

1087 
__IO
 
uöt32_t
 
CSR
;

1089 #ifde‡
STM32F10X_CL


1090 
__IO
 
uöt32_t
 
AHBRSTR
;

1091 
__IO
 
uöt32_t
 
CFGR2
;

1094 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1095 
uöt32_t
 
RESERVED0
;

1096 
__IO
 
uöt32_t
 
CFGR2
;

1098 } 
	tRCC_Ty≥Def
;

1106 
__IO
 
uöt16_t
 
CRH
;

1107 
uöt16_t
 
RESERVED0
;

1108 
__IO
 
uöt16_t
 
CRL
;

1109 
uöt16_t
 
RESERVED1
;

1110 
__IO
 
uöt16_t
 
PRLH
;

1111 
uöt16_t
 
RESERVED2
;

1112 
__IO
 
uöt16_t
 
PRLL
;

1113 
uöt16_t
 
RESERVED3
;

1114 
__IO
 
uöt16_t
 
DIVH
;

1115 
uöt16_t
 
RESERVED4
;

1116 
__IO
 
uöt16_t
 
DIVL
;

1117 
uöt16_t
 
RESERVED5
;

1118 
__IO
 
uöt16_t
 
CNTH
;

1119 
uöt16_t
 
RESERVED6
;

1120 
__IO
 
uöt16_t
 
CNTL
;

1121 
uöt16_t
 
RESERVED7
;

1122 
__IO
 
uöt16_t
 
ALRH
;

1123 
uöt16_t
 
RESERVED8
;

1124 
__IO
 
uöt16_t
 
ALRL
;

1125 
uöt16_t
 
RESERVED9
;

1126 } 
	tRTC_Ty≥Def
;

1134 
__IO
 
uöt32_t
 
POWER
;

1135 
__IO
 
uöt32_t
 
CLKCR
;

1136 
__IO
 
uöt32_t
 
ARG
;

1137 
__IO
 
uöt32_t
 
CMD
;

1138 
__I
 
uöt32_t
 
RESPCMD
;

1139 
__I
 
uöt32_t
 
RESP1
;

1140 
__I
 
uöt32_t
 
RESP2
;

1141 
__I
 
uöt32_t
 
RESP3
;

1142 
__I
 
uöt32_t
 
RESP4
;

1143 
__IO
 
uöt32_t
 
DTIMER
;

1144 
__IO
 
uöt32_t
 
DLEN
;

1145 
__IO
 
uöt32_t
 
DCTRL
;

1146 
__I
 
uöt32_t
 
DCOUNT
;

1147 
__I
 
uöt32_t
 
STA
;

1148 
__IO
 
uöt32_t
 
ICR
;

1149 
__IO
 
uöt32_t
 
MASK
;

1150 
uöt32_t
 
RESERVED0
[2];

1151 
__I
 
uöt32_t
 
FIFOCNT
;

1152 
uöt32_t
 
RESERVED1
[13];

1153 
__IO
 
uöt32_t
 
FIFO
;

1154 } 
	tSDIO_Ty≥Def
;

1162 
__IO
 
uöt16_t
 
CR1
;

1163 
uöt16_t
 
RESERVED0
;

1164 
__IO
 
uöt16_t
 
CR2
;

1165 
uöt16_t
 
RESERVED1
;

1166 
__IO
 
uöt16_t
 
SR
;

1167 
uöt16_t
 
RESERVED2
;

1168 
__IO
 
uöt16_t
 
DR
;

1169 
uöt16_t
 
RESERVED3
;

1170 
__IO
 
uöt16_t
 
CRCPR
;

1171 
uöt16_t
 
RESERVED4
;

1172 
__IO
 
uöt16_t
 
RXCRCR
;

1173 
uöt16_t
 
RESERVED5
;

1174 
__IO
 
uöt16_t
 
TXCRCR
;

1175 
uöt16_t
 
RESERVED6
;

1176 
__IO
 
uöt16_t
 
I2SCFGR
;

1177 
uöt16_t
 
RESERVED7
;

1178 
__IO
 
uöt16_t
 
I2SPR
;

1179 
uöt16_t
 
RESERVED8
;

1180 } 
	tSPI_Ty≥Def
;

1188 
__IO
 
uöt16_t
 
CR1
;

1189 
uöt16_t
 
RESERVED0
;

1190 
__IO
 
uöt16_t
 
CR2
;

1191 
uöt16_t
 
RESERVED1
;

1192 
__IO
 
uöt16_t
 
SMCR
;

1193 
uöt16_t
 
RESERVED2
;

1194 
__IO
 
uöt16_t
 
DIER
;

1195 
uöt16_t
 
RESERVED3
;

1196 
__IO
 
uöt16_t
 
SR
;

1197 
uöt16_t
 
RESERVED4
;

1198 
__IO
 
uöt16_t
 
EGR
;

1199 
uöt16_t
 
RESERVED5
;

1200 
__IO
 
uöt16_t
 
CCMR1
;

1201 
uöt16_t
 
RESERVED6
;

1202 
__IO
 
uöt16_t
 
CCMR2
;

1203 
uöt16_t
 
RESERVED7
;

1204 
__IO
 
uöt16_t
 
CCER
;

1205 
uöt16_t
 
RESERVED8
;

1206 
__IO
 
uöt16_t
 
CNT
;

1207 
uöt16_t
 
RESERVED9
;

1208 
__IO
 
uöt16_t
 
PSC
;

1209 
uöt16_t
 
RESERVED10
;

1210 
__IO
 
uöt16_t
 
ARR
;

1211 
uöt16_t
 
RESERVED11
;

1212 
__IO
 
uöt16_t
 
RCR
;

1213 
uöt16_t
 
RESERVED12
;

1214 
__IO
 
uöt16_t
 
CCR1
;

1215 
uöt16_t
 
RESERVED13
;

1216 
__IO
 
uöt16_t
 
CCR2
;

1217 
uöt16_t
 
RESERVED14
;

1218 
__IO
 
uöt16_t
 
CCR3
;

1219 
uöt16_t
 
RESERVED15
;

1220 
__IO
 
uöt16_t
 
CCR4
;

1221 
uöt16_t
 
RESERVED16
;

1222 
__IO
 
uöt16_t
 
BDTR
;

1223 
uöt16_t
 
RESERVED17
;

1224 
__IO
 
uöt16_t
 
DCR
;

1225 
uöt16_t
 
RESERVED18
;

1226 
__IO
 
uöt16_t
 
DMAR
;

1227 
uöt16_t
 
RESERVED19
;

1228 } 
	tTIM_Ty≥Def
;

1236 
__IO
 
uöt16_t
 
SR
;

1237 
uöt16_t
 
RESERVED0
;

1238 
__IO
 
uöt16_t
 
DR
;

1239 
uöt16_t
 
RESERVED1
;

1240 
__IO
 
uöt16_t
 
BRR
;

1241 
uöt16_t
 
RESERVED2
;

1242 
__IO
 
uöt16_t
 
CR1
;

1243 
uöt16_t
 
RESERVED3
;

1244 
__IO
 
uöt16_t
 
CR2
;

1245 
uöt16_t
 
RESERVED4
;

1246 
__IO
 
uöt16_t
 
CR3
;

1247 
uöt16_t
 
RESERVED5
;

1248 
__IO
 
uöt16_t
 
GTPR
;

1249 
uöt16_t
 
RESERVED6
;

1250 } 
	tUSART_Ty≥Def
;

1258 
__IO
 
uöt32_t
 
CR
;

1259 
__IO
 
uöt32_t
 
CFR
;

1260 
__IO
 
uöt32_t
 
SR
;

1261 } 
	tWWDG_Ty≥Def
;

1272 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1273 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1274 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1276 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1277 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1279 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1282 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1283 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

1284 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

1286 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1287 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1288 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1289 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1290 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1291 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1292 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1293 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1294 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1295 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1296 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1297 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1298 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1299 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1300 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1301 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1302 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1303 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1304 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1305 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1306 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1307 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1308 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1309 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1310 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1311 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1313 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1314 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1315 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

1316 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

1317 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1318 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1319 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

1320 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

1321 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1322 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

1323 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

1324 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1325 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1326 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1327 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1328 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1329 
	#TIM15_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1330 
	#TIM16_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1331 
	#TIM17_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1332 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4C00)

	)

1333 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1334 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1336 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

1338 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

1339 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

1340 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

1341 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

1342 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

1343 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

1344 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

1345 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

1346 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

1347 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

1348 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

1349 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

1350 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

1351 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

1352 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

1353 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

1355 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

1356 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

1358 
	#ETH_BASE
 (
AHBPERIPH_BASE
 + 0x8000)

	)

1359 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1360 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1361 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1362 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1364 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

1365 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

1366 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

1367 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

1368 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

1370 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

1380 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1381 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1382 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1383 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1384 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1385 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1386 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1387 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1388 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1389 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1390 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1391 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1392 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1393 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1394 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1395 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1396 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1397 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1398 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1399 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1400 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1401 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1402 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

1403 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1404 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1405 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

1406 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

1407 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1408 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1409 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1410 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1411 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1412 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1413 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1414 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1415 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1416 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1417 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1418 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1419 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1420 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1421 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1422 
	#TIM15
 ((
TIM_Ty≥Def
 *Ë
TIM15_BASE
)

	)

1423 
	#TIM16
 ((
TIM_Ty≥Def
 *Ë
TIM16_BASE
)

	)

1424 
	#TIM17
 ((
TIM_Ty≥Def
 *Ë
TIM17_BASE
)

	)

1425 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1426 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1427 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1428 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1429 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1430 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1431 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1432 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1433 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1434 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1435 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1436 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1437 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1438 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1439 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1440 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1441 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1442 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1443 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1444 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1445 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1446 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1447 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1448 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1449 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1450 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1451 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1452 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1453 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1478 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1482 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1486 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1495 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1496 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1497 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1498 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1499 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1501 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1502 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1503 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1504 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1507 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1508 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1509 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1510 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1511 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1512 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1513 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1514 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1516 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1520 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1521 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1522 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1523 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1532 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1535 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1538 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1541 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1544 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1547 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1550 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1553 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1556 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1559 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1562 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1565 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1568 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1571 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1574 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1577 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1580 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1583 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1586 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1589 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1592 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1595 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1598 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1601 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1604 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1607 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1610 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1613 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1616 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1619 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1622 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1625 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1628 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1631 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1634 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1637 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1640 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1643 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1646 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1649 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1652 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1655 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1658 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1659 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1660 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1661 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1664 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1665 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1668 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1669 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1670 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1671 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1672 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1681 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1682 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1683 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1684 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1685 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1686 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1687 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1688 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1689 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1690 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1692 #ifde‡
STM32F10X_CL


1693 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1694 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1695 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1696 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1701 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1702 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1703 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1705 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1706 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1707 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1710 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1711 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1712 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1714 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1715 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1716 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1719 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1720 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1721 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1722 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1723 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1725 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1726 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1727 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1728 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1729 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1730 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1731 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1732 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1733 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1736 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1737 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1738 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1739 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1741 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1742 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1743 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1744 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1745 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1748 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1749 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1750 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1751 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1753 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1754 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1755 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1756 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1757 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1760 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1761 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1762 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1764 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1765 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1766 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1767 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1769 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1771 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1774 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1775 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1776 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1777 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1778 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1780 #ifde‡
STM32F10X_CL


1781 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1782 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1784 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1785 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1787 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1788 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1789 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1790 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1791 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1792 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1793 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1795 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1798 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1799 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1800 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1801 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1802 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1804 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1805 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1806 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1807 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1808 
	#RCC_CFGR_MCO_PLLCLK_Div2
 ((
uöt32_t
)0x07000000Ë

	)

1809 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1810 
	#RCC_CFGR_MCO_PLL3CLK_Div2
 ((
uöt32_t
)0x09000000Ë

	)

1811 
	#RCC_CFGR_MCO_Ext_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1812 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1813 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1814 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1815 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1817 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1818 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1820 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1821 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1822 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1823 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1824 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1825 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1826 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1827 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1828 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1829 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1830 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1831 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1832 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1833 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1834 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1837 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1838 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1839 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1840 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1842 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1843 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1844 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1845 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1846 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1848 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1849 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

1851 
	#RCC_CFGR_PLLXTPRE_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1852 
	#RCC_CFGR_PLLXTPRE_HSE_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1854 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1855 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1856 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1857 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1858 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1859 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1860 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1861 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1862 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1863 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1864 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1865 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1866 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1867 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1868 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1869 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1872 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1873 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1874 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1875 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1877 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1878 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1879 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1880 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1881 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1885 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1886 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1887 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1888 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1889 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1890 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1891 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1892 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1893 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1894 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1895 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1896 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1897 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1898 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1899 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1900 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1901 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1903 #ifde‡
STM32F10X_CL


1904 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1905 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1906 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1907 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1908 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1909 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1913 
	#RCC_APB2RSTR_AFIORST
 ((
uöt32_t
)0x00000001Ë

	)

1914 
	#RCC_APB2RSTR_IOPARST
 ((
uöt32_t
)0x00000004Ë

	)

1915 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt32_t
)0x00000008Ë

	)

1916 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt32_t
)0x00000010Ë

	)

1917 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt32_t
)0x00000020Ë

	)

1918 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

1920 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

1921 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt32_t
)0x00000400Ë

	)

1924 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000800Ë

	)

1925 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

1926 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

1928 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1929 
	#RCC_APB2RSTR_TIM15RST
 ((
uöt32_t
)0x00010000Ë

	)

1930 
	#RCC_APB2RSTR_TIM16RST
 ((
uöt32_t
)0x00020000Ë

	)

1931 
	#RCC_APB2RSTR_TIM17RST
 ((
uöt32_t
)0x00040000Ë

	)

1934 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1935 
	#RCC_APB2RSTR_IOPERST
 ((
uöt32_t
)0x00000040Ë

	)

1938 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1939 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1940 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1941 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00002000Ë

	)

1942 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt32_t
)0x00008000Ë

	)

1945 #i‡
deföed
 (
STM32F10X_HD_VL
)

1946 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1947 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1950 #ifde‡
STM32F10X_XL


1951 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00080000Ë

	)

1952 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00100000Ë

	)

1953 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00200000Ë

	)

1957 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1958 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1959 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1960 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1961 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1963 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

1964 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1967 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1968 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1970 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1971 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1972 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1973 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1974 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1977 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
Ë|| deföed (
STM32F10X_XL
)

1978 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1981 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_XL
)

1982 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1983 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1984 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1985 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1986 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1987 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1988 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1991 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1992 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1993 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1994 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1995 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x40000000Ë

	)

1998 #i‡
deföed
 (
STM32F10X_HD_VL
)

1999 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

2000 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

2001 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

2002 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

2003 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

2004 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

2005 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

2008 #ifde‡
STM32F10X_CL


2009 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000Ë

	)

2012 #ifde‡
STM32F10X_XL


2013 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

2014 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

2015 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

2019 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

2020 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

2021 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

2022 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

2024 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_HD_VL
)

2025 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

2028 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

2029 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

2030 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

2033 #i‡
deföed
 (
STM32F10X_HD_VL
)

2034 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

2037 #ifde‡
STM32F10X_CL


2038 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

2039 
	#RCC_AHBENR_ETHMACEN
 ((
uöt32_t
)0x00004000Ë

	)

2040 
	#RCC_AHBENR_ETHMACTXEN
 ((
uöt32_t
)0x00008000Ë

	)

2041 
	#RCC_AHBENR_ETHMACRXEN
 ((
uöt32_t
)0x00010000Ë

	)

2045 
	#RCC_APB2ENR_AFIOEN
 ((
uöt32_t
)0x00000001Ë

	)

2046 
	#RCC_APB2ENR_IOPAEN
 ((
uöt32_t
)0x00000004Ë

	)

2047 
	#RCC_APB2ENR_IOPBEN
 ((
uöt32_t
)0x00000008Ë

	)

2048 
	#RCC_APB2ENR_IOPCEN
 ((
uöt32_t
)0x00000010Ë

	)

2049 
	#RCC_APB2ENR_IOPDEN
 ((
uöt32_t
)0x00000020Ë

	)

2050 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

2052 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

2053 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000400Ë

	)

2056 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

2057 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

2058 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

2060 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2061 
	#RCC_APB2ENR_TIM15EN
 ((
uöt32_t
)0x00010000Ë

	)

2062 
	#RCC_APB2ENR_TIM16EN
 ((
uöt32_t
)0x00020000Ë

	)

2063 
	#RCC_APB2ENR_TIM17EN
 ((
uöt32_t
)0x00040000Ë

	)

2066 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2067 
	#RCC_APB2ENR_IOPEEN
 ((
uöt32_t
)0x00000040Ë

	)

2070 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

2071 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

2072 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

2073 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00002000Ë

	)

2074 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00008000Ë

	)

2077 #i‡
deföed
 (
STM32F10X_HD_VL
)

2078 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

2079 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

2082 #ifde‡
STM32F10X_XL


2083 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00080000Ë

	)

2084 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00100000Ë

	)

2085 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00200000Ë

	)

2089 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

2090 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

2091 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

2092 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

2093 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

2095 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

2096 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

2099 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

2100 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

2102 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2103 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

2104 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

2105 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

2106 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

2109 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

2110 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

2113 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

2114 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2115 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2116 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2117 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2118 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2119 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2120 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2123 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2124 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2125 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2126 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2127 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x40000000Ë

	)

2130 #ifde‡
STM32F10X_HD_VL


2131 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2132 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2133 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2134 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2135 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2136 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2137 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2140 #ifde‡
STM32F10X_CL


2141 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000Ë

	)

2144 #ifde‡
STM32F10X_XL


2145 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2146 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2147 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2151 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

2152 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

2153 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

2155 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

2156 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

2157 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

2160 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

2161 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

2162 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

2163 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

2165 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

2166 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

2169 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

2170 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

2171 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

2172 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

2173 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

2174 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

2175 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

2176 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

2177 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

2179 #ifde‡
STM32F10X_CL


2181 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

2182 
	#RCC_AHBRSTR_ETHMACRST
 ((
uöt32_t
)0x00004000Ë

	)

2186 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2187 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2188 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2189 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2190 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2192 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2193 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2194 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2195 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2196 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2197 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2198 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2199 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2200 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2201 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2202 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2203 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2204 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2205 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2206 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2207 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2210 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

2211 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

2212 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

2213 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

2214 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

2216 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2217 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

2218 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

2219 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

2220 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

2221 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

2222 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

2223 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

2224 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

2225 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

2226 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

2227 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

2228 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

2229 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

2230 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

2231 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

2234 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

2235 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

2236 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

2237 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

2238 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

2240 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

2241 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

2242 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

2243 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

2244 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

2245 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

2246 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

2247 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

2248 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

2251 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

2252 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

2253 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

2254 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

2255 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

2257 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

2258 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

2259 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

2260 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

2261 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

2262 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

2263 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

2264 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

2265 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

2267 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

2268 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

2269 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

2270 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

2271 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

2274 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2277 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2278 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2279 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2280 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2281 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2283 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2284 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2285 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2286 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2287 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2288 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2289 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2290 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2291 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2292 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2293 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2294 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2295 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2296 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2297 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2298 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2308 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2310 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

2311 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

2312 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

2314 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

2315 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

2316 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

2318 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

2319 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

2320 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

2322 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

2323 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

2324 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

2326 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

2327 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

2328 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

2330 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

2331 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

2332 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

2334 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

2335 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

2336 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

2338 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

2339 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

2340 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

2342 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2344 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

2345 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

2346 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

2348 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

2349 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

2350 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

2352 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

2353 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

2354 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

2356 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

2357 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

2358 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

2360 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

2361 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

2362 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

2364 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

2365 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

2366 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

2368 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

2369 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

2370 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

2372 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

2373 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

2374 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

2377 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2379 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

2380 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

2381 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

2383 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

2384 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

2385 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

2387 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

2388 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

2389 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

2391 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

2392 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

2393 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

2395 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

2396 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

2397 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

2399 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

2400 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

2401 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

2403 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

2404 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

2405 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

2407 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

2408 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

2409 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

2411 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2413 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

2414 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

2415 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

2417 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

2418 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

2419 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

2421 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

2422 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

2423 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

2425 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

2426 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

2427 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

2429 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

2430 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

2431 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

2433 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

2434 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

2435 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

2437 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

2438 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

2439 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

2441 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

2442 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

2443 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

2446 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

2447 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

2448 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

2449 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

2450 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

2451 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

2452 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

2453 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

2454 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

2455 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

2456 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

2457 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

2458 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

2459 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

2460 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

2461 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

2464 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

2465 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

2466 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

2467 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

2468 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

2469 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

2470 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

2471 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

2472 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

2473 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

2474 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

2475 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

2476 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

2477 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

2478 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

2479 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

2482 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

2483 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

2484 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

2485 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

2486 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

2487 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

2488 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

2489 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

2490 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

2491 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

2492 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

2493 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

2494 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

2495 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

2496 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

2497 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

2499 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

2500 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

2501 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

2502 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

2503 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

2504 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

2505 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

2506 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

2507 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

2508 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

2509 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

2510 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

2511 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

2512 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

2513 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

2514 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

2517 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

2518 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

2519 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

2520 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

2521 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

2522 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

2523 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

2524 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

2525 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

2526 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

2527 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

2528 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

2529 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

2530 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

2531 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

2532 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

2535 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

2536 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

2537 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

2538 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

2539 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

2540 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

2541 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

2542 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

2543 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

2544 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

2545 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

2546 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

2547 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

2548 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

2549 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

2550 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

2551 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

2556 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

2557 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

2558 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

2559 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

2560 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

2563 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

2564 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

2565 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

2566 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

2567 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

2568 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

2569 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

2570 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

2571 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

2572 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

2573 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

2574 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

2575 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

2576 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

2577 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

2578 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

2580 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

2581 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

2582 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

2583 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

2586 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

2587 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

2588 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

2589 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

2590 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

2592 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

2595 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2596 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2597 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2598 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2600 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

2601 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

2602 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

2605 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2606 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

2607 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

2609 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2610 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

2611 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

2614 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2615 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

2616 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2618 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

2619 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

2620 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

2623 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2624 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

2625 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

2626 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

2628 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2629 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

2630 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

2633 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2634 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

2635 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2637 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2639 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

2640 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

2641 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

2644 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

2645 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

2646 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

2648 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

2649 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

2650 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

2651 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

2652 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

2653 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

2656 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

2657 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

2658 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

2659 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

2661 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

2662 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

2663 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

2664 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

2666 #ifde‡
STM32F10X_CL


2668 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

2671 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

2674 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

2677 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

2680 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

2683 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x40000000Ë

	)

2687 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

2688 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

2689 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

2690 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

2693 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

2694 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

2695 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

2696 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

2697 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

2698 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

2699 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

2702 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

2703 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

2704 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

2705 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

2706 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

2707 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

2708 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

2711 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

2712 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

2713 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

2714 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

2715 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

2716 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

2717 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

2720 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

2721 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

2722 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

2723 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

2724 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

2725 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

2726 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

2729 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

2730 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

2731 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

2732 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

2735 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

2736 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

2737 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

2738 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

2739 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

2740 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

2741 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

2744 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

2745 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

2746 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

2747 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

2748 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

2749 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

2750 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

2753 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

2754 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

2755 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

2756 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

2757 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

2758 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

2759 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

2762 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

2763 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

2764 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

2765 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

2766 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

2767 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

2768 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

2771 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

2772 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

2773 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

2774 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

2777 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

2778 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

2779 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

2780 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

2781 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

2782 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

2783 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

2786 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

2787 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

2788 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

2789 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

2790 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

2791 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

2792 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

2795 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

2796 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

2797 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

2798 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

2799 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

2800 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

2801 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

2804 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

2805 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

2806 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

2807 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

2808 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

2809 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

2810 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2813 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2814 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2815 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2816 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2819 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2820 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2821 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2822 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2823 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2824 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2825 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2828 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2829 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2830 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2831 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2832 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2833 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2834 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2837 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2838 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2839 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2840 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2841 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2842 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2843 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2846 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2847 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2848 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2849 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2850 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2851 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2852 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2854 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2856 
	#AFIO_MAPR2_TIM15_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2857 
	#AFIO_MAPR2_TIM16_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2858 
	#AFIO_MAPR2_TIM17_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2859 
	#AFIO_MAPR2_CEC_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2860 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 ((
uöt32_t
)0x00000010Ë

	)

2863 #ifde‡
STM32F10X_HD_VL


2864 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2865 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2866 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2867 
	#AFIO_MAPR2_TIM67_DAC_DMA_REMAP
 ((
uöt32_t
)0x00000800Ë

	)

2868 
	#AFIO_MAPR2_TIM12_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2869 
	#AFIO_MAPR2_MISC_REMAP
 ((
uöt32_t
)0x00002000Ë

	)

2872 #ifde‡
STM32F10X_XL


2874 
	#AFIO_MAPR2_TIM9_REMAP
 ((
uöt32_t
)0x00000020Ë

	)

2875 
	#AFIO_MAPR2_TIM10_REMAP
 ((
uöt32_t
)0x00000040Ë

	)

2876 
	#AFIO_MAPR2_TIM11_REMAP
 ((
uöt32_t
)0x00000080Ë

	)

2877 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2878 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2879 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2889 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2890 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2891 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2892 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2895 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2898 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2901 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2902 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2903 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2912 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2913 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2914 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2915 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2916 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2917 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2918 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2919 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2920 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2921 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2922 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2923 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2924 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2925 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2926 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2927 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2928 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2929 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2930 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2931 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2932 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2933 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2934 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2935 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2936 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2937 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2938 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2939 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2940 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2941 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2942 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2943 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2944 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2947 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2948 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2949 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2950 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2951 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2952 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2953 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2954 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2955 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2956 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2957 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2958 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2959 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2960 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2961 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2962 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2963 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2964 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2965 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2966 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2967 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2968 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2969 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2970 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2971 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2972 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2973 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2974 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2975 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2976 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2977 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2978 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2979 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2982 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2983 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2984 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2985 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2986 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2987 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2988 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2989 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2990 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2991 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2992 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2993 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2994 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2995 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2996 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2997 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2998 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2999 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

3000 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

3001 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

3002 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

3003 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

3004 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

3005 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

3006 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

3007 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

3008 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

3009 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

3010 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

3011 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

3012 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

3013 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

3014 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

3017 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

3018 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

3019 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

3020 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

3021 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

3022 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

3023 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

3024 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

3025 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

3026 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

3027 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

3028 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

3029 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

3030 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

3031 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

3032 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

3033 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

3034 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

3035 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

3036 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

3037 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

3038 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

3039 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

3040 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

3041 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

3042 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

3043 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

3044 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

3045 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

3046 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

3047 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

3048 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

3049 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

3052 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

3053 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

3054 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

3055 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

3056 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

3057 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

3058 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

3059 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

3060 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

3061 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

3062 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

3063 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

3064 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

3065 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

3066 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

3067 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

3068 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

3069 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

3070 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

3071 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

3072 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

3073 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

3074 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

3075 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

3076 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

3077 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

3078 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

3079 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

3080 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

3081 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

3082 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

3083 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

3084 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

3087 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

3088 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3089 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

3090 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

3093 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

3094 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

3095 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

3096 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

3099 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

3100 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

3101 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

3102 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

3105 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

3106 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

3107 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

3108 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

3111 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

3112 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

3113 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

3114 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

3117 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

3118 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

3119 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

3120 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

3123 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

3124 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

3125 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

3126 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

3129 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

3130 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

3131 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

3132 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

3135 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

3136 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

3137 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

3138 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

3139 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

3142 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

3143 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

3144 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

3145 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

3146 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

3147 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

3148 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

3149 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

3150 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

3151 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

3154 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

3155 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

3158 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

3159 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

3160 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

3162 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

3163 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

3164 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

3165 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

3168 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

3169 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

3170 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

3171 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

3172 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

3173 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

3174 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

3175 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

3177 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

3178 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

3181 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

3182 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

3183 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

3186 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

3187 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

3188 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

3189 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

3190 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

3191 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

3194 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

3195 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

3196 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

3197 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

3200 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

3201 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

3202 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

3203 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

3204 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

3205 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

3206 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

3207 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

3208 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

3209 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

3210 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

3211 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

3212 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

3213 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

3217 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

3218 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

3219 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

3220 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

3221 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

3223 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

3224 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

3225 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

3226 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

3227 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

3228 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

3230 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

3231 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

3232 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

3233 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

3234 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

3235 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

3238 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

3239 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

3240 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

3243 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

3244 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

3245 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

3246 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

3247 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

3250 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3253 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3256 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

3265 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3266 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3267 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3268 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3269 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3270 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3271 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3272 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3273 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3274 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3275 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3276 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3277 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3278 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3279 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3280 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3281 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3282 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3283 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3284 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3287 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3288 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3289 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3290 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3291 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3292 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3293 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3294 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3295 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3296 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3297 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3298 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3299 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3300 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3301 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3302 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3303 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3304 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3305 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3306 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3309 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3310 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3311 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3312 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3313 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3314 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3315 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3316 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3317 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3318 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3319 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3320 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3321 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3322 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3323 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3324 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3325 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3326 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3327 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3328 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3331 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3332 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3333 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3334 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3335 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3336 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3337 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3338 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3339 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3340 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3341 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3342 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3343 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3344 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3345 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3346 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3347 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3348 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3349 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3350 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3353 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3354 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3355 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3356 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3357 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3358 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3359 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3360 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3361 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3362 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3363 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3364 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3365 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3366 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3367 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3368 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3369 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3370 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3371 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3372 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3375 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3376 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3377 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3378 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3379 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3380 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3381 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3382 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3383 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3384 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3385 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3386 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3387 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3388 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3389 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3390 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3391 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3392 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3393 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3394 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3403 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

3404 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3405 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3406 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3407 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

3408 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3409 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3410 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3411 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

3412 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3413 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3414 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3415 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

3416 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3417 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3418 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3419 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3420 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3421 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3422 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3423 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3424 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3425 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3426 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3427 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3428 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3429 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3430 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3433 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3434 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3435 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3436 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3437 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3438 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3439 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3440 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3441 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3442 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3443 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3444 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3445 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3446 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3447 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3448 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3449 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3450 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3451 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3452 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3453 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3454 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3455 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3456 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3457 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3458 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3459 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3460 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3463 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

3464 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3465 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3466 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3467 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3468 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3469 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

3470 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

3472 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3473 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3474 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3476 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3477 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3478 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3480 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

3481 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3482 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3484 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3487 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

3488 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3489 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3490 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3491 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

3492 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3493 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

3494 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

3496 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3497 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3498 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3500 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3501 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3502 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3504 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

3505 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3506 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3508 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3511 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

3512 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3513 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3514 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3515 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

3516 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3517 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

3518 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

3520 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3521 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3522 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3524 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3525 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3526 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3528 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

3529 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3530 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3532 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3535 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

3536 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3537 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3538 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3539 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

3540 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3541 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

3542 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

3544 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3545 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3546 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3548 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3549 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3550 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3552 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

3553 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3554 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3556 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3559 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

3560 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3561 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3562 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3563 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

3564 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3565 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

3566 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

3568 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3569 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3570 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3572 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3573 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3574 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3576 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

3577 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3578 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3580 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3583 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

3584 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3585 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3586 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3587 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

3588 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3589 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

3590 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

3592 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3593 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3594 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3596 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3597 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3598 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3600 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

3601 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3602 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3604 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3607 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

3608 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3609 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3610 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3611 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

3612 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3613 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

3614 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

3616 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

3617 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3618 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3620 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3621 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3622 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3624 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

3625 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3626 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3628 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3631 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

3634 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

3637 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

3640 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

3643 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

3646 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

3649 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

3652 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3655 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3658 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3662 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3665 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3668 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3672 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3675 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3678 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3681 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3685 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3688 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3691 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3694 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3703 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

3704 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

3705 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

3706 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

3707 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

3710 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

3711 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

3712 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

3713 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

3714 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

3715 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

3717 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

3718 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

3719 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

3720 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

3721 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

3722 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

3723 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

3724 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

3726 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

3727 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

3728 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

3729 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

3731 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

3732 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

3733 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

3734 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

3735 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

3737 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

3738 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

3742 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

3743 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

3744 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

3745 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

3746 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

3747 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

3749 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

3750 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

3751 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

3752 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

3754 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

3756 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

3757 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

3758 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

3759 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

3761 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

3762 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

3763 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

3764 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

3767 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

3768 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

3769 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

3770 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

3772 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

3773 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

3774 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

3775 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

3777 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

3778 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

3779 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

3780 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

3782 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

3783 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

3784 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

3785 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

3787 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

3788 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

3789 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

3790 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

3792 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

3793 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

3794 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

3795 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

3797 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

3798 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

3799 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

3800 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

3802 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

3803 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

3804 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

3805 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

3808 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

3809 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

3810 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

3811 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

3813 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

3814 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

3815 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

3816 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

3818 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

3819 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

3820 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

3821 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

3823 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

3824 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

3825 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

3826 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

3828 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

3829 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

3830 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

3831 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

3833 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

3834 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

3835 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

3836 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

3838 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

3839 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

3840 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

3841 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

3843 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

3844 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3845 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3846 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3848 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3849 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3850 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3851 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3853 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3854 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3855 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3856 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3859 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3862 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3865 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3868 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3871 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3874 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3877 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3878 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3879 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3880 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3881 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3882 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3884 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3885 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3886 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3887 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3888 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3889 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3891 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3892 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3893 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3894 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3895 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3896 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3898 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3899 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3900 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3901 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3902 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3903 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3905 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3906 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3907 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3908 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3909 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3912 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3913 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3914 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3915 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3916 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3917 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3919 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3920 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3921 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3922 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3923 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3924 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3926 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3927 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3928 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3929 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3930 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3931 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3933 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3934 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3935 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3936 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3937 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3938 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3940 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3941 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3942 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3943 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3944 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3945 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3947 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3948 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3949 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3950 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3951 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3952 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3955 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3956 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3957 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3958 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3959 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3960 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3962 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3963 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3964 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3965 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3966 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3967 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3969 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3970 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3971 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3972 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3973 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3974 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3976 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3977 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3978 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3979 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3980 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3981 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3983 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3984 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3985 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3986 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3987 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3988 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3990 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3991 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3992 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3993 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3994 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3995 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3998 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3999 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

4000 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

4001 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

4002 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

4003 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

4005 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

4006 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

4007 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

4008 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

4009 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

4010 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

4012 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

4013 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

4014 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

4015 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

4016 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

4017 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

4019 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

4020 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

4021 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

4022 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

4023 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

4024 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

4026 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

4027 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

4028 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

4031 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4034 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4037 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4040 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4043 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

4044 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

4053 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

4054 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

4055 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

4057 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

4058 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

4059 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

4060 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

4062 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

4063 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

4064 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

4066 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

4067 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

4068 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

4069 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

4070 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

4072 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

4073 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

4074 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

4075 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

4077 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

4078 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

4079 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

4080 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

4082 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

4083 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

4084 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

4086 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

4087 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

4088 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

4089 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

4090 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

4092 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

4095 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

4096 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

4099 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

4102 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4105 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

4108 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

4111 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4114 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

4117 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

4118 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

4121 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

4122 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

4125 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

4126 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

4129 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

4132 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

4135 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

4136 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

4144 
	#CEC_CFGR_PE
 ((
uöt16_t
)0x0001Ë

	)

4145 
	#CEC_CFGR_IE
 ((
uöt16_t
)0x0002Ë

	)

4146 
	#CEC_CFGR_BTEM
 ((
uöt16_t
)0x0004Ë

	)

4147 
	#CEC_CFGR_BPEM
 ((
uöt16_t
)0x0008Ë

	)

4150 
	#CEC_OAR_OA
 ((
uöt16_t
)0x000FË

	)

4151 
	#CEC_OAR_OA_0
 ((
uöt16_t
)0x0001Ë

	)

4152 
	#CEC_OAR_OA_1
 ((
uöt16_t
)0x0002Ë

	)

4153 
	#CEC_OAR_OA_2
 ((
uöt16_t
)0x0004Ë

	)

4154 
	#CEC_OAR_OA_3
 ((
uöt16_t
)0x0008Ë

	)

4157 
	#CEC_PRES_PRES
 ((
uöt16_t
)0x3FFFË

	)

4160 
	#CEC_ESR_BTE
 ((
uöt16_t
)0x0001Ë

	)

4161 
	#CEC_ESR_BPE
 ((
uöt16_t
)0x0002Ë

	)

4162 
	#CEC_ESR_RBTFE
 ((
uöt16_t
)0x0004Ë

	)

4163 
	#CEC_ESR_SBE
 ((
uöt16_t
)0x0008Ë

	)

4164 
	#CEC_ESR_ACKE
 ((
uöt16_t
)0x0010Ë

	)

4165 
	#CEC_ESR_LINE
 ((
uöt16_t
)0x0020Ë

	)

4166 
	#CEC_ESR_TBTFE
 ((
uöt16_t
)0x0040Ë

	)

4169 
	#CEC_CSR_TSOM
 ((
uöt16_t
)0x0001Ë

	)

4170 
	#CEC_CSR_TEOM
 ((
uöt16_t
)0x0002Ë

	)

4171 
	#CEC_CSR_TERR
 ((
uöt16_t
)0x0004Ë

	)

4172 
	#CEC_CSR_TBTRF
 ((
uöt16_t
)0x0008Ë

	)

4173 
	#CEC_CSR_RSOM
 ((
uöt16_t
)0x0010Ë

	)

4174 
	#CEC_CSR_REOM
 ((
uöt16_t
)0x0020Ë

	)

4175 
	#CEC_CSR_RERR
 ((
uöt16_t
)0x0040Ë

	)

4176 
	#CEC_CSR_RBTF
 ((
uöt16_t
)0x0080Ë

	)

4179 
	#CEC_TXD_TXD
 ((
uöt16_t
)0x00FFË

	)

4182 
	#CEC_RXD_RXD
 ((
uöt16_t
)0x00FFË

	)

4191 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

4192 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

4193 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

4194 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

4195 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

4197 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

4198 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

4199 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

4201 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

4203 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

4204 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

4205 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

4208 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

4209 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

4210 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

4212 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

4213 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

4214 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

4215 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

4217 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

4218 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

4219 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

4220 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

4221 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

4222 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

4223 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

4224 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

4227 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

4228 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

4229 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

4230 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

4232 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

4233 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

4234 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

4235 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

4237 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

4239 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

4240 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

4241 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

4242 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

4243 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

4245 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

4246 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

4247 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

4249 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

4250 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

4253 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

4254 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

4255 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

4256 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

4257 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

4258 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

4259 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

4260 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

4261 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

4262 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

4263 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

4264 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

4265 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

4266 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

4267 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

4270 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

4271 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

4272 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

4273 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

4274 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

4275 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

4276 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

4277 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

4278 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

4279 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

4280 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

4281 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

4284 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

4285 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

4286 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

4287 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

4288 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

4289 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

4290 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

4291 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

4294 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

4295 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

4296 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

4298 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

4299 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

4301 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

4302 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

4303 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

4304 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

4306 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

4308 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

4309 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

4310 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

4312 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

4313 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

4315 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

4316 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

4317 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

4318 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

4320 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

4324 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

4325 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4326 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4328 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

4329 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

4330 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

4331 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

4332 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

4334 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

4335 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4336 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4338 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

4339 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

4340 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

4341 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

4342 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

4345 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

4346 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

4347 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

4349 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

4350 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

4352 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

4353 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

4354 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

4355 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

4357 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

4359 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

4360 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

4361 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

4363 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

4364 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

4366 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

4367 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

4368 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

4369 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

4371 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

4375 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

4376 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4377 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4379 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

4380 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

4381 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

4382 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

4383 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

4385 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

4386 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4387 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4389 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

4390 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

4391 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

4392 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

4393 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

4396 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

4397 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

4398 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

4399 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

4400 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

4401 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

4402 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

4403 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

4404 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

4405 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

4406 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

4407 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

4408 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

4409 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

4410 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

4413 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

4416 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

4419 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

4422 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

4425 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

4428 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

4431 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

4434 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

4437 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

4438 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

4439 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

4440 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

4441 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

4442 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

4443 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

4444 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

4445 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

4447 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

4448 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

4449 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

4451 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

4452 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

4453 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

4454 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

4455 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

4456 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

4459 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

4460 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

4461 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

4462 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

4463 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

4464 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

4466 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

4467 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

4468 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

4469 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

4470 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

4471 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

4474 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

4483 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

4484 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

4485 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

4488 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

4489 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

4490 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

4491 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

4492 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

4493 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

4496 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

4499 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

4502 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

4505 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

4508 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4511 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4514 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4517 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4526 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4529 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4530 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4531 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4532 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4535 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4538 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4539 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4548 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

4549 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

4550 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

4551 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

4552 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

4553 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

4554 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

4555 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

4557 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

4560 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

4561 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

4562 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

4563 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

4564 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

4565 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

4566 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

4567 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

4569 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

4570 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

4571 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

4573 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

4576 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

4585 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4586 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4588 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4589 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4590 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4592 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4593 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4594 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4596 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4597 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4598 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4599 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4600 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4601 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4602 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4603 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4604 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4605 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4608 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4609 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4611 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4612 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4613 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4615 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4616 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4617 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4619 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4620 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4621 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4622 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4623 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4624 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4625 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4626 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4627 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4628 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4631 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4632 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4634 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4635 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4636 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4638 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4639 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4640 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4642 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4643 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4644 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4645 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4646 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4647 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4648 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4649 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4650 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4651 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4654 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4655 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4657 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4658 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4659 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4661 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4662 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4663 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4665 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4666 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4667 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4668 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4669 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4670 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4671 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4672 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4673 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4674 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4677 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4678 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4679 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4680 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4681 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4683 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4684 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4685 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4686 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4687 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4689 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4690 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4691 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4692 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4693 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4695 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4696 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4697 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4698 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4699 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4701 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4702 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4703 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4704 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4705 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4707 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4708 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4709 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4710 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4711 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4713 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4714 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4715 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4718 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4719 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4720 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4721 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4722 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4724 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4725 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4726 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4727 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4728 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4730 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4731 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4732 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4733 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4734 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4736 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4737 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4738 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4739 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4740 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4742 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4743 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4744 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4745 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4746 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4748 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4749 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4750 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4751 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4752 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4754 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4755 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4756 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4759 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4760 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4761 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4762 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4763 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4765 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4766 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4767 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4768 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4769 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4771 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4772 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4773 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4774 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4775 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4777 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4778 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4779 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4780 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4781 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4783 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4784 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4785 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4786 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4787 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4789 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4790 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4791 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4792 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4793 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4795 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4796 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4797 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4800 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4801 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4802 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4803 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4804 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4806 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4807 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4808 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4809 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4810 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4812 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4813 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4814 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4815 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4816 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4818 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4819 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4820 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4821 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4822 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4824 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4825 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4826 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4827 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4828 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4830 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4831 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4832 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4833 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4834 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4836 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4837 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4838 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4841 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4842 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4843 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4844 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4845 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4847 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4848 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4849 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4850 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4851 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4853 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4854 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4855 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4856 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4857 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4859 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4860 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4861 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4862 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4863 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4865 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4866 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4867 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4868 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4869 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4871 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4872 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4873 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4876 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4877 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4878 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4879 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4880 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4882 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4883 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4884 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4885 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4886 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4888 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4889 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4890 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4891 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4892 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4894 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4895 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4896 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4897 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4898 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4900 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4901 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4902 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4903 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4904 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4906 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4907 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4908 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4911 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4912 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4913 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4914 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4915 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4917 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4918 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4919 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4920 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4921 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4923 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4924 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4925 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4926 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4927 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4929 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4930 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4931 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4932 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4933 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4935 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4936 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4937 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4938 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4939 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4941 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4942 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4943 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4946 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4947 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4948 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4949 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4950 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4952 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4953 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4954 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4955 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4956 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4958 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4959 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4960 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4961 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4962 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4964 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4965 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4966 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4967 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4968 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4970 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4971 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4972 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4973 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4974 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4976 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4977 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4978 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4981 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4982 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4983 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4985 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4986 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4987 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4989 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4991 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4992 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4993 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4994 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4995 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4997 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4998 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4999 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5000 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5001 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5003 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5004 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5005 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5006 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5009 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5010 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5011 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5013 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5014 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5015 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5017 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5019 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5020 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5021 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5022 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5023 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5025 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5026 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5027 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5028 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5029 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5031 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5032 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5033 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5034 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5037 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5038 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5039 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5041 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5042 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5043 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5045 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5047 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5048 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5049 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5050 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5051 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5053 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5054 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5055 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5056 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5057 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5059 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5060 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5061 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5062 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5065 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5066 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5067 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5068 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5069 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5070 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5071 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5074 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5075 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5076 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5077 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5078 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5079 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5080 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5083 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5084 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5085 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5086 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5087 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5088 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5089 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5092 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5093 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5094 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5095 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5096 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5097 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5098 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5099 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5100 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5102 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5103 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5104 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5105 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5106 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5107 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5108 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5109 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5110 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5112 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5113 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5114 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5115 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5116 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5117 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5118 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5119 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5120 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5122 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5123 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5124 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5125 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5126 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5127 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5128 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5129 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5130 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5133 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5134 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5135 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5136 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5137 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5138 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5139 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5140 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5141 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5143 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5144 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5145 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5146 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5147 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5148 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5149 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5150 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5151 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5153 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5154 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5155 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5156 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5157 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5158 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5159 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5160 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5161 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5163 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5164 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5165 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5166 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5167 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5168 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5169 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5170 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5171 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5174 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5175 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5176 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5177 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5178 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5179 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5180 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5181 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5182 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5184 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5185 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5186 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5187 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5188 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5189 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5190 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5191 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5192 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5194 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5195 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5196 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5197 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5198 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5199 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5200 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5201 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5202 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5204 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5205 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5206 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5207 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5208 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5209 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5210 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5211 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5212 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5215 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5216 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5217 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5218 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5219 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5220 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5221 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5222 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5223 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5225 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5226 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5227 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5228 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5229 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5230 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5231 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5232 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5233 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5235 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5236 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5237 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5238 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5239 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5240 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5241 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5242 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5243 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5245 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5246 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5247 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5248 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5249 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5250 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5251 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5252 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5253 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5256 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5257 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5258 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5259 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5260 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5261 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5262 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5263 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5264 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5266 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5267 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5268 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5269 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5270 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5271 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5272 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5273 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5274 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5276 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5277 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5278 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5279 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5280 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5281 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5282 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5283 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5284 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5286 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5287 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5288 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5289 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5290 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5291 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5292 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5293 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5294 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5297 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5298 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5299 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5300 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5301 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5302 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5303 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5304 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5305 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5307 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5308 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5309 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5310 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5311 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5312 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5313 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5314 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5315 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5317 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5318 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5319 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5320 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5321 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5322 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5323 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5324 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5325 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5327 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5328 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5329 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5330 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5331 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5332 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5333 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5334 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5335 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5338 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5339 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5340 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5341 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5342 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5343 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5344 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5345 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5346 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5348 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5349 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5350 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5351 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5352 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5353 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5354 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5355 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5356 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5358 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5359 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5360 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5361 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5362 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5363 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5364 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5365 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5366 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5368 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5369 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5370 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5371 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5372 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5373 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5374 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5375 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5376 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5379 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5382 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5391 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

5392 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

5393 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

5396 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

5397 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

5398 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

5399 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

5401 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

5402 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

5403 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

5405 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

5406 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

5409 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

5412 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

5414 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

5415 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

5416 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

5418 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

5419 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

5420 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

5421 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

5422 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

5423 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

5424 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

5427 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

5430 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

5433 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

5436 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5439 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5442 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

5445 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

5448 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

5451 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

5452 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

5453 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

5454 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

5456 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

5457 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

5458 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

5459 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

5460 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

5462 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

5463 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

5464 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

5465 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

5468 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

5471 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

5472 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

5473 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5474 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5475 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5476 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5477 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5478 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5479 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5480 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5481 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5482 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5483 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5484 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5485 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5486 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5487 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5488 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5489 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5490 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5491 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5492 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5493 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5494 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5497 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5498 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5499 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5500 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5501 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5502 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5503 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5504 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5505 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5506 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5507 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5508 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5509 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5512 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5513 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5514 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5515 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5516 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5517 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5518 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5519 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5520 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5521 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5522 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5523 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5524 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5525 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5526 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5527 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5528 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5529 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5530 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5531 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5532 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5533 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5534 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5535 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5538 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5541 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5551 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5553 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5554 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5555 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5557 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5558 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5559 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5561 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5562 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5563 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5565 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5567 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5568 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5569 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5571 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5572 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5575 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5577 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5578 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5579 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5581 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5582 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5583 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5585 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5586 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5587 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5589 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5591 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5592 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5593 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5595 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5596 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5599 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5601 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5602 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5603 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5605 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5606 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5607 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5609 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5610 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5611 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5613 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5615 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5616 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5617 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5619 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5620 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5623 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5625 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5626 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5627 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5629 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5630 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5631 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5633 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5634 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5635 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5637 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5639 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5640 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5641 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5643 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5644 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5647 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5649 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5650 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5651 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5653 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5654 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5655 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5657 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5658 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5659 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5661 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5663 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5664 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5665 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5667 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5668 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5671 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5673 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5674 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5675 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5677 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5678 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5679 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5681 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5682 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5683 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5685 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5687 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5688 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5689 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5691 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5692 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5695 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5697 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5698 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5699 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5701 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5702 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5703 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5705 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5706 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5707 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5709 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5711 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5712 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5713 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5715 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5716 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5719 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5721 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5722 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5723 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5725 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5726 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5727 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5729 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5730 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5731 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5733 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5735 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5736 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5737 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5739 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5740 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5744 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5745 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5746 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5747 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5748 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5749 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5750 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5751 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5752 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5753 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5754 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5755 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5756 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5759 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5760 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5761 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5762 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5763 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5764 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5765 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5766 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5767 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5768 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5771 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5772 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5773 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5774 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5775 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5778 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5779 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5780 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5781 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5782 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5783 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5784 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5785 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5787 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5790 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5794 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5797 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5800 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5803 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5806 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5809 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5812 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5815 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5820 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5823 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5826 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5829 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5832 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5835 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5838 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5841 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5846 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5849 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5852 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5855 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5858 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5861 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5864 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5867 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5870 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5873 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5876 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5879 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5882 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5885 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5888 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5891 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5896 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5899 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5902 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5905 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5908 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5911 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5914 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5917 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5922 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5924 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5925 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5926 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5927 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5928 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5929 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5931 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5934 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5936 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5937 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5938 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5939 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5940 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5941 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5943 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5946 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5948 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5949 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5950 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5951 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5952 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5953 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5955 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5958 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5960 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5961 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5962 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5963 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5964 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5965 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5967 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5970 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5972 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5973 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5974 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5975 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5976 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5977 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5979 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5982 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5984 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5985 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5986 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5987 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5988 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5989 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5991 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5994 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5996 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5997 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5998 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5999 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

6000 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

6001 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

6003 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

6006 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

6008 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

6009 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

6010 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

6011 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

6012 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

6013 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

6015 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

6020 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6022 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6023 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6024 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6025 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6026 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6027 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6029 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6032 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6034 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6035 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6036 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6037 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6038 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6039 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6041 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6044 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6046 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6047 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6048 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6049 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6050 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6051 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6053 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6056 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6058 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6059 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6060 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6061 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6062 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6063 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6065 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6068 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6070 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6071 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6072 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6073 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6074 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6075 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6077 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6080 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6082 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6083 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6084 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6085 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6086 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6087 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6089 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6092 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6094 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6095 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6096 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6097 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6098 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6099 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6101 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6104 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6106 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6107 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6108 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6109 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6110 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6111 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6113 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6116 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6118 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6119 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6120 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6121 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6122 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6123 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6125 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6128 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6130 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6131 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6132 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6133 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6134 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6135 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6137 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6140 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6142 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6143 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6144 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6145 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6146 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6147 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6149 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6152 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6154 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6155 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6156 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6157 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6158 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6159 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6161 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6164 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6166 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6167 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6168 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6169 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6170 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6171 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6173 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6176 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6178 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6179 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6180 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6181 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6182 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6183 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6185 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6188 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6190 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6191 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6192 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6193 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6194 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6195 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6197 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6200 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6202 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6203 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6204 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6205 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6206 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6207 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6209 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6219 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

6220 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

6221 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

6222 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

6223 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

6224 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

6225 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

6226 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

6227 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

6230 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

6231 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

6232 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

6233 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

6234 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

6235 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

6236 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

6237 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

6238 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

6241 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

6242 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

6243 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

6244 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

6245 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

6246 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

6247 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

6248 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

6249 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

6250 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

6251 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

6252 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

6253 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

6254 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

6255 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

6256 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

6258 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

6259 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

6260 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

6261 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

6263 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

6264 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

6265 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

6266 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

6269 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

6270 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

6271 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

6272 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

6275 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

6276 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

6277 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

6278 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

6281 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

6282 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

6283 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

6284 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

6285 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

6286 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

6287 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

6288 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

6289 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

6290 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

6291 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

6292 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

6293 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

6294 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

6297 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

6298 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

6299 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

6301 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

6302 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

6303 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

6304 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

6306 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

6307 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

6310 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

6311 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

6312 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

6313 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

6314 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

6315 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

6319 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6320 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6321 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6322 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6323 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6326 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6327 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6328 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6331 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6332 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6333 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6334 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6337 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6338 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6339 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6340 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6343 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6344 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6345 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6346 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6347 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6350 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6351 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6352 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6355 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6356 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6357 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6358 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6361 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6362 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6363 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6364 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6367 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6368 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6369 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6370 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6371 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6374 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6375 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6376 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6379 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6380 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6381 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6382 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6385 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6386 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6387 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6388 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6391 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6392 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6393 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6394 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6397 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6398 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6399 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6402 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6403 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6404 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6405 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6408 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6409 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6410 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6411 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6414 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6415 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6416 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6417 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6420 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6421 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6422 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6425 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6426 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6427 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6428 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6431 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6432 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6433 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6434 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6438 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

6441 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

6442 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

6443 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

6444 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

6445 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

6446 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

6447 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

6448 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

6449 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

6450 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

6451 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

6452 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

6453 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

6454 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

6455 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

6458 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

6459 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

6460 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

6461 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

6462 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

6463 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

6464 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

6465 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

6466 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

6467 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

6468 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

6469 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

6470 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

6471 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

6472 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

6475 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

6476 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

6477 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

6478 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

6479 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

6480 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

6481 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

6482 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

6483 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

6484 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

6485 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

6486 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

6487 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

6488 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

6489 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

6492 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

6493 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

6494 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

6495 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

6496 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

6497 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

6498 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

6499 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

6500 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

6501 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

6502 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

6503 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

6504 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

6505 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

6506 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

6509 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6510 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6511 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6512 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6513 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6514 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6515 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6516 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6517 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6518 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6519 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6520 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6521 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6522 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6523 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6524 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6525 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6526 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6527 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6528 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6529 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6530 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6531 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6532 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6533 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6534 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6535 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6536 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6537 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6538 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6539 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6540 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6543 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6544 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6545 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6546 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6547 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6548 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6549 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6550 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6551 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6552 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6553 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6554 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6555 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6556 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6557 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6558 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6559 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6560 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6561 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6562 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6563 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6564 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6565 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6566 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6567 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6568 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6569 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6570 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6571 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6572 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6573 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6574 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6577 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6578 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6579 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6580 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6581 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6582 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6583 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6584 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6585 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6586 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6587 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6588 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6589 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6590 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6591 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6592 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6593 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6594 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6595 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6596 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6597 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6598 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6599 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6600 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6601 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6602 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6603 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6604 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6605 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6606 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6607 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6608 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6611 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6612 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6613 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6614 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6615 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6616 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6617 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6618 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6619 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6620 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6621 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6622 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6623 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6624 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6625 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6626 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6627 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6628 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6629 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6630 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6631 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6632 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6633 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6634 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6635 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6636 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6637 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6638 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6639 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6640 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6641 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6642 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6645 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6646 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6647 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6648 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6649 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6650 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6651 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6652 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6653 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6654 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6655 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6656 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6657 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6658 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6659 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6660 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6661 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6662 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6663 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6664 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6665 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6666 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6667 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6668 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6669 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6670 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6671 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6672 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6673 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6674 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6675 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6676 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6679 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6680 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6681 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6682 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6683 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6684 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6685 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6686 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6687 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6688 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6689 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6690 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6691 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6692 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6693 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6694 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6695 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6696 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6697 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6698 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6699 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6700 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6701 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6702 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6703 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6704 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6705 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6706 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6707 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6708 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6709 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6710 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6713 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6714 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6715 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6716 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6717 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6718 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6719 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6720 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6721 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6722 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6723 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6724 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6725 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6726 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6727 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6728 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6729 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6730 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6731 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6732 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6733 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6734 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6735 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6736 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6737 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6738 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6739 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6740 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6741 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6742 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6743 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6744 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6747 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6748 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6749 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6750 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6751 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6752 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6753 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6754 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6755 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6756 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6757 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6758 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6759 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6760 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6761 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6762 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6763 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6764 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6765 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6766 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6767 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6768 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6769 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6770 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6771 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6772 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6773 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6774 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6775 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6776 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6777 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6778 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6781 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6782 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6783 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6784 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6785 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6786 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6787 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6788 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6789 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6790 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6791 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6792 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6793 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6794 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6795 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6796 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6797 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6798 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6799 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6800 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6801 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6802 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6803 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6804 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6805 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6806 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6807 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6808 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6809 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6810 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6811 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6812 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6815 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6816 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6817 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6818 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6819 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6820 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6821 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6822 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6823 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6824 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6825 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6826 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6827 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6828 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6829 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6830 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6831 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6832 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6833 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6834 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6835 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6836 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6837 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6838 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6839 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6840 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6841 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6842 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6843 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6844 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6845 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6846 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6849 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6850 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6851 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6852 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6853 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6854 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6855 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6856 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6857 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6858 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6859 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6860 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6861 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6862 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6863 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6864 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6865 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6866 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6867 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6868 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6869 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6870 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6871 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6872 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6873 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6874 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6875 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6876 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6877 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6878 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6879 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6880 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6883 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6884 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6885 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6886 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6887 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6888 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6889 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6890 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6891 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6892 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6893 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6894 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6895 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6896 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6897 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6898 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6899 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6900 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6901 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6902 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6903 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6904 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6905 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6906 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6907 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6908 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6909 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6910 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6911 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6912 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6913 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6914 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6917 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6918 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6919 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6920 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6921 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6922 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6923 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6924 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6925 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6926 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6927 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6928 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6929 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6930 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6931 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6932 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6933 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6934 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6935 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6936 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6937 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6938 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6939 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6940 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6941 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6942 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6943 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6944 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6945 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6946 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6947 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6948 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6951 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6952 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6953 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6954 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6955 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6956 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6957 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6958 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6959 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6960 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6961 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6962 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6963 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6964 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6965 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6966 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6967 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6968 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6969 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6970 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6971 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6972 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6973 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6974 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6975 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6976 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6977 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6978 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6979 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6980 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6981 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6982 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6985 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6986 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6987 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6988 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6989 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6990 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6991 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6992 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6993 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6994 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6995 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6996 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6997 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6998 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6999 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7000 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7001 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7002 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7003 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7004 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7005 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7006 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7007 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7008 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7009 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7010 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7011 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7012 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7013 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7014 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7015 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7016 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7019 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7020 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7021 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7022 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7023 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7024 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7025 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7026 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7027 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7028 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7029 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7030 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7031 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7032 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7033 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7034 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7035 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7036 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7037 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7038 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7039 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7040 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7041 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7042 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7043 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7044 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7045 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7046 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7047 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7048 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7049 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7050 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7053 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7054 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7055 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7056 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7057 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7058 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7059 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7060 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7061 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7062 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7063 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7064 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7065 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7066 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7067 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7068 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7069 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7070 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7071 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7072 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7073 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7074 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7075 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7076 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7077 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7078 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7079 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7080 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7081 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7082 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7083 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7084 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7087 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7088 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7089 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7090 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7091 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7092 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7093 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7094 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7095 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7096 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7097 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7098 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7099 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7100 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7101 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7102 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7103 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7104 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7105 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7106 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7107 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7108 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7109 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7110 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7111 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7112 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7113 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7114 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7115 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7116 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7117 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7118 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7121 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7122 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7123 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7124 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7125 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7126 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7127 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7128 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7129 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7130 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7131 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7132 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7133 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7134 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7135 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7136 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7137 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7138 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7139 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7140 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7141 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7142 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7143 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7144 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7145 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7146 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7147 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7148 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7149 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7150 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7151 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7152 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7155 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7156 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7157 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7158 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7159 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7160 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7161 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7162 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7163 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7164 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7165 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7166 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7167 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7168 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7169 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7170 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7171 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7172 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7173 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7174 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7175 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7176 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7177 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7178 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7179 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7180 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7181 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7182 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7183 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7184 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7185 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7186 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7189 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7190 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7191 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7192 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7193 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7194 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7195 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7196 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7197 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7198 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7199 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7200 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7201 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7202 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7203 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7204 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7205 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7206 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7207 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7208 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7209 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7210 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7211 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7212 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7213 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7214 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7215 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7216 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7217 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7218 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7219 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7220 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7223 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7224 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7225 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7226 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7227 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7228 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7229 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7230 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7231 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7232 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7233 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7234 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7235 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7236 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7237 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7238 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7239 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7240 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7241 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7242 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7243 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7244 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7245 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7246 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7247 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7248 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7249 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7250 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7251 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7252 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7253 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7254 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7257 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7258 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7259 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7260 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7261 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7262 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7263 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7264 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7265 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7266 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7267 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7268 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7269 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7270 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7271 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7272 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7273 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7274 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7275 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7276 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7277 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7278 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7279 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7280 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7281 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7282 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7283 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7284 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7285 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7286 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7287 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7288 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7291 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7292 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7293 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7294 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7295 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7296 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7297 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7298 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7299 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7300 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7301 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7302 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7303 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7304 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7305 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7306 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7307 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7308 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7309 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7310 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7311 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7312 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7313 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7314 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7315 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7316 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7317 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7318 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7319 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7320 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7321 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7322 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7325 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7326 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7327 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7328 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7329 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7330 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7331 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7332 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7333 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7334 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7335 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7336 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7337 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7338 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7339 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7340 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7341 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7342 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7343 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7344 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7345 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7346 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7347 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7348 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7349 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7350 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7351 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7352 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7353 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7354 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7355 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7356 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7359 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7360 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7361 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7362 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7363 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7364 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7365 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7366 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7367 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7368 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7369 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7370 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7371 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7372 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7373 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7374 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7375 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7376 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7377 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7378 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7379 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7380 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7381 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7382 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7383 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7384 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7385 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7386 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7387 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7388 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7389 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7390 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7393 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7394 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7395 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7396 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7397 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7398 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7399 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7400 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7401 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7402 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7403 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7404 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7405 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7406 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7407 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7408 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7409 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7410 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7411 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7412 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7413 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7414 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7415 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7416 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7417 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7418 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7419 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7420 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7421 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7422 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7423 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7424 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7427 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7428 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7429 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7430 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7431 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7432 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7433 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7434 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7435 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7436 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7437 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7438 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7439 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7440 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7441 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7442 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7443 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7444 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7445 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7446 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7447 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7448 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7449 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7450 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7451 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7452 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7453 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7454 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7455 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7456 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7457 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7458 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7467 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7468 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7469 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7471 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7472 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7473 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7474 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7476 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7477 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7478 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7479 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7480 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7481 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7482 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7483 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7484 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7485 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7488 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7489 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7490 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7491 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7492 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7493 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7496 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7497 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7498 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7499 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7500 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7501 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7502 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7503 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7506 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7509 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7512 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7515 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7518 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7520 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7521 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7522 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7524 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7526 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7527 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7528 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7530 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7532 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7533 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7534 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7536 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7537 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7540 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7541 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7542 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7551 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7552 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7553 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7554 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7555 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7556 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7557 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7558 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7559 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7560 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7561 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7562 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7563 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7564 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7567 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7568 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7569 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7570 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7571 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7572 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7573 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7575 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7576 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7577 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7578 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7579 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7582 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7583 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7585 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7586 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7587 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7588 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7589 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7590 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7591 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7592 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7593 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7594 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7596 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7599 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7600 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7603 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7606 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7607 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7608 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7609 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7610 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7611 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7612 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7613 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7614 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7615 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7616 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7617 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7618 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7619 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7622 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7623 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7624 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7625 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7626 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7627 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7628 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7629 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7632 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7633 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7634 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7637 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7646 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7647 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7648 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7649 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7650 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7651 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7652 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7653 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7654 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7655 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7658 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7661 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7662 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7665 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7666 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7667 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7668 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7669 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7670 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7671 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7672 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7673 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7674 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7675 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7676 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7677 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7678 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7679 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7682 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7683 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7684 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7685 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7686 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7687 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7688 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7690 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7691 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7692 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7694 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7697 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7698 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7699 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7700 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7701 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7702 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7703 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7704 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7705 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7706 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7707 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7708 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7711 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7712 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7713 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7714 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7715 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7716 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7717 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7718 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7719 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7721 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7730 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

7732 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

7733 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

7734 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

7735 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

7736 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

7737 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

7738 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

7739 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

7740 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

7741 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

7742 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

7743 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

7744 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

7745 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

7746 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

7747 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

7748 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

7751 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

7752 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

7753 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

7754 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

7756 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

7757 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

7758 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

7760 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

7761 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

7762 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

7763 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

7764 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

7765 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

7766 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7767 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

7768 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

7769 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00020000Ë

	)

7770 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

7771 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

7772 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

7773 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

7774 
	#DBGMCU_CR_DBG_TIM15_STOP
 ((
uöt32_t
)0x00400000Ë

	)

7775 
	#DBGMCU_CR_DBG_TIM16_STOP
 ((
uöt32_t
)0x00800000Ë

	)

7776 
	#DBGMCU_CR_DBG_TIM17_STOP
 ((
uöt32_t
)0x01000000Ë

	)

7777 
	#DBGMCU_CR_DBG_TIM12_STOP
 ((
uöt32_t
)0x02000000Ë

	)

7778 
	#DBGMCU_CR_DBG_TIM13_STOP
 ((
uöt32_t
)0x04000000Ë

	)

7779 
	#DBGMCU_CR_DBG_TIM14_STOP
 ((
uöt32_t
)0x08000000Ë

	)

7780 
	#DBGMCU_CR_DBG_TIM9_STOP
 ((
uöt32_t
)0x10000000Ë

	)

7781 
	#DBGMCU_CR_DBG_TIM10_STOP
 ((
uöt32_t
)0x20000000Ë

	)

7782 
	#DBGMCU_CR_DBG_TIM11_STOP
 ((
uöt32_t
)0x40000000Ë

	)

7791 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

7792 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

7793 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

7794 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

7796 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

7797 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

7798 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

7801 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7804 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7807 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

7808 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

7809 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

7810 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

7813 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

7814 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

7815 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

7816 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

7817 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

7818 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

7819 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

7820 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

7821 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

7822 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

7825 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7828 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

7829 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

7831 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

7832 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

7833 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

7834 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

7835 
	#FLASH_OBR_BFB2
 ((
uöt16_t
)0x0020Ë

	)

7838 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7843 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

7844 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

7847 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

7848 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

7851 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

7852 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

7855 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

7856 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

7859 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

7860 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

7863 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

7864 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

7867 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

7868 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

7871 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

7872 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

7874 #ifde‡
STM32F10X_CL


7879 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7880 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7881 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7882 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7883 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7884 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7885 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7886 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7887 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7888 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7889 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7890 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7891 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7892 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7893 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7894 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7895 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7896 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7897 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7898 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7900 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7901 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7902 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7903 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7904 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7905 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7906 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7909 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7910 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7911 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7912 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7913 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7914 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7915 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7916 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7917 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7918 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7919 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7920 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7921 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7922 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7925 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7928 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7931 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7932 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7933 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7934 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7935 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7936 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7937 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7938 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7941 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7944 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7945 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7946 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7947 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7948 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7949 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7950 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7951 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7952 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7953 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7954 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7957 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7958 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7961 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7975 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7976 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7977 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7978 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7979 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7980 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7981 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7984 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7985 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7986 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7987 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7988 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7991 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7992 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7995 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7998 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8001 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8002 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8003 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8004 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8005 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8006 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8007 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8008 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8009 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8010 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

8013 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8016 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8017 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8018 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8019 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8020 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8021 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8022 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8023 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8024 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8025 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

8028 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8031 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8032 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8033 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8034 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8035 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8036 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8037 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8038 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8039 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8040 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

8043 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8050 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

8051 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

8052 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

8053 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

8056 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

8057 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

8058 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

8061 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

8062 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

8063 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

8066 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

8067 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

8068 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

8071 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

8072 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

8073 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

8076 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8079 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8082 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8085 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8088 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8091 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8098 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

8099 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

8100 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

8101 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

8102 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

8103 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

8106 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

8109 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8112 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8113 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8116 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8119 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8120 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8123 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8126 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8129 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8136 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8137 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8138 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8139 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8140 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8141 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8142 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8143 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8144 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8145 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8146 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8147 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8148 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8149 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8150 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8151 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8152 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8153 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8154 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8155 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8156 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8157 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8158 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8159 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8160 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

8161 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

8162 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

8163 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

8164 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

8165 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

8166 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

8167 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

8168 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

8169 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

8170 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

8171 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

8172 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

8173 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

8176 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8179 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8182 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8185 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8188 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

8189 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

8190 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

8191 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

8193 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

8194 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

8195 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

8196 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

8197 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8198 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

8199 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

8200 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

8201 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

8202 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

8203 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

8204 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8205 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

8206 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

8207 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

8208 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

8209 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

8210 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

8211 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

8212 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

8213 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

8214 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

8215 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

8216 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

8217 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

8218 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

8219 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

8220 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

8221 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

8222 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

8223 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

8224 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

8227 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

8228 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

8229 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

8230 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

8231 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

8232 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

8233 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8234 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

8235 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

8236 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

8237 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

8238 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

8239 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

8240 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

8241 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

8242 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

8243 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

8244 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

8245 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8246 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

8247 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

8248 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

8249 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

8250 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

8253 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

8254 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

8255 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

8256 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

8257 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

8258 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

8259 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

8260 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

8261 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

8262 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

8263 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

8264 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

8265 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

8266 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

8267 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

8270 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

8271 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

8272 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

8273 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

8276 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8279 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8282 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8285 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8296 #ifde‡
USE_STDPERIPH_DRIVER


8297 
	~"°m32f10x_c⁄f.h
"

8304 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

8306 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

8308 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

8310 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

8312 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

8314 
	#READ_REG
(
REG
Ë((REG))

	)

8316 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

8322 #ifde‡
__˝lu•lus


	@inc/stm32f10x_conf.h

23 #i‚de‡
__STM32F10x_CONF_H


24 
	#__STM32F10x_CONF_H


	)

28 
	~"°m32f10x_adc.h
"

29 
	~"°m32f10x_bkp.h
"

30 
	~"°m32f10x_ˇn.h
"

31 
	~"°m32f10x_˚c.h
"

32 
	~"°m32f10x_¸c.h
"

33 
	~"°m32f10x_dac.h
"

34 
	~"°m32f10x_dbgmcu.h
"

35 
	~"°m32f10x_dma.h
"

36 
	~"°m32f10x_exti.h
"

37 
	~"°m32f10x_Êash.h
"

38 
	~"°m32f10x_fsmc.h
"

39 
	~"°m32f10x_gpio.h
"

40 
	~"°m32f10x_i2c.h
"

41 
	~"°m32f10x_iwdg.h
"

42 
	~"°m32f10x_pwr.h
"

43 
	~"°m32f10x_rcc.h
"

44 
	~"°m32f10x_πc.h
"

45 
	~"°m32f10x_sdio.h
"

46 
	~"°m32f10x_•i.h
"

47 
	~"°m32f10x_tim.h
"

48 
	~"°m32f10x_ußπ.h
"

49 
	~"°m32f10x_wwdg.h
"

50 
	~"misc.h
"

59 #ifde‡ 
USE_FULL_ASSERT


68 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

70 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

72 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@inc/stm32f10x_delay.h

1 #i‚de‡
__STM32F10_DELAY


2 
	#__STM32F10_DELAY


	)

3 
	~"°m32f10x.h
"

4 
SysTick_C⁄figuøti⁄
();

5 
Dñay
(
u32
 
nms
);

	@inc/stm32f10x_it.h

23 #i‚de‡
__STM32F10x_IT_H


24 
	#__STM32F10x_IT_H


	)

27 
	~"°m32f10x.h
"

34 
NMI_H™dÀr
();

35 
H¨dFau…_H™dÀr
();

36 
MemM™age_H™dÀr
();

37 
BusFau…_H™dÀr
();

38 
UßgeFau…_H™dÀr
();

39 
SVC_H™dÀr
();

40 
DebugM⁄_H™dÀr
();

41 
PídSV_H™dÀr
();

42 
SysTick_H™dÀr
();

	@inc/system_stm32f10x.h

33 #i‚de‡
__SYSTEM_STM32F10X_H


34 
	#__SYSTEM_STM32F10X_H


	)

36 #ifde‡
__˝lu•lus


53 
uöt32_t
 
Sy°emC‹eClock
;

79 
Sy°emInô
();

80 
Sy°emC‹eClockUpd©e
();

85 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupport/core_cm3.c

24 
	~<°döt.h
>

27 #i‡
deföed
 ( 
__CC_ARM
 )

28 
	#__ASM
 
__asm


	)

29 
	#__INLINE
 
__ölöe


	)

31 #ñi‡
deföed
 ( 
__ICCARM__
 )

32 
	#__ASM
 
__asm


	)

33 
	#__INLINE
 
ölöe


	)

35 #ñi‡
deföed
 ( 
__GNUC__
 )

36 
	#__ASM
 
__asm


	)

37 
	#__INLINE
 
ölöe


	)

39 #ñi‡
deföed
 ( 
__TASKING__
 )

40 
	#__ASM
 
__asm


	)

41 
	#__INLINE
 
ölöe


	)

48 #i‡
deföed
 ( 
__CC_ARM
 )

58 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

60 
mrs
 
r0
, 
p•


61 
bx
 
Ã


62 
	}
}

72 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

74 
m§
 
p•
, 
r0


75 
bx
 
Ã


76 
	}
}

86 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

88 
mrs
 
r0
, 
m•


89 
bx
 
Ã


90 
	}
}

100 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

102 
m§
 
m•
, 
r0


103 
bx
 
Ã


104 
	}
}

114 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡(
__ARMCC_VERSION
 < 400000)

142 
__ASM
 
	$__CLREX
()

144 
˛ªx


145 
	}
}

154 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

156 
mrs
 
r0
, 
ba£¥i


157 
bx
 
Ã


158 
	}
}

167 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

169 
m§
 
ba£¥i
, 
r0


170 
bx
 
Ã


171 
	}
}

180 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

182 
mrs
 
r0
, 
¥imask


183 
bx
 
Ã


184 
	}
}

193 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

195 
m§
 
¥imask
, 
r0


196 
bx
 
Ã


197 
	}
}

206 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

208 
mrs
 
r0
, 
Áu…mask


209 
bx
 
Ã


210 
	}
}

219 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

221 
m§
 
Áu…mask
, 
r0


222 
bx
 
Ã


223 
	}
}

232 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

234 
mrs
 
r0
, 
c⁄åﬁ


235 
bx
 
Ã


236 
	}
}

245 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

247 
m§
 
c⁄åﬁ
, 
r0


248 
bx
 
Ã


249 
	}
}

255 #ñi‡(
deföed
 (
__ICCARM__
))

257 #¥agm®
düg_suµªss
=
Pe940


266 
uöt32_t
 
	$__gë_PSP
()

268 
	`__ASM
("mrsÑ0,Ösp");

269 
	`__ASM
("bxÜr");

270 
	}
}

280 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

282 
	`__ASM
("msrÖsp,Ñ0");

283 
	`__ASM
("bxÜr");

284 
	}
}

294 
uöt32_t
 
	$__gë_MSP
()

296 
	`__ASM
("mrsÑ0, msp");

297 
	`__ASM
("bxÜr");

298 
	}
}

308 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

310 
	`__ASM
("msr msp,Ñ0");

311 
	`__ASM
("bxÜr");

312 
	}
}

322 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

324 
	`__ASM
("rev16Ñ0,Ñ0");

325 
	`__ASM
("bxÜr");

326 
	}
}

336 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

338 
	`__ASM
("rbitÑ0,Ñ0");

339 
	`__ASM
("bxÜr");

340 
	}
}

350 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

352 
	`__ASM
("ldrexbÑ0, [r0]");

353 
	`__ASM
("bxÜr");

354 
	}
}

364 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

366 
	`__ASM
("ldrexhÑ0, [r0]");

367 
	`__ASM
("bxÜr");

368 
	}
}

378 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

380 
	`__ASM
("ldrexÑ0, [r0]");

381 
	`__ASM
("bxÜr");

382 
	}
}

393 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

395 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

396 
	`__ASM
("bxÜr");

397 
	}
}

408 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

410 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

411 
	`__ASM
("bxÜr");

412 
	}
}

423 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

425 
	`__ASM
("strexÑ0,Ñ0, [r1]");

426 
	`__ASM
("bxÜr");

427 
	}
}

429 #¥agm®
düg_deÁu…
=
Pe940


432 #ñi‡(
deföed
 (
__GNUC__
))

442 
uöt32_t
 
	$__gë_PSP
(Ë
	`__©åibuã__
––
«ked
 ) );

443 
uöt32_t
 
	$__gë_PSP
()

445 
uöt32_t
 
ªsu…
=0;

447 
__ASM
 volatile ("MRS %0,Ösp\n\t"

449 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

450 (
ªsu…
);

451 
	}
}

461 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
Ë
	`__©åibuã__
––
«ked
 ) );

462 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

464 
__ASM
 volatile ("MSRÖsp, %0\n\t"

465 "BXÜ∏ \n\t" : : "r" (
t›OfProcSèck
) );

466 
	}
}

476 
uöt32_t
 
	$__gë_MSP
(Ë
	`__©åibuã__
––
«ked
 ) );

477 
uöt32_t
 
	$__gë_MSP
()

479 
uöt32_t
 
ªsu…
=0;

481 
__ASM
 volatile ("MRS %0, msp\n\t"

483 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

484 (
ªsu…
);

485 
	}
}

495 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
Ë
	`__©åibuã__
––
«ked
 ) );

496 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

498 
__ASM
 volatile ("MSR msp, %0\n\t"

499 "BXÜ∏ \n\t" : : "r" (
t›OfMaöSèck
) );

500 
	}
}

509 
uöt32_t
 
	$__gë_BASEPRI
()

511 
uöt32_t
 
ªsu…
=0;

513 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

514 (
ªsu…
);

515 
	}
}

524 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

526 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

527 
	}
}

536 
uöt32_t
 
	$__gë_PRIMASK
()

538 
uöt32_t
 
ªsu…
=0;

540 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

541 (
ªsu…
);

542 
	}
}

551 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

553 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

554 
	}
}

563 
uöt32_t
 
	$__gë_FAULTMASK
()

565 
uöt32_t
 
ªsu…
=0;

567 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

568 (
ªsu…
);

569 
	}
}

578 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

580 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

581 
	}
}

590 
uöt32_t
 
	$__gë_CONTROL
()

592 
uöt32_t
 
ªsu…
=0;

594 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

595 (
ªsu…
);

596 
	}
}

605 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

607 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

608 
	}
}

619 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

621 
uöt32_t
 
ªsu…
=0;

623 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

624 (
ªsu…
);

625 
	}
}

635 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

637 
uöt32_t
 
ªsu…
=0;

639 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

640 (
ªsu…
);

641 
	}
}

651 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

653 
uöt32_t
 
ªsu…
=0;

655 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

656 (
ªsu…
);

657 
	}
}

667 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

669 
uöt32_t
 
ªsu…
=0;

671 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

672 (
ªsu…
);

673 
	}
}

683 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

685 
uöt8_t
 
ªsu…
=0;

687 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

688 (
ªsu…
);

689 
	}
}

699 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

701 
uöt16_t
 
ªsu…
=0;

703 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

704 (
ªsu…
);

705 
	}
}

715 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

717 
uöt32_t
 
ªsu…
=0;

719 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

720 (
ªsu…
);

721 
	}
}

732 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

734 
uöt32_t
 
ªsu…
=0;

736 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

737 (
ªsu…
);

738 
	}
}

749 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

751 
uöt32_t
 
ªsu…
=0;

753 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

754 (
ªsu…
);

755 
	}
}

766 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

768 
uöt32_t
 
ªsu…
=0;

770 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

771 (
ªsu…
);

772 
	}
}

775 #ñi‡(
deföed
 (
__TASKING__
))

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupport/core_cm3.h

24 #i‚de‡
__CM3_CORE_H__


25 
	#__CM3_CORE_H__


	)

80 #ifde‡
__˝lu•lus


84 
	#__CM3_CMSIS_VERSION_MAIN
 (0x01Ë

	)

85 
	#__CM3_CMSIS_VERSION_SUB
 (0x30Ë

	)

86 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

88 
	#__CORTEX_M
 (0x03Ë

	)

90 
	~<°döt.h
>

92 #i‡
deföed
 (
__ICCARM__
)

93 
	~<öåösics.h
>

97 #i‚de‡
__NVIC_PRIO_BITS


98 
	#__NVIC_PRIO_BITS
 4

	)

110 #ifde‡
__˝lu•lus


111 
	#__I
 vﬁ©ûê

	)

113 
	#__I
 vﬁ©ûêc⁄°

	)

115 
	#__O
 vﬁ©ûê

	)

116 
	#__IO
 vﬁ©ûê

	)

134 
__IO
 
uöt32_t
 
ISER
[8];

135 
uöt32_t
 
RESERVED0
[24];

136 
__IO
 
uöt32_t
 
ICER
[8];

137 
uöt32_t
 
RSERVED1
[24];

138 
__IO
 
uöt32_t
 
ISPR
[8];

139 
uöt32_t
 
RESERVED2
[24];

140 
__IO
 
uöt32_t
 
ICPR
[8];

141 
uöt32_t
 
RESERVED3
[24];

142 
__IO
 
uöt32_t
 
IABR
[8];

143 
uöt32_t
 
RESERVED4
[56];

144 
__IO
 
uöt8_t
 
IP
[240];

145 
uöt32_t
 
RESERVED5
[644];

146 
__O
 
uöt32_t
 
STIR
;

147 } 
	tNVIC_Ty≥
;

157 
__I
 
uöt32_t
 
CPUID
;

158 
__IO
 
uöt32_t
 
ICSR
;

159 
__IO
 
uöt32_t
 
VTOR
;

160 
__IO
 
uöt32_t
 
AIRCR
;

161 
__IO
 
uöt32_t
 
SCR
;

162 
__IO
 
uöt32_t
 
CCR
;

163 
__IO
 
uöt8_t
 
SHP
[12];

164 
__IO
 
uöt32_t
 
SHCSR
;

165 
__IO
 
uöt32_t
 
CFSR
;

166 
__IO
 
uöt32_t
 
HFSR
;

167 
__IO
 
uöt32_t
 
DFSR
;

168 
__IO
 
uöt32_t
 
MMFAR
;

169 
__IO
 
uöt32_t
 
BFAR
;

170 
__IO
 
uöt32_t
 
AFSR
;

171 
__I
 
uöt32_t
 
PFR
[2];

172 
__I
 
uöt32_t
 
DFR
;

173 
__I
 
uöt32_t
 
ADR
;

174 
__I
 
uöt32_t
 
MMFR
[4];

175 
__I
 
uöt32_t
 
ISAR
[5];

176 } 
	tSCB_Ty≥
;

179 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

180 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFu»<< 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

182 
	#SCB_CPUID_VARIANT_Pos
 20

	)

183 
	#SCB_CPUID_VARIANT_Msk
 (0xFu»<< 
SCB_CPUID_VARIANT_Pos
Ë

	)

185 
	#SCB_CPUID_PARTNO_Pos
 4

	)

186 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFu»<< 
SCB_CPUID_PARTNO_Pos
Ë

	)

188 
	#SCB_CPUID_REVISION_Pos
 0

	)

189 
	#SCB_CPUID_REVISION_Msk
 (0xFu»<< 
SCB_CPUID_REVISION_Pos
Ë

	)

192 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

193 
	#SCB_ICSR_NMIPENDSET_Msk
 (1u»<< 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

195 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

196 
	#SCB_ICSR_PENDSVSET_Msk
 (1u»<< 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

198 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

199 
	#SCB_ICSR_PENDSVCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

201 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

202 
	#SCB_ICSR_PENDSTSET_Msk
 (1u»<< 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

204 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

205 
	#SCB_ICSR_PENDSTCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

207 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

208 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1u»<< 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

210 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

211 
	#SCB_ICSR_ISRPENDING_Msk
 (1u»<< 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

213 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

214 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

216 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

217 
	#SCB_ICSR_RETTOBASE_Msk
 (1u»<< 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

219 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

220 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

223 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

224 
	#SCB_VTOR_TBLBASE_Msk
 (0x1FFu»<< 
SCB_VTOR_TBLBASE_Pos
Ë

	)

226 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

227 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFu»<< 
SCB_VTOR_TBLOFF_Pos
Ë

	)

230 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

231 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

233 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

234 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

236 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

237 
	#SCB_AIRCR_ENDIANESS_Msk
 (1u»<< 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

239 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

240 
	#SCB_AIRCR_PRIGROUP_Msk
 (7u»<< 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

242 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

243 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1u»<< 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

245 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

246 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1u»<< 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

248 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

249 
	#SCB_AIRCR_VECTRESET_Msk
 (1u»<< 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

252 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

253 
	#SCB_SCR_SEVONPEND_Msk
 (1u»<< 
SCB_SCR_SEVONPEND_Pos
Ë

	)

255 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

256 
	#SCB_SCR_SLEEPDEEP_Msk
 (1u»<< 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

258 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

259 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1u»<< 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

262 
	#SCB_CCR_STKALIGN_Pos
 9

	)

263 
	#SCB_CCR_STKALIGN_Msk
 (1u»<< 
SCB_CCR_STKALIGN_Pos
Ë

	)

265 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

266 
	#SCB_CCR_BFHFNMIGN_Msk
 (1u»<< 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

268 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

269 
	#SCB_CCR_DIV_0_TRP_Msk
 (1u»<< 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

271 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

272 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1u»<< 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

274 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

275 
	#SCB_CCR_USERSETMPEND_Msk
 (1u»<< 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

277 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

278 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1u»<< 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

281 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

282 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

284 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

285 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

287 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

288 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

290 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

291 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1u»<< 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

293 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

294 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

296 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

297 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

299 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

300 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

302 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

303 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1u»<< 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

305 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

306 
	#SCB_SHCSR_PENDSVACT_Msk
 (1u»<< 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

308 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

309 
	#SCB_SHCSR_MONITORACT_Msk
 (1u»<< 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

311 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

312 
	#SCB_SHCSR_SVCALLACT_Msk
 (1u»<< 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

314 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

315 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

317 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

318 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

320 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

321 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

324 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

325 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFu»<< 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

327 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

328 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

330 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

331 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

334 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

335 
	#SCB_HFSR_DEBUGEVT_Msk
 (1u»<< 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

337 
	#SCB_HFSR_FORCED_Pos
 30

	)

338 
	#SCB_HFSR_FORCED_Msk
 (1u»<< 
SCB_HFSR_FORCED_Pos
Ë

	)

340 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

341 
	#SCB_HFSR_VECTTBL_Msk
 (1u»<< 
SCB_HFSR_VECTTBL_Pos
Ë

	)

344 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

345 
	#SCB_DFSR_EXTERNAL_Msk
 (1u»<< 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

347 
	#SCB_DFSR_VCATCH_Pos
 3

	)

348 
	#SCB_DFSR_VCATCH_Msk
 (1u»<< 
SCB_DFSR_VCATCH_Pos
Ë

	)

350 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

351 
	#SCB_DFSR_DWTTRAP_Msk
 (1u»<< 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

353 
	#SCB_DFSR_BKPT_Pos
 1

	)

354 
	#SCB_DFSR_BKPT_Msk
 (1u»<< 
SCB_DFSR_BKPT_Pos
Ë

	)

356 
	#SCB_DFSR_HALTED_Pos
 0

	)

357 
	#SCB_DFSR_HALTED_Msk
 (1u»<< 
SCB_DFSR_HALTED_Pos
Ë

	)

367 
__IO
 
uöt32_t
 
CTRL
;

368 
__IO
 
uöt32_t
 
LOAD
;

369 
__IO
 
uöt32_t
 
VAL
;

370 
__I
 
uöt32_t
 
CALIB
;

371 } 
	tSysTick_Ty≥
;

374 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

375 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1u»<< 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

377 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

378 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1u»<< 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

380 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

381 
	#SysTick_CTRL_TICKINT_Msk
 (1u»<< 
SysTick_CTRL_TICKINT_Pos
Ë

	)

383 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

384 
	#SysTick_CTRL_ENABLE_Msk
 (1u»<< 
SysTick_CTRL_ENABLE_Pos
Ë

	)

387 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

388 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFu»<< 
SysTick_LOAD_RELOAD_Pos
Ë

	)

391 
	#SysTick_VAL_CURRENT_Pos
 0

	)

392 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

395 
	#SysTick_CALIB_NOREF_Pos
 31

	)

396 
	#SysTick_CALIB_NOREF_Msk
 (1u»<< 
SysTick_CALIB_NOREF_Pos
Ë

	)

398 
	#SysTick_CALIB_SKEW_Pos
 30

	)

399 
	#SysTick_CALIB_SKEW_Msk
 (1u»<< 
SysTick_CALIB_SKEW_Pos
Ë

	)

401 
	#SysTick_CALIB_TENMS_Pos
 0

	)

402 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

412 
__O
 union

414 
__O
 
uöt8_t
 
u8
;

415 
__O
 
uöt16_t
 
u16
;

416 
__O
 
uöt32_t
 
u32
;

417 } 
PORT
 [32];

418 
uöt32_t
 
RESERVED0
[864];

419 
__IO
 
uöt32_t
 
TER
;

420 
uöt32_t
 
RESERVED1
[15];

421 
__IO
 
uöt32_t
 
TPR
;

422 
uöt32_t
 
RESERVED2
[15];

423 
__IO
 
uöt32_t
 
TCR
;

424 
uöt32_t
 
RESERVED3
[29];

425 
__IO
 
uöt32_t
 
IWR
;

426 
__IO
 
uöt32_t
 
IRR
;

427 
__IO
 
uöt32_t
 
IMCR
;

428 
uöt32_t
 
RESERVED4
[43];

429 
__IO
 
uöt32_t
 
LAR
;

430 
__IO
 
uöt32_t
 
LSR
;

431 
uöt32_t
 
RESERVED5
[6];

432 
__I
 
uöt32_t
 
PID4
;

433 
__I
 
uöt32_t
 
PID5
;

434 
__I
 
uöt32_t
 
PID6
;

435 
__I
 
uöt32_t
 
PID7
;

436 
__I
 
uöt32_t
 
PID0
;

437 
__I
 
uöt32_t
 
PID1
;

438 
__I
 
uöt32_t
 
PID2
;

439 
__I
 
uöt32_t
 
PID3
;

440 
__I
 
uöt32_t
 
CID0
;

441 
__I
 
uöt32_t
 
CID1
;

442 
__I
 
uöt32_t
 
CID2
;

443 
__I
 
uöt32_t
 
CID3
;

444 } 
	tITM_Ty≥
;

447 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

448 
	#ITM_TPR_PRIVMASK_Msk
 (0xFu»<< 
ITM_TPR_PRIVMASK_Pos
Ë

	)

451 
	#ITM_TCR_BUSY_Pos
 23

	)

452 
	#ITM_TCR_BUSY_Msk
 (1u»<< 
ITM_TCR_BUSY_Pos
Ë

	)

454 
	#ITM_TCR_ATBID_Pos
 16

	)

455 
	#ITM_TCR_ATBID_Msk
 (0x7Fu»<< 
ITM_TCR_ATBID_Pos
Ë

	)

457 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

458 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3u»<< 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

460 
	#ITM_TCR_SWOENA_Pos
 4

	)

461 
	#ITM_TCR_SWOENA_Msk
 (1u»<< 
ITM_TCR_SWOENA_Pos
Ë

	)

463 
	#ITM_TCR_DWTENA_Pos
 3

	)

464 
	#ITM_TCR_DWTENA_Msk
 (1u»<< 
ITM_TCR_DWTENA_Pos
Ë

	)

466 
	#ITM_TCR_SYNCENA_Pos
 2

	)

467 
	#ITM_TCR_SYNCENA_Msk
 (1u»<< 
ITM_TCR_SYNCENA_Pos
Ë

	)

469 
	#ITM_TCR_TSENA_Pos
 1

	)

470 
	#ITM_TCR_TSENA_Msk
 (1u»<< 
ITM_TCR_TSENA_Pos
Ë

	)

472 
	#ITM_TCR_ITMENA_Pos
 0

	)

473 
	#ITM_TCR_ITMENA_Msk
 (1u»<< 
ITM_TCR_ITMENA_Pos
Ë

	)

476 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

477 
	#ITM_IWR_ATVALIDM_Msk
 (1u»<< 
ITM_IWR_ATVALIDM_Pos
Ë

	)

480 
	#ITM_IRR_ATREADYM_Pos
 0

	)

481 
	#ITM_IRR_ATREADYM_Msk
 (1u»<< 
ITM_IRR_ATREADYM_Pos
Ë

	)

484 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

485 
	#ITM_IMCR_INTEGRATION_Msk
 (1u»<< 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

488 
	#ITM_LSR_ByãAcc_Pos
 2

	)

489 
	#ITM_LSR_ByãAcc_Msk
 (1u»<< 
ITM_LSR_ByãAcc_Pos
Ë

	)

491 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

492 
	#ITM_LSR_Ac˚ss_Msk
 (1u»<< 
ITM_LSR_Ac˚ss_Pos
Ë

	)

494 
	#ITM_LSR_Pª£¡_Pos
 0

	)

495 
	#ITM_LSR_Pª£¡_Msk
 (1u»<< 
ITM_LSR_Pª£¡_Pos
Ë

	)

505 
uöt32_t
 
RESERVED0
;

506 
__I
 
uöt32_t
 
ICTR
;

507 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

508 
__IO
 
uöt32_t
 
ACTLR
;

510 
uöt32_t
 
RESERVED1
;

512 } 
	tI¡îru±Ty≥_Ty≥
;

515 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
 0

	)

516 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Msk
 (0x1Fu»<< 
I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
Ë

	)

519 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Pos
 2

	)

520 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISFOLD_Pos
Ë

	)

522 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
 1

	)

523 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
Ë

	)

525 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
 0

	)

526 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
Ë

	)

530 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

537 
__I
 
uöt32_t
 
TYPE
;

538 
__IO
 
uöt32_t
 
CTRL
;

539 
__IO
 
uöt32_t
 
RNR
;

540 
__IO
 
uöt32_t
 
RBAR
;

541 
__IO
 
uöt32_t
 
RASR
;

542 
__IO
 
uöt32_t
 
RBAR_A1
;

543 
__IO
 
uöt32_t
 
RASR_A1
;

544 
__IO
 
uöt32_t
 
RBAR_A2
;

545 
__IO
 
uöt32_t
 
RASR_A2
;

546 
__IO
 
uöt32_t
 
RBAR_A3
;

547 
__IO
 
uöt32_t
 
RASR_A3
;

548 } 
	tMPU_Ty≥
;

551 
	#MPU_TYPE_IREGION_Pos
 16

	)

552 
	#MPU_TYPE_IREGION_Msk
 (0xFFu»<< 
MPU_TYPE_IREGION_Pos
Ë

	)

554 
	#MPU_TYPE_DREGION_Pos
 8

	)

555 
	#MPU_TYPE_DREGION_Msk
 (0xFFu»<< 
MPU_TYPE_DREGION_Pos
Ë

	)

557 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

558 
	#MPU_TYPE_SEPARATE_Msk
 (1u»<< 
MPU_TYPE_SEPARATE_Pos
Ë

	)

561 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

562 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1u»<< 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

564 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

565 
	#MPU_CTRL_HFNMIENA_Msk
 (1u»<< 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

567 
	#MPU_CTRL_ENABLE_Pos
 0

	)

568 
	#MPU_CTRL_ENABLE_Msk
 (1u»<< 
MPU_CTRL_ENABLE_Pos
Ë

	)

571 
	#MPU_RNR_REGION_Pos
 0

	)

572 
	#MPU_RNR_REGION_Msk
 (0xFFu»<< 
MPU_RNR_REGION_Pos
Ë

	)

575 
	#MPU_RBAR_ADDR_Pos
 5

	)

576 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFu»<< 
MPU_RBAR_ADDR_Pos
Ë

	)

578 
	#MPU_RBAR_VALID_Pos
 4

	)

579 
	#MPU_RBAR_VALID_Msk
 (1u»<< 
MPU_RBAR_VALID_Pos
Ë

	)

581 
	#MPU_RBAR_REGION_Pos
 0

	)

582 
	#MPU_RBAR_REGION_Msk
 (0xFu»<< 
MPU_RBAR_REGION_Pos
Ë

	)

585 
	#MPU_RASR_XN_Pos
 28

	)

586 
	#MPU_RASR_XN_Msk
 (1u»<< 
MPU_RASR_XN_Pos
Ë

	)

588 
	#MPU_RASR_AP_Pos
 24

	)

589 
	#MPU_RASR_AP_Msk
 (7u»<< 
MPU_RASR_AP_Pos
Ë

	)

591 
	#MPU_RASR_TEX_Pos
 19

	)

592 
	#MPU_RASR_TEX_Msk
 (7u»<< 
MPU_RASR_TEX_Pos
Ë

	)

594 
	#MPU_RASR_S_Pos
 18

	)

595 
	#MPU_RASR_S_Msk
 (1u»<< 
MPU_RASR_S_Pos
Ë

	)

597 
	#MPU_RASR_C_Pos
 17

	)

598 
	#MPU_RASR_C_Msk
 (1u»<< 
MPU_RASR_C_Pos
Ë

	)

600 
	#MPU_RASR_B_Pos
 16

	)

601 
	#MPU_RASR_B_Msk
 (1u»<< 
MPU_RASR_B_Pos
Ë

	)

603 
	#MPU_RASR_SRD_Pos
 8

	)

604 
	#MPU_RASR_SRD_Msk
 (0xFFu»<< 
MPU_RASR_SRD_Pos
Ë

	)

606 
	#MPU_RASR_SIZE_Pos
 1

	)

607 
	#MPU_RASR_SIZE_Msk
 (0x1Fu»<< 
MPU_RASR_SIZE_Pos
Ë

	)

609 
	#MPU_RASR_ENA_Pos
 0

	)

610 
	#MPU_RASR_ENA_Msk
 (0x1Fu»<< 
MPU_RASR_ENA_Pos
Ë

	)

622 
__IO
 
uöt32_t
 
DHCSR
;

623 
__O
 
uöt32_t
 
DCRSR
;

624 
__IO
 
uöt32_t
 
DCRDR
;

625 
__IO
 
uöt32_t
 
DEMCR
;

626 } 
	tC‹eDebug_Ty≥
;

629 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

630 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFu»<< 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

632 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

633 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

635 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

636 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

638 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

639 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

641 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

642 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

644 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

645 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

647 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

648 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

650 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

651 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

653 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

654 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

656 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

657 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

659 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

660 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

662 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

663 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

666 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

667 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1u»<< 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

669 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

670 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1Fu»<< 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

673 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

674 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1u»<< 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

676 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

677 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

679 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

680 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

682 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

683 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

685 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

686 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

688 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

689 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

691 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

692 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

694 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

695 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

697 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

698 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

700 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

701 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

703 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

704 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

706 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

707 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

709 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

710 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

715 
	#SCS_BASE
 (0xE000E000Ë

	)

716 
	#ITM_BASE
 (0xE0000000Ë

	)

717 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

718 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

719 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

720 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

722 
	#I¡îru±Ty≥
 ((
I¡îru±Ty≥_Ty≥
 *Ë
SCS_BASE
Ë

	)

723 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

724 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

725 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

726 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
Ë

	)

727 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

729 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

730 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90Ë

	)

731 
	#MPU
 ((
MPU_Ty≥
*Ë
MPU_BASE
Ë

	)

741 #i‡
deföed
 ( 
__CC_ARM
 )

742 
	#__ASM
 
__asm


	)

743 
	#__INLINE
 
__ölöe


	)

745 #ñi‡
deföed
 ( 
__ICCARM__
 )

746 
	#__ASM
 
__asm


	)

747 
	#__INLINE
 
ölöe


	)

749 #ñi‡
deföed
 ( 
__GNUC__
 )

750 
	#__ASM
 
__asm


	)

751 
	#__INLINE
 
ölöe


	)

753 #ñi‡
deföed
 ( 
__TASKING__
 )

754 
	#__ASM
 
__asm


	)

755 
	#__INLINE
 
ölöe


	)

762 #i‡
deföed
 ( 
__CC_ARM
 )

765 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

766 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

768 
	#__NOP
 
__n›


	)

769 
	#__WFI
 
__wfi


	)

770 
	#__WFE
 
__w„


	)

771 
	#__SEV
 
__£v


	)

772 
	#__ISB
(Ë
	`__isb
(0)

	)

773 
	#__DSB
(Ë
	`__dsb
(0)

	)

774 
	#__DMB
(Ë
	`__dmb
(0)

	)

775 
	#__REV
 
__ªv


	)

776 
	#__RBIT
 
__rbô


	)

777 
	#__LDREXB
(
±r
Ë((Ë
	`__ldªx
’å))

	)

778 
	#__LDREXH
(
±r
Ë((Ë
	`__ldªx
’å))

	)

779 
	#__LDREXW
(
±r
Ë((Ë
	`__ldªx
’å))

	)

780 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

781 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

782 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

798 
uöt32_t
 
__gë_PSP
();

808 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

818 
uöt32_t
 
__gë_MSP
();

828 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

838 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

848 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

851 #i‡(
__ARMCC_VERSION
 < 400000)

858 
__CLREX
();

867 
uöt32_t
 
__gë_BASEPRI
();

876 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

885 
uöt32_t
 
__gë_PRIMASK
();

894 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

903 
uöt32_t
 
__gë_FAULTMASK
();

912 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

921 
uöt32_t
 
__gë_CONTROL
();

930 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

939 
	#__CLREX
 
__˛ªx


	)

948 
__INLINE
 
uöt32_t
 
__gë_BASEPRI
()

950 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

951 (
	g__ªgBa£Pri
);

961 
__INLINE
 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

963 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

964 
	g__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

974 
__INLINE
 
uöt32_t
 
__gë_PRIMASK
()

976 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

977 (
	g__ªgPriMask
);

987 
__INLINE
 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

989 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

990 
	g__ªgPriMask
 = (
¥iMask
);

1000 
__INLINE
 
uöt32_t
 
__gë_FAULTMASK
()

1002 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1003 (
	g__ªgFau…Mask
);

1013 
__INLINE
 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

1015 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1016 
	g__ªgFau…Mask
 = (
Áu…Mask
 & 1);

1026 
__INLINE
 
uöt32_t
 
__gë_CONTROL
()

1028 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1029 (
	g__ªgC⁄åﬁ
);

1039 
__INLINE
 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

1041 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1042 
	g__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

1049 #ñi‡(
deföed
 (
__ICCARM__
))

1052 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

1053 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

1055 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsie f"); }

1056 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsid f"); }

1058 
	#__NOP
 
__no_›î©i⁄


	)

1059 
__INLINE
 
__WFI
(Ë{ 
__ASM
 ("wfi"); }

1060 
__INLINE
 
__WFE
(Ë{ 
__ASM
 ("wfe"); }

1061 
__INLINE
 
__SEV
(Ë{ 
__ASM
 ("sev"); }

1062 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 ("clrex"); }

1084 
uöt32_t
 
__gë_PSP
();

1094 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1104 
uöt32_t
 
__gë_MSP
();

1114 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1124 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1134 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1144 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1154 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1164 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1175 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1186 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1197 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1201 #ñi‡(
deföed
 (
__GNUC__
))

1204 
__INLINE
 
__íabÀ_úq
(Ë{ 
__ASM
 volatile ("cpsie i"); }

1205 
__INLINE
 
__dißbÀ_úq
(Ë{ 
__ASM
 volatile ("cpsid i"); }

1207 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsie f"); }

1208 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsid f"); }

1210 
__INLINE
 
__NOP
(Ë{ 
__ASM
 volatile ("nop"); }

1211 
__INLINE
 
__WFI
(Ë{ 
__ASM
 volatile ("wfi"); }

1212 
__INLINE
 
__WFE
(Ë{ 
__ASM
 volatile ("wfe"); }

1213 
__INLINE
 
__SEV
(Ë{ 
__ASM
 volatile ("sev"); }

1214 
__INLINE
 
__ISB
(Ë{ 
__ASM
 volatile ("isb"); }

1215 
__INLINE
 
__DSB
(Ë{ 
__ASM
 volatile ("dsb"); }

1216 
__INLINE
 
__DMB
(Ë{ 
__ASM
 volatile ("dmb"); }

1217 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 volatile ("clrex"); }

1227 
uöt32_t
 
__gë_PSP
();

1237 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1247 
uöt32_t
 
__gë_MSP
();

1257 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1266 
uöt32_t
 
__gë_BASEPRI
();

1275 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

1284 
uöt32_t
 
__gë_PRIMASK
();

1293 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

1302 
uöt32_t
 
__gë_FAULTMASK
();

1311 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

1320 
uöt32_t
 
__gë_CONTROL
();

1329 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

1339 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

1349 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1359 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

1369 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1379 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1389 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1399 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1410 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1421 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1432 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1435 #ñi‡(
deföed
 (
__TASKING__
))

1468 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1470 
uöt32_t
 
	gªg_vÆue
;

1471 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1473 
	gªg_vÆue
 = 
SCB
->
AIRCR
;

1474 
	gªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1475 
	gªg_vÆue
 = (
ªg_vÆue
 |

1476 (0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1477 (
Pri‹ôyGroupTmp
 << 8));

1478 
	gSCB
->
	gAIRCR
 = 
ªg_vÆue
;

1489 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1491  ((
	gSCB
->
	gAIRCR
 & 
	gSCB_AIRCR_PRIGROUP_Msk
Ë>> 
	gSCB_AIRCR_PRIGROUP_Pos
);

1502 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1504 
	gNVIC
->
	gISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1515 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1517 
	gNVIC
->
	gICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1529 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1531 ((
	guöt32_t
Ë((
	gNVIC
->
	gISPR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1542 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1544 
	gNVIC
->
	gISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1555 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1557 
	gNVIC
->
	gICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1569 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1571 ((
	guöt32_t
)((
	gNVIC
->
	gIABR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1586 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1588 if(
	gIRQn
 < 0) {

1589 
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1591 
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1609 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1612 if(
	gIRQn
 < 0) {

1613 ((
	guöt32_t
)(
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1615 ((
	guöt32_t
)(
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1634 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1636 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1637 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1638 
uöt32_t
 
	gSubPri‹ôyBôs
;

1640 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1641 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1644 ((
	gPªem±Pri‹ôy
 & ((1 << (
	gPªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
	gSubPri‹ôyBôs
) |

1645 ((
	gSubPri‹ôy
 & ((1 << (
	gSubPri‹ôyBôs
 )) - 1)))

1665 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1667 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1668 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1669 
uöt32_t
 
	gSubPri‹ôyBôs
;

1671 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1672 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1674 *
	gpPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1675 *
	gpSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1682 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

1694 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1696 i‡(
	gticks
 > 
	gSysTick_LOAD_RELOAD_Msk
)  (1);

1698 
	gSysTick
->
	gLOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1699 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1700 
	gSysTick
->
	gVAL
 = 0;

1701 
	gSysTick
->
	gCTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1702 
SysTick_CTRL_TICKINT_Msk
 |

1703 
SysTick_CTRL_ENABLE_Msk
;

1719 
__INLINE
 
NVIC_Sy°emRe£t
()

1721 
	gSCB
->
	gAIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1722 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1723 
SCB_AIRCR_SYSRESETREQ_Msk
);

1724 
__DSB
();

1742 vﬁ©ûê
ITM_RxBuf„r
;

1743 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1756 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1758 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1759 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1760 (
	gITM
->
	gTER
 & (1ul << 0) ) )

1762 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1763 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1765  (
	gch
);

1778 
__INLINE
 
ITM_Re˚iveCh¨
 () {

1779 
	gch
 = -1;

1781 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1782 
ch
 = 
ITM_RxBuf„r
;

1783 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1786  (
	gch
);

1798 
__INLINE
 
ITM_CheckCh¨
 () {

1800 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1810 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h

50 #i‚de‡
__STM32F10x_H


51 
	#__STM32F10x_H


	)

53 #ifde‡
__˝lu•lus


65 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

95 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

99 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


105 
	#USE_STDPERIPH_DRIVER


	)

115 #i‡!
deföed
 
HSE_VALUE


116 #ifde‡
STM32F10X_CL


117 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

119 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

128 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

130 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

135 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03Ë

	)

136 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x05Ë

	)

137 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

138 
	#__STM32F10X_STDPERIPH_VERSION_RC
 (0x00Ë

	)

139 
	#__STM32F10X_STDPERIPH_VERSION
 ( (
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 24)\

	)

140 |(
__STM32F10X_STDPERIPH_VERSION_SUB1
 << 16)\

141 |(
__STM32F10X_STDPERIPH_VERSION_SUB2
 << 8)\

142 |(
__STM32F10X_STDPERIPH_VERSION_RC
))

155 #ifde‡
STM32F10X_XL


156 
	#__MPU_PRESENT
 1

	)

158 
	#__MPU_PRESENT
 0

	)

160 
	#__NVIC_PRIO_BITS
 4

	)

161 
	#__Víd‹_SysTickC⁄fig
 0

	)

167 
	eIRQn


170 
N⁄MaskabÀI¡_IRQn
 = -14,

171 
Mem‹yM™agemít_IRQn
 = -12,

172 
BusFau…_IRQn
 = -11,

173 
UßgeFau…_IRQn
 = -10,

174 
SVCÆl_IRQn
 = -5,

175 
DebugM⁄ô‹_IRQn
 = -4,

176 
PídSV_IRQn
 = -2,

177 
SysTick_IRQn
 = -1,

180 
WWDG_IRQn
 = 0,

181 
PVD_IRQn
 = 1,

182 
TAMPER_IRQn
 = 2,

183 
RTC_IRQn
 = 3,

184 
FLASH_IRQn
 = 4,

185 
RCC_IRQn
 = 5,

186 
EXTI0_IRQn
 = 6,

187 
EXTI1_IRQn
 = 7,

188 
EXTI2_IRQn
 = 8,

189 
EXTI3_IRQn
 = 9,

190 
EXTI4_IRQn
 = 10,

191 
DMA1_Ch™√l1_IRQn
 = 11,

192 
DMA1_Ch™√l2_IRQn
 = 12,

193 
DMA1_Ch™√l3_IRQn
 = 13,

194 
DMA1_Ch™√l4_IRQn
 = 14,

195 
DMA1_Ch™√l5_IRQn
 = 15,

196 
DMA1_Ch™√l6_IRQn
 = 16,

197 
DMA1_Ch™√l7_IRQn
 = 17,

199 #ifde‡
STM32F10X_LD


200 
ADC1_2_IRQn
 = 18,

201 
USB_HP_CAN1_TX_IRQn
 = 19,

202 
USB_LP_CAN1_RX0_IRQn
 = 20,

203 
CAN1_RX1_IRQn
 = 21,

204 
CAN1_SCE_IRQn
 = 22,

205 
EXTI9_5_IRQn
 = 23,

206 
TIM1_BRK_IRQn
 = 24,

207 
TIM1_UP_IRQn
 = 25,

208 
TIM1_TRG_COM_IRQn
 = 26,

209 
TIM1_CC_IRQn
 = 27,

210 
TIM2_IRQn
 = 28,

211 
TIM3_IRQn
 = 29,

212 
I2C1_EV_IRQn
 = 31,

213 
I2C1_ER_IRQn
 = 32,

214 
SPI1_IRQn
 = 35,

215 
USART1_IRQn
 = 37,

216 
USART2_IRQn
 = 38,

217 
EXTI15_10_IRQn
 = 40,

218 
RTCAœrm_IRQn
 = 41,

219 
USBWakeUp_IRQn
 = 42

222 #ifde‡
STM32F10X_LD_VL


223 
ADC1_IRQn
 = 18,

224 
EXTI9_5_IRQn
 = 23,

225 
TIM1_BRK_TIM15_IRQn
 = 24,

226 
TIM1_UP_TIM16_IRQn
 = 25,

227 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

228 
TIM1_CC_IRQn
 = 27,

229 
TIM2_IRQn
 = 28,

230 
TIM3_IRQn
 = 29,

231 
I2C1_EV_IRQn
 = 31,

232 
I2C1_ER_IRQn
 = 32,

233 
SPI1_IRQn
 = 35,

234 
USART1_IRQn
 = 37,

235 
USART2_IRQn
 = 38,

236 
EXTI15_10_IRQn
 = 40,

237 
RTCAœrm_IRQn
 = 41,

238 
CEC_IRQn
 = 42,

239 
TIM6_DAC_IRQn
 = 54,

240 
TIM7_IRQn
 = 55

243 #ifde‡
STM32F10X_MD


244 
ADC1_2_IRQn
 = 18,

245 
USB_HP_CAN1_TX_IRQn
 = 19,

246 
USB_LP_CAN1_RX0_IRQn
 = 20,

247 
CAN1_RX1_IRQn
 = 21,

248 
CAN1_SCE_IRQn
 = 22,

249 
EXTI9_5_IRQn
 = 23,

250 
TIM1_BRK_IRQn
 = 24,

251 
TIM1_UP_IRQn
 = 25,

252 
TIM1_TRG_COM_IRQn
 = 26,

253 
TIM1_CC_IRQn
 = 27,

254 
TIM2_IRQn
 = 28,

255 
TIM3_IRQn
 = 29,

256 
TIM4_IRQn
 = 30,

257 
I2C1_EV_IRQn
 = 31,

258 
I2C1_ER_IRQn
 = 32,

259 
I2C2_EV_IRQn
 = 33,

260 
I2C2_ER_IRQn
 = 34,

261 
SPI1_IRQn
 = 35,

262 
SPI2_IRQn
 = 36,

263 
USART1_IRQn
 = 37,

264 
USART2_IRQn
 = 38,

265 
USART3_IRQn
 = 39,

266 
EXTI15_10_IRQn
 = 40,

267 
RTCAœrm_IRQn
 = 41,

268 
USBWakeUp_IRQn
 = 42

271 #ifde‡
STM32F10X_MD_VL


272 
ADC1_IRQn
 = 18,

273 
EXTI9_5_IRQn
 = 23,

274 
TIM1_BRK_TIM15_IRQn
 = 24,

275 
TIM1_UP_TIM16_IRQn
 = 25,

276 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

277 
TIM1_CC_IRQn
 = 27,

278 
TIM2_IRQn
 = 28,

279 
TIM3_IRQn
 = 29,

280 
TIM4_IRQn
 = 30,

281 
I2C1_EV_IRQn
 = 31,

282 
I2C1_ER_IRQn
 = 32,

283 
I2C2_EV_IRQn
 = 33,

284 
I2C2_ER_IRQn
 = 34,

285 
SPI1_IRQn
 = 35,

286 
SPI2_IRQn
 = 36,

287 
USART1_IRQn
 = 37,

288 
USART2_IRQn
 = 38,

289 
USART3_IRQn
 = 39,

290 
EXTI15_10_IRQn
 = 40,

291 
RTCAœrm_IRQn
 = 41,

292 
CEC_IRQn
 = 42,

293 
TIM6_DAC_IRQn
 = 54,

294 
TIM7_IRQn
 = 55

297 #ifde‡
STM32F10X_HD


298 
ADC1_2_IRQn
 = 18,

299 
USB_HP_CAN1_TX_IRQn
 = 19,

300 
USB_LP_CAN1_RX0_IRQn
 = 20,

301 
CAN1_RX1_IRQn
 = 21,

302 
CAN1_SCE_IRQn
 = 22,

303 
EXTI9_5_IRQn
 = 23,

304 
TIM1_BRK_IRQn
 = 24,

305 
TIM1_UP_IRQn
 = 25,

306 
TIM1_TRG_COM_IRQn
 = 26,

307 
TIM1_CC_IRQn
 = 27,

308 
TIM2_IRQn
 = 28,

309 
TIM3_IRQn
 = 29,

310 
TIM4_IRQn
 = 30,

311 
I2C1_EV_IRQn
 = 31,

312 
I2C1_ER_IRQn
 = 32,

313 
I2C2_EV_IRQn
 = 33,

314 
I2C2_ER_IRQn
 = 34,

315 
SPI1_IRQn
 = 35,

316 
SPI2_IRQn
 = 36,

317 
USART1_IRQn
 = 37,

318 
USART2_IRQn
 = 38,

319 
USART3_IRQn
 = 39,

320 
EXTI15_10_IRQn
 = 40,

321 
RTCAœrm_IRQn
 = 41,

322 
USBWakeUp_IRQn
 = 42,

323 
TIM8_BRK_IRQn
 = 43,

324 
TIM8_UP_IRQn
 = 44,

325 
TIM8_TRG_COM_IRQn
 = 45,

326 
TIM8_CC_IRQn
 = 46,

327 
ADC3_IRQn
 = 47,

328 
FSMC_IRQn
 = 48,

329 
SDIO_IRQn
 = 49,

330 
TIM5_IRQn
 = 50,

331 
SPI3_IRQn
 = 51,

332 
UART4_IRQn
 = 52,

333 
UART5_IRQn
 = 53,

334 
TIM6_IRQn
 = 54,

335 
TIM7_IRQn
 = 55,

336 
DMA2_Ch™√l1_IRQn
 = 56,

337 
DMA2_Ch™√l2_IRQn
 = 57,

338 
DMA2_Ch™√l3_IRQn
 = 58,

339 
DMA2_Ch™√l4_5_IRQn
 = 59

342 #ifde‡
STM32F10X_HD_VL


343 
ADC1_IRQn
 = 18,

344 
EXTI9_5_IRQn
 = 23,

345 
TIM1_BRK_TIM15_IRQn
 = 24,

346 
TIM1_UP_TIM16_IRQn
 = 25,

347 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

348 
TIM1_CC_IRQn
 = 27,

349 
TIM2_IRQn
 = 28,

350 
TIM3_IRQn
 = 29,

351 
TIM4_IRQn
 = 30,

352 
I2C1_EV_IRQn
 = 31,

353 
I2C1_ER_IRQn
 = 32,

354 
I2C2_EV_IRQn
 = 33,

355 
I2C2_ER_IRQn
 = 34,

356 
SPI1_IRQn
 = 35,

357 
SPI2_IRQn
 = 36,

358 
USART1_IRQn
 = 37,

359 
USART2_IRQn
 = 38,

360 
USART3_IRQn
 = 39,

361 
EXTI15_10_IRQn
 = 40,

362 
RTCAœrm_IRQn
 = 41,

363 
CEC_IRQn
 = 42,

364 
TIM12_IRQn
 = 43,

365 
TIM13_IRQn
 = 44,

366 
TIM14_IRQn
 = 45,

367 
TIM5_IRQn
 = 50,

368 
SPI3_IRQn
 = 51,

369 
UART4_IRQn
 = 52,

370 
UART5_IRQn
 = 53,

371 
TIM6_DAC_IRQn
 = 54,

372 
TIM7_IRQn
 = 55,

373 
DMA2_Ch™√l1_IRQn
 = 56,

374 
DMA2_Ch™√l2_IRQn
 = 57,

375 
DMA2_Ch™√l3_IRQn
 = 58,

376 
DMA2_Ch™√l4_5_IRQn
 = 59,

377 
DMA2_Ch™√l5_IRQn
 = 60

382 #ifde‡
STM32F10X_XL


383 
ADC1_2_IRQn
 = 18,

384 
USB_HP_CAN1_TX_IRQn
 = 19,

385 
USB_LP_CAN1_RX0_IRQn
 = 20,

386 
CAN1_RX1_IRQn
 = 21,

387 
CAN1_SCE_IRQn
 = 22,

388 
EXTI9_5_IRQn
 = 23,

389 
TIM1_BRK_TIM9_IRQn
 = 24,

390 
TIM1_UP_TIM10_IRQn
 = 25,

391 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

392 
TIM1_CC_IRQn
 = 27,

393 
TIM2_IRQn
 = 28,

394 
TIM3_IRQn
 = 29,

395 
TIM4_IRQn
 = 30,

396 
I2C1_EV_IRQn
 = 31,

397 
I2C1_ER_IRQn
 = 32,

398 
I2C2_EV_IRQn
 = 33,

399 
I2C2_ER_IRQn
 = 34,

400 
SPI1_IRQn
 = 35,

401 
SPI2_IRQn
 = 36,

402 
USART1_IRQn
 = 37,

403 
USART2_IRQn
 = 38,

404 
USART3_IRQn
 = 39,

405 
EXTI15_10_IRQn
 = 40,

406 
RTCAœrm_IRQn
 = 41,

407 
USBWakeUp_IRQn
 = 42,

408 
TIM8_BRK_TIM12_IRQn
 = 43,

409 
TIM8_UP_TIM13_IRQn
 = 44,

410 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

411 
TIM8_CC_IRQn
 = 46,

412 
ADC3_IRQn
 = 47,

413 
FSMC_IRQn
 = 48,

414 
SDIO_IRQn
 = 49,

415 
TIM5_IRQn
 = 50,

416 
SPI3_IRQn
 = 51,

417 
UART4_IRQn
 = 52,

418 
UART5_IRQn
 = 53,

419 
TIM6_IRQn
 = 54,

420 
TIM7_IRQn
 = 55,

421 
DMA2_Ch™√l1_IRQn
 = 56,

422 
DMA2_Ch™√l2_IRQn
 = 57,

423 
DMA2_Ch™√l3_IRQn
 = 58,

424 
DMA2_Ch™√l4_5_IRQn
 = 59

427 #ifde‡
STM32F10X_CL


428 
ADC1_2_IRQn
 = 18,

429 
CAN1_TX_IRQn
 = 19,

430 
CAN1_RX0_IRQn
 = 20,

431 
CAN1_RX1_IRQn
 = 21,

432 
CAN1_SCE_IRQn
 = 22,

433 
EXTI9_5_IRQn
 = 23,

434 
TIM1_BRK_IRQn
 = 24,

435 
TIM1_UP_IRQn
 = 25,

436 
TIM1_TRG_COM_IRQn
 = 26,

437 
TIM1_CC_IRQn
 = 27,

438 
TIM2_IRQn
 = 28,

439 
TIM3_IRQn
 = 29,

440 
TIM4_IRQn
 = 30,

441 
I2C1_EV_IRQn
 = 31,

442 
I2C1_ER_IRQn
 = 32,

443 
I2C2_EV_IRQn
 = 33,

444 
I2C2_ER_IRQn
 = 34,

445 
SPI1_IRQn
 = 35,

446 
SPI2_IRQn
 = 36,

447 
USART1_IRQn
 = 37,

448 
USART2_IRQn
 = 38,

449 
USART3_IRQn
 = 39,

450 
EXTI15_10_IRQn
 = 40,

451 
RTCAœrm_IRQn
 = 41,

452 
OTG_FS_WKUP_IRQn
 = 42,

453 
TIM5_IRQn
 = 50,

454 
SPI3_IRQn
 = 51,

455 
UART4_IRQn
 = 52,

456 
UART5_IRQn
 = 53,

457 
TIM6_IRQn
 = 54,

458 
TIM7_IRQn
 = 55,

459 
DMA2_Ch™√l1_IRQn
 = 56,

460 
DMA2_Ch™√l2_IRQn
 = 57,

461 
DMA2_Ch™√l3_IRQn
 = 58,

462 
DMA2_Ch™√l4_IRQn
 = 59,

463 
DMA2_Ch™√l5_IRQn
 = 60,

464 
ETH_IRQn
 = 61,

465 
ETH_WKUP_IRQn
 = 62,

466 
CAN2_TX_IRQn
 = 63,

467 
CAN2_RX0_IRQn
 = 64,

468 
CAN2_RX1_IRQn
 = 65,

469 
CAN2_SCE_IRQn
 = 66,

470 
OTG_FS_IRQn
 = 67

472 } 
	tIRQn_Ty≥
;

478 
	~"c‹e_cm3.h
"

479 
	~"sy°em_°m32f10x.h
"

480 
	~<°döt.h
>

487 
öt32_t
 
	ts32
;

488 
öt16_t
 
	ts16
;

489 
öt8_t
 
	ts8
;

491 c⁄° 
	töt32_t
 
	tsc32
;

492 c⁄° 
	töt16_t
 
	tsc16
;

493 c⁄° 
	töt8_t
 
	tsc8
;

495 
__IO
 
	töt32_t
 
	tvs32
;

496 
__IO
 
	töt16_t
 
	tvs16
;

497 
__IO
 
	töt8_t
 
	tvs8
;

499 
__I
 
	töt32_t
 
	tvsc32
;

500 
__I
 
	töt16_t
 
	tvsc16
;

501 
__I
 
	töt8_t
 
	tvsc8
;

503 
uöt32_t
 
	tu32
;

504 
uöt16_t
 
	tu16
;

505 
uöt8_t
 
	tu8
;

507 c⁄° 
	tuöt32_t
 
	tuc32
;

508 c⁄° 
	tuöt16_t
 
	tuc16
;

509 c⁄° 
	tuöt8_t
 
	tuc8
;

511 
__IO
 
	tuöt32_t
 
	tvu32
;

512 
__IO
 
	tuöt16_t
 
	tvu16
;

513 
__IO
 
	tuöt8_t
 
	tvu8
;

515 
__I
 
	tuöt32_t
 
	tvuc32
;

516 
__I
 
	tuöt16_t
 
	tvuc16
;

517 
__I
 
	tuöt8_t
 
	tvuc8
;

519 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

521 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

522 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

524 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

527 
	#HSESèπUp_TimeOut
 
HSE_STARTUP_TIMEOUT


	)

528 
	#HSE_VÆue
 
HSE_VALUE


	)

529 
	#HSI_VÆue
 
HSI_VALUE


	)

544 
__IO
 
uöt32_t
 
SR
;

545 
__IO
 
uöt32_t
 
CR1
;

546 
__IO
 
uöt32_t
 
CR2
;

547 
__IO
 
uöt32_t
 
SMPR1
;

548 
__IO
 
uöt32_t
 
SMPR2
;

549 
__IO
 
uöt32_t
 
JOFR1
;

550 
__IO
 
uöt32_t
 
JOFR2
;

551 
__IO
 
uöt32_t
 
JOFR3
;

552 
__IO
 
uöt32_t
 
JOFR4
;

553 
__IO
 
uöt32_t
 
HTR
;

554 
__IO
 
uöt32_t
 
LTR
;

555 
__IO
 
uöt32_t
 
SQR1
;

556 
__IO
 
uöt32_t
 
SQR2
;

557 
__IO
 
uöt32_t
 
SQR3
;

558 
__IO
 
uöt32_t
 
JSQR
;

559 
__IO
 
uöt32_t
 
JDR1
;

560 
__IO
 
uöt32_t
 
JDR2
;

561 
__IO
 
uöt32_t
 
JDR3
;

562 
__IO
 
uöt32_t
 
JDR4
;

563 
__IO
 
uöt32_t
 
DR
;

564 } 
	tADC_Ty≥Def
;

572 
uöt32_t
 
RESERVED0
;

573 
__IO
 
uöt16_t
 
DR1
;

574 
uöt16_t
 
RESERVED1
;

575 
__IO
 
uöt16_t
 
DR2
;

576 
uöt16_t
 
RESERVED2
;

577 
__IO
 
uöt16_t
 
DR3
;

578 
uöt16_t
 
RESERVED3
;

579 
__IO
 
uöt16_t
 
DR4
;

580 
uöt16_t
 
RESERVED4
;

581 
__IO
 
uöt16_t
 
DR5
;

582 
uöt16_t
 
RESERVED5
;

583 
__IO
 
uöt16_t
 
DR6
;

584 
uöt16_t
 
RESERVED6
;

585 
__IO
 
uöt16_t
 
DR7
;

586 
uöt16_t
 
RESERVED7
;

587 
__IO
 
uöt16_t
 
DR8
;

588 
uöt16_t
 
RESERVED8
;

589 
__IO
 
uöt16_t
 
DR9
;

590 
uöt16_t
 
RESERVED9
;

591 
__IO
 
uöt16_t
 
DR10
;

592 
uöt16_t
 
RESERVED10
;

593 
__IO
 
uöt16_t
 
RTCCR
;

594 
uöt16_t
 
RESERVED11
;

595 
__IO
 
uöt16_t
 
CR
;

596 
uöt16_t
 
RESERVED12
;

597 
__IO
 
uöt16_t
 
CSR
;

598 
uöt16_t
 
RESERVED13
[5];

599 
__IO
 
uöt16_t
 
DR11
;

600 
uöt16_t
 
RESERVED14
;

601 
__IO
 
uöt16_t
 
DR12
;

602 
uöt16_t
 
RESERVED15
;

603 
__IO
 
uöt16_t
 
DR13
;

604 
uöt16_t
 
RESERVED16
;

605 
__IO
 
uöt16_t
 
DR14
;

606 
uöt16_t
 
RESERVED17
;

607 
__IO
 
uöt16_t
 
DR15
;

608 
uöt16_t
 
RESERVED18
;

609 
__IO
 
uöt16_t
 
DR16
;

610 
uöt16_t
 
RESERVED19
;

611 
__IO
 
uöt16_t
 
DR17
;

612 
uöt16_t
 
RESERVED20
;

613 
__IO
 
uöt16_t
 
DR18
;

614 
uöt16_t
 
RESERVED21
;

615 
__IO
 
uöt16_t
 
DR19
;

616 
uöt16_t
 
RESERVED22
;

617 
__IO
 
uöt16_t
 
DR20
;

618 
uöt16_t
 
RESERVED23
;

619 
__IO
 
uöt16_t
 
DR21
;

620 
uöt16_t
 
RESERVED24
;

621 
__IO
 
uöt16_t
 
DR22
;

622 
uöt16_t
 
RESERVED25
;

623 
__IO
 
uöt16_t
 
DR23
;

624 
uöt16_t
 
RESERVED26
;

625 
__IO
 
uöt16_t
 
DR24
;

626 
uöt16_t
 
RESERVED27
;

627 
__IO
 
uöt16_t
 
DR25
;

628 
uöt16_t
 
RESERVED28
;

629 
__IO
 
uöt16_t
 
DR26
;

630 
uöt16_t
 
RESERVED29
;

631 
__IO
 
uöt16_t
 
DR27
;

632 
uöt16_t
 
RESERVED30
;

633 
__IO
 
uöt16_t
 
DR28
;

634 
uöt16_t
 
RESERVED31
;

635 
__IO
 
uöt16_t
 
DR29
;

636 
uöt16_t
 
RESERVED32
;

637 
__IO
 
uöt16_t
 
DR30
;

638 
uöt16_t
 
RESERVED33
;

639 
__IO
 
uöt16_t
 
DR31
;

640 
uöt16_t
 
RESERVED34
;

641 
__IO
 
uöt16_t
 
DR32
;

642 
uöt16_t
 
RESERVED35
;

643 
__IO
 
uöt16_t
 
DR33
;

644 
uöt16_t
 
RESERVED36
;

645 
__IO
 
uöt16_t
 
DR34
;

646 
uöt16_t
 
RESERVED37
;

647 
__IO
 
uöt16_t
 
DR35
;

648 
uöt16_t
 
RESERVED38
;

649 
__IO
 
uöt16_t
 
DR36
;

650 
uöt16_t
 
RESERVED39
;

651 
__IO
 
uöt16_t
 
DR37
;

652 
uöt16_t
 
RESERVED40
;

653 
__IO
 
uöt16_t
 
DR38
;

654 
uöt16_t
 
RESERVED41
;

655 
__IO
 
uöt16_t
 
DR39
;

656 
uöt16_t
 
RESERVED42
;

657 
__IO
 
uöt16_t
 
DR40
;

658 
uöt16_t
 
RESERVED43
;

659 
__IO
 
uöt16_t
 
DR41
;

660 
uöt16_t
 
RESERVED44
;

661 
__IO
 
uöt16_t
 
DR42
;

662 
uöt16_t
 
RESERVED45
;

663 } 
	tBKP_Ty≥Def
;

671 
__IO
 
uöt32_t
 
TIR
;

672 
__IO
 
uöt32_t
 
TDTR
;

673 
__IO
 
uöt32_t
 
TDLR
;

674 
__IO
 
uöt32_t
 
TDHR
;

675 } 
	tCAN_TxMaûBox_Ty≥Def
;

683 
__IO
 
uöt32_t
 
RIR
;

684 
__IO
 
uöt32_t
 
RDTR
;

685 
__IO
 
uöt32_t
 
RDLR
;

686 
__IO
 
uöt32_t
 
RDHR
;

687 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

695 
__IO
 
uöt32_t
 
FR1
;

696 
__IO
 
uöt32_t
 
FR2
;

697 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

705 
__IO
 
uöt32_t
 
MCR
;

706 
__IO
 
uöt32_t
 
MSR
;

707 
__IO
 
uöt32_t
 
TSR
;

708 
__IO
 
uöt32_t
 
RF0R
;

709 
__IO
 
uöt32_t
 
RF1R
;

710 
__IO
 
uöt32_t
 
IER
;

711 
__IO
 
uöt32_t
 
ESR
;

712 
__IO
 
uöt32_t
 
BTR
;

713 
uöt32_t
 
RESERVED0
[88];

714 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

715 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

716 
uöt32_t
 
RESERVED1
[12];

717 
__IO
 
uöt32_t
 
FMR
;

718 
__IO
 
uöt32_t
 
FM1R
;

719 
uöt32_t
 
RESERVED2
;

720 
__IO
 
uöt32_t
 
FS1R
;

721 
uöt32_t
 
RESERVED3
;

722 
__IO
 
uöt32_t
 
FFA1R
;

723 
uöt32_t
 
RESERVED4
;

724 
__IO
 
uöt32_t
 
FA1R
;

725 
uöt32_t
 
RESERVED5
[8];

726 #i‚de‡
STM32F10X_CL


727 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

729 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

731 } 
	tCAN_Ty≥Def
;

738 
__IO
 
uöt32_t
 
CFGR
;

739 
__IO
 
uöt32_t
 
OAR
;

740 
__IO
 
uöt32_t
 
PRES
;

741 
__IO
 
uöt32_t
 
ESR
;

742 
__IO
 
uöt32_t
 
CSR
;

743 
__IO
 
uöt32_t
 
TXD
;

744 
__IO
 
uöt32_t
 
RXD
;

745 } 
	tCEC_Ty≥Def
;

753 
__IO
 
uöt32_t
 
DR
;

754 
__IO
 
uöt8_t
 
IDR
;

755 
uöt8_t
 
RESERVED0
;

756 
uöt16_t
 
RESERVED1
;

757 
__IO
 
uöt32_t
 
CR
;

758 } 
	tCRC_Ty≥Def
;

766 
__IO
 
uöt32_t
 
CR
;

767 
__IO
 
uöt32_t
 
SWTRIGR
;

768 
__IO
 
uöt32_t
 
DHR12R1
;

769 
__IO
 
uöt32_t
 
DHR12L1
;

770 
__IO
 
uöt32_t
 
DHR8R1
;

771 
__IO
 
uöt32_t
 
DHR12R2
;

772 
__IO
 
uöt32_t
 
DHR12L2
;

773 
__IO
 
uöt32_t
 
DHR8R2
;

774 
__IO
 
uöt32_t
 
DHR12RD
;

775 
__IO
 
uöt32_t
 
DHR12LD
;

776 
__IO
 
uöt32_t
 
DHR8RD
;

777 
__IO
 
uöt32_t
 
DOR1
;

778 
__IO
 
uöt32_t
 
DOR2
;

779 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

780 
__IO
 
uöt32_t
 
SR
;

782 } 
	tDAC_Ty≥Def
;

790 
__IO
 
uöt32_t
 
IDCODE
;

791 
__IO
 
uöt32_t
 
CR
;

792 }
	tDBGMCU_Ty≥Def
;

800 
__IO
 
uöt32_t
 
CCR
;

801 
__IO
 
uöt32_t
 
CNDTR
;

802 
__IO
 
uöt32_t
 
CPAR
;

803 
__IO
 
uöt32_t
 
CMAR
;

804 } 
	tDMA_Ch™√l_Ty≥Def
;

808 
__IO
 
uöt32_t
 
ISR
;

809 
__IO
 
uöt32_t
 
IFCR
;

810 } 
	tDMA_Ty≥Def
;

818 
__IO
 
uöt32_t
 
MACCR
;

819 
__IO
 
uöt32_t
 
MACFFR
;

820 
__IO
 
uöt32_t
 
MACHTHR
;

821 
__IO
 
uöt32_t
 
MACHTLR
;

822 
__IO
 
uöt32_t
 
MACMIIAR
;

823 
__IO
 
uöt32_t
 
MACMIIDR
;

824 
__IO
 
uöt32_t
 
MACFCR
;

825 
__IO
 
uöt32_t
 
MACVLANTR
;

826 
uöt32_t
 
RESERVED0
[2];

827 
__IO
 
uöt32_t
 
MACRWUFFR
;

828 
__IO
 
uöt32_t
 
MACPMTCSR
;

829 
uöt32_t
 
RESERVED1
[2];

830 
__IO
 
uöt32_t
 
MACSR
;

831 
__IO
 
uöt32_t
 
MACIMR
;

832 
__IO
 
uöt32_t
 
MACA0HR
;

833 
__IO
 
uöt32_t
 
MACA0LR
;

834 
__IO
 
uöt32_t
 
MACA1HR
;

835 
__IO
 
uöt32_t
 
MACA1LR
;

836 
__IO
 
uöt32_t
 
MACA2HR
;

837 
__IO
 
uöt32_t
 
MACA2LR
;

838 
__IO
 
uöt32_t
 
MACA3HR
;

839 
__IO
 
uöt32_t
 
MACA3LR
;

840 
uöt32_t
 
RESERVED2
[40];

841 
__IO
 
uöt32_t
 
MMCCR
;

842 
__IO
 
uöt32_t
 
MMCRIR
;

843 
__IO
 
uöt32_t
 
MMCTIR
;

844 
__IO
 
uöt32_t
 
MMCRIMR
;

845 
__IO
 
uöt32_t
 
MMCTIMR
;

846 
uöt32_t
 
RESERVED3
[14];

847 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

848 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

849 
uöt32_t
 
RESERVED4
[5];

850 
__IO
 
uöt32_t
 
MMCTGFCR
;

851 
uöt32_t
 
RESERVED5
[10];

852 
__IO
 
uöt32_t
 
MMCRFCECR
;

853 
__IO
 
uöt32_t
 
MMCRFAECR
;

854 
uöt32_t
 
RESERVED6
[10];

855 
__IO
 
uöt32_t
 
MMCRGUFCR
;

856 
uöt32_t
 
RESERVED7
[334];

857 
__IO
 
uöt32_t
 
PTPTSCR
;

858 
__IO
 
uöt32_t
 
PTPSSIR
;

859 
__IO
 
uöt32_t
 
PTPTSHR
;

860 
__IO
 
uöt32_t
 
PTPTSLR
;

861 
__IO
 
uöt32_t
 
PTPTSHUR
;

862 
__IO
 
uöt32_t
 
PTPTSLUR
;

863 
__IO
 
uöt32_t
 
PTPTSAR
;

864 
__IO
 
uöt32_t
 
PTPTTHR
;

865 
__IO
 
uöt32_t
 
PTPTTLR
;

866 
uöt32_t
 
RESERVED8
[567];

867 
__IO
 
uöt32_t
 
DMABMR
;

868 
__IO
 
uöt32_t
 
DMATPDR
;

869 
__IO
 
uöt32_t
 
DMARPDR
;

870 
__IO
 
uöt32_t
 
DMARDLAR
;

871 
__IO
 
uöt32_t
 
DMATDLAR
;

872 
__IO
 
uöt32_t
 
DMASR
;

873 
__IO
 
uöt32_t
 
DMAOMR
;

874 
__IO
 
uöt32_t
 
DMAIER
;

875 
__IO
 
uöt32_t
 
DMAMFBOCR
;

876 
uöt32_t
 
RESERVED9
[9];

877 
__IO
 
uöt32_t
 
DMACHTDR
;

878 
__IO
 
uöt32_t
 
DMACHRDR
;

879 
__IO
 
uöt32_t
 
DMACHTBAR
;

880 
__IO
 
uöt32_t
 
DMACHRBAR
;

881 } 
	tETH_Ty≥Def
;

889 
__IO
 
uöt32_t
 
IMR
;

890 
__IO
 
uöt32_t
 
EMR
;

891 
__IO
 
uöt32_t
 
RTSR
;

892 
__IO
 
uöt32_t
 
FTSR
;

893 
__IO
 
uöt32_t
 
SWIER
;

894 
__IO
 
uöt32_t
 
PR
;

895 } 
	tEXTI_Ty≥Def
;

903 
__IO
 
uöt32_t
 
ACR
;

904 
__IO
 
uöt32_t
 
KEYR
;

905 
__IO
 
uöt32_t
 
OPTKEYR
;

906 
__IO
 
uöt32_t
 
SR
;

907 
__IO
 
uöt32_t
 
CR
;

908 
__IO
 
uöt32_t
 
AR
;

909 
__IO
 
uöt32_t
 
RESERVED
;

910 
__IO
 
uöt32_t
 
OBR
;

911 
__IO
 
uöt32_t
 
WRPR
;

912 #ifde‡
STM32F10X_XL


913 
uöt32_t
 
RESERVED1
[8];

914 
__IO
 
uöt32_t
 
KEYR2
;

915 
uöt32_t
 
RESERVED2
;

916 
__IO
 
uöt32_t
 
SR2
;

917 
__IO
 
uöt32_t
 
CR2
;

918 
__IO
 
uöt32_t
 
AR2
;

920 } 
	tFLASH_Ty≥Def
;

928 
__IO
 
uöt16_t
 
RDP
;

929 
__IO
 
uöt16_t
 
USER
;

930 
__IO
 
uöt16_t
 
D©a0
;

931 
__IO
 
uöt16_t
 
D©a1
;

932 
__IO
 
uöt16_t
 
WRP0
;

933 
__IO
 
uöt16_t
 
WRP1
;

934 
__IO
 
uöt16_t
 
WRP2
;

935 
__IO
 
uöt16_t
 
WRP3
;

936 } 
	tOB_Ty≥Def
;

944 
__IO
 
uöt32_t
 
BTCR
[8];

945 } 
	tFSMC_B™k1_Ty≥Def
;

953 
__IO
 
uöt32_t
 
BWTR
[7];

954 } 
	tFSMC_B™k1E_Ty≥Def
;

962 
__IO
 
uöt32_t
 
PCR2
;

963 
__IO
 
uöt32_t
 
SR2
;

964 
__IO
 
uöt32_t
 
PMEM2
;

965 
__IO
 
uöt32_t
 
PATT2
;

966 
uöt32_t
 
RESERVED0
;

967 
__IO
 
uöt32_t
 
ECCR2
;

968 } 
	tFSMC_B™k2_Ty≥Def
;

976 
__IO
 
uöt32_t
 
PCR3
;

977 
__IO
 
uöt32_t
 
SR3
;

978 
__IO
 
uöt32_t
 
PMEM3
;

979 
__IO
 
uöt32_t
 
PATT3
;

980 
uöt32_t
 
RESERVED0
;

981 
__IO
 
uöt32_t
 
ECCR3
;

982 } 
	tFSMC_B™k3_Ty≥Def
;

990 
__IO
 
uöt32_t
 
PCR4
;

991 
__IO
 
uöt32_t
 
SR4
;

992 
__IO
 
uöt32_t
 
PMEM4
;

993 
__IO
 
uöt32_t
 
PATT4
;

994 
__IO
 
uöt32_t
 
PIO4
;

995 } 
	tFSMC_B™k4_Ty≥Def
;

1003 
__IO
 
uöt32_t
 
CRL
;

1004 
__IO
 
uöt32_t
 
CRH
;

1005 
__IO
 
uöt32_t
 
IDR
;

1006 
__IO
 
uöt32_t
 
ODR
;

1007 
__IO
 
uöt32_t
 
BSRR
;

1008 
__IO
 
uöt32_t
 
BRR
;

1009 
__IO
 
uöt32_t
 
LCKR
;

1010 } 
	tGPIO_Ty≥Def
;

1018 
__IO
 
uöt32_t
 
EVCR
;

1019 
__IO
 
uöt32_t
 
MAPR
;

1020 
__IO
 
uöt32_t
 
EXTICR
[4];

1021 
uöt32_t
 
RESERVED0
;

1022 
__IO
 
uöt32_t
 
MAPR2
;

1023 } 
	tAFIO_Ty≥Def
;

1030 
__IO
 
uöt16_t
 
CR1
;

1031 
uöt16_t
 
RESERVED0
;

1032 
__IO
 
uöt16_t
 
CR2
;

1033 
uöt16_t
 
RESERVED1
;

1034 
__IO
 
uöt16_t
 
OAR1
;

1035 
uöt16_t
 
RESERVED2
;

1036 
__IO
 
uöt16_t
 
OAR2
;

1037 
uöt16_t
 
RESERVED3
;

1038 
__IO
 
uöt16_t
 
DR
;

1039 
uöt16_t
 
RESERVED4
;

1040 
__IO
 
uöt16_t
 
SR1
;

1041 
uöt16_t
 
RESERVED5
;

1042 
__IO
 
uöt16_t
 
SR2
;

1043 
uöt16_t
 
RESERVED6
;

1044 
__IO
 
uöt16_t
 
CCR
;

1045 
uöt16_t
 
RESERVED7
;

1046 
__IO
 
uöt16_t
 
TRISE
;

1047 
uöt16_t
 
RESERVED8
;

1048 } 
	tI2C_Ty≥Def
;

1056 
__IO
 
uöt32_t
 
KR
;

1057 
__IO
 
uöt32_t
 
PR
;

1058 
__IO
 
uöt32_t
 
RLR
;

1059 
__IO
 
uöt32_t
 
SR
;

1060 } 
	tIWDG_Ty≥Def
;

1068 
__IO
 
uöt32_t
 
CR
;

1069 
__IO
 
uöt32_t
 
CSR
;

1070 } 
	tPWR_Ty≥Def
;

1078 
__IO
 
uöt32_t
 
CR
;

1079 
__IO
 
uöt32_t
 
CFGR
;

1080 
__IO
 
uöt32_t
 
CIR
;

1081 
__IO
 
uöt32_t
 
APB2RSTR
;

1082 
__IO
 
uöt32_t
 
APB1RSTR
;

1083 
__IO
 
uöt32_t
 
AHBENR
;

1084 
__IO
 
uöt32_t
 
APB2ENR
;

1085 
__IO
 
uöt32_t
 
APB1ENR
;

1086 
__IO
 
uöt32_t
 
BDCR
;

1087 
__IO
 
uöt32_t
 
CSR
;

1089 #ifde‡
STM32F10X_CL


1090 
__IO
 
uöt32_t
 
AHBRSTR
;

1091 
__IO
 
uöt32_t
 
CFGR2
;

1094 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1095 
uöt32_t
 
RESERVED0
;

1096 
__IO
 
uöt32_t
 
CFGR2
;

1098 } 
	tRCC_Ty≥Def
;

1106 
__IO
 
uöt16_t
 
CRH
;

1107 
uöt16_t
 
RESERVED0
;

1108 
__IO
 
uöt16_t
 
CRL
;

1109 
uöt16_t
 
RESERVED1
;

1110 
__IO
 
uöt16_t
 
PRLH
;

1111 
uöt16_t
 
RESERVED2
;

1112 
__IO
 
uöt16_t
 
PRLL
;

1113 
uöt16_t
 
RESERVED3
;

1114 
__IO
 
uöt16_t
 
DIVH
;

1115 
uöt16_t
 
RESERVED4
;

1116 
__IO
 
uöt16_t
 
DIVL
;

1117 
uöt16_t
 
RESERVED5
;

1118 
__IO
 
uöt16_t
 
CNTH
;

1119 
uöt16_t
 
RESERVED6
;

1120 
__IO
 
uöt16_t
 
CNTL
;

1121 
uöt16_t
 
RESERVED7
;

1122 
__IO
 
uöt16_t
 
ALRH
;

1123 
uöt16_t
 
RESERVED8
;

1124 
__IO
 
uöt16_t
 
ALRL
;

1125 
uöt16_t
 
RESERVED9
;

1126 } 
	tRTC_Ty≥Def
;

1134 
__IO
 
uöt32_t
 
POWER
;

1135 
__IO
 
uöt32_t
 
CLKCR
;

1136 
__IO
 
uöt32_t
 
ARG
;

1137 
__IO
 
uöt32_t
 
CMD
;

1138 
__I
 
uöt32_t
 
RESPCMD
;

1139 
__I
 
uöt32_t
 
RESP1
;

1140 
__I
 
uöt32_t
 
RESP2
;

1141 
__I
 
uöt32_t
 
RESP3
;

1142 
__I
 
uöt32_t
 
RESP4
;

1143 
__IO
 
uöt32_t
 
DTIMER
;

1144 
__IO
 
uöt32_t
 
DLEN
;

1145 
__IO
 
uöt32_t
 
DCTRL
;

1146 
__I
 
uöt32_t
 
DCOUNT
;

1147 
__I
 
uöt32_t
 
STA
;

1148 
__IO
 
uöt32_t
 
ICR
;

1149 
__IO
 
uöt32_t
 
MASK
;

1150 
uöt32_t
 
RESERVED0
[2];

1151 
__I
 
uöt32_t
 
FIFOCNT
;

1152 
uöt32_t
 
RESERVED1
[13];

1153 
__IO
 
uöt32_t
 
FIFO
;

1154 } 
	tSDIO_Ty≥Def
;

1162 
__IO
 
uöt16_t
 
CR1
;

1163 
uöt16_t
 
RESERVED0
;

1164 
__IO
 
uöt16_t
 
CR2
;

1165 
uöt16_t
 
RESERVED1
;

1166 
__IO
 
uöt16_t
 
SR
;

1167 
uöt16_t
 
RESERVED2
;

1168 
__IO
 
uöt16_t
 
DR
;

1169 
uöt16_t
 
RESERVED3
;

1170 
__IO
 
uöt16_t
 
CRCPR
;

1171 
uöt16_t
 
RESERVED4
;

1172 
__IO
 
uöt16_t
 
RXCRCR
;

1173 
uöt16_t
 
RESERVED5
;

1174 
__IO
 
uöt16_t
 
TXCRCR
;

1175 
uöt16_t
 
RESERVED6
;

1176 
__IO
 
uöt16_t
 
I2SCFGR
;

1177 
uöt16_t
 
RESERVED7
;

1178 
__IO
 
uöt16_t
 
I2SPR
;

1179 
uöt16_t
 
RESERVED8
;

1180 } 
	tSPI_Ty≥Def
;

1188 
__IO
 
uöt16_t
 
CR1
;

1189 
uöt16_t
 
RESERVED0
;

1190 
__IO
 
uöt16_t
 
CR2
;

1191 
uöt16_t
 
RESERVED1
;

1192 
__IO
 
uöt16_t
 
SMCR
;

1193 
uöt16_t
 
RESERVED2
;

1194 
__IO
 
uöt16_t
 
DIER
;

1195 
uöt16_t
 
RESERVED3
;

1196 
__IO
 
uöt16_t
 
SR
;

1197 
uöt16_t
 
RESERVED4
;

1198 
__IO
 
uöt16_t
 
EGR
;

1199 
uöt16_t
 
RESERVED5
;

1200 
__IO
 
uöt16_t
 
CCMR1
;

1201 
uöt16_t
 
RESERVED6
;

1202 
__IO
 
uöt16_t
 
CCMR2
;

1203 
uöt16_t
 
RESERVED7
;

1204 
__IO
 
uöt16_t
 
CCER
;

1205 
uöt16_t
 
RESERVED8
;

1206 
__IO
 
uöt16_t
 
CNT
;

1207 
uöt16_t
 
RESERVED9
;

1208 
__IO
 
uöt16_t
 
PSC
;

1209 
uöt16_t
 
RESERVED10
;

1210 
__IO
 
uöt16_t
 
ARR
;

1211 
uöt16_t
 
RESERVED11
;

1212 
__IO
 
uöt16_t
 
RCR
;

1213 
uöt16_t
 
RESERVED12
;

1214 
__IO
 
uöt16_t
 
CCR1
;

1215 
uöt16_t
 
RESERVED13
;

1216 
__IO
 
uöt16_t
 
CCR2
;

1217 
uöt16_t
 
RESERVED14
;

1218 
__IO
 
uöt16_t
 
CCR3
;

1219 
uöt16_t
 
RESERVED15
;

1220 
__IO
 
uöt16_t
 
CCR4
;

1221 
uöt16_t
 
RESERVED16
;

1222 
__IO
 
uöt16_t
 
BDTR
;

1223 
uöt16_t
 
RESERVED17
;

1224 
__IO
 
uöt16_t
 
DCR
;

1225 
uöt16_t
 
RESERVED18
;

1226 
__IO
 
uöt16_t
 
DMAR
;

1227 
uöt16_t
 
RESERVED19
;

1228 } 
	tTIM_Ty≥Def
;

1236 
__IO
 
uöt16_t
 
SR
;

1237 
uöt16_t
 
RESERVED0
;

1238 
__IO
 
uöt16_t
 
DR
;

1239 
uöt16_t
 
RESERVED1
;

1240 
__IO
 
uöt16_t
 
BRR
;

1241 
uöt16_t
 
RESERVED2
;

1242 
__IO
 
uöt16_t
 
CR1
;

1243 
uöt16_t
 
RESERVED3
;

1244 
__IO
 
uöt16_t
 
CR2
;

1245 
uöt16_t
 
RESERVED4
;

1246 
__IO
 
uöt16_t
 
CR3
;

1247 
uöt16_t
 
RESERVED5
;

1248 
__IO
 
uöt16_t
 
GTPR
;

1249 
uöt16_t
 
RESERVED6
;

1250 } 
	tUSART_Ty≥Def
;

1258 
__IO
 
uöt32_t
 
CR
;

1259 
__IO
 
uöt32_t
 
CFR
;

1260 
__IO
 
uöt32_t
 
SR
;

1261 } 
	tWWDG_Ty≥Def
;

1272 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1273 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1274 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1276 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1277 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1279 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1282 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1283 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

1284 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

1286 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1287 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1288 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1289 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1290 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1291 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1292 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1293 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1294 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1295 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1296 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1297 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1298 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1299 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1300 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1301 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1302 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1303 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1304 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1305 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1306 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1307 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1308 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1309 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1310 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1311 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1313 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1314 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1315 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

1316 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

1317 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1318 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1319 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

1320 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

1321 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1322 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

1323 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

1324 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1325 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1326 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1327 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1328 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1329 
	#TIM15_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1330 
	#TIM16_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1331 
	#TIM17_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1332 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4C00)

	)

1333 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1334 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1336 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

1338 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

1339 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

1340 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

1341 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

1342 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

1343 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

1344 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

1345 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

1346 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

1347 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

1348 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

1349 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

1350 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

1351 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

1352 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

1353 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

1355 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

1356 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

1358 
	#ETH_BASE
 (
AHBPERIPH_BASE
 + 0x8000)

	)

1359 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1360 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1361 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1362 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1364 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

1365 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

1366 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

1367 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

1368 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

1370 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

1380 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1381 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1382 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1383 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1384 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1385 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1386 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1387 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1388 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1389 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1390 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1391 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1392 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1393 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1394 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1395 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1396 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1397 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1398 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1399 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1400 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1401 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1402 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

1403 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1404 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1405 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

1406 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

1407 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1408 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1409 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1410 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1411 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1412 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1413 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1414 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1415 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1416 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1417 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1418 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1419 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1420 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1421 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1422 
	#TIM15
 ((
TIM_Ty≥Def
 *Ë
TIM15_BASE
)

	)

1423 
	#TIM16
 ((
TIM_Ty≥Def
 *Ë
TIM16_BASE
)

	)

1424 
	#TIM17
 ((
TIM_Ty≥Def
 *Ë
TIM17_BASE
)

	)

1425 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1426 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1427 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1428 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1429 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1430 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1431 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1432 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1433 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1434 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1435 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1436 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1437 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1438 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1439 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1440 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1441 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1442 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1443 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1444 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1445 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1446 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1447 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1448 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1449 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1450 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1451 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1452 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1453 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1478 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1482 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1486 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1495 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1496 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1497 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1498 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1499 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1501 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1502 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1503 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1504 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1507 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1508 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1509 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1510 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1511 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1512 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1513 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1514 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1516 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1520 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1521 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1522 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1523 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1532 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1535 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1538 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1541 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1544 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1547 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1550 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1553 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1556 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1559 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1562 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1565 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1568 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1571 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1574 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1577 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1580 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1583 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1586 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1589 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1592 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1595 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1598 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1601 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1604 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1607 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1610 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1613 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1616 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1619 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1622 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1625 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1628 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1631 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1634 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1637 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1640 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1643 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1646 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1649 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1652 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1655 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1658 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1659 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1660 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1661 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1664 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1665 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1668 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1669 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1670 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1671 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1672 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1681 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1682 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1683 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1684 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1685 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1686 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1687 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1688 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1689 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1690 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1692 #ifde‡
STM32F10X_CL


1693 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1694 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1695 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1696 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1701 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1702 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1703 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1705 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1706 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1707 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1710 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1711 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1712 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1714 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1715 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1716 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1719 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1720 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1721 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1722 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1723 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1725 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1726 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1727 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1728 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1729 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1730 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1731 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1732 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1733 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1736 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1737 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1738 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1739 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1741 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1742 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1743 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1744 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1745 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1748 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1749 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1750 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1751 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1753 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1754 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1755 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1756 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1757 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1760 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1761 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1762 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1764 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1765 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1766 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1767 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1769 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1771 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1774 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1775 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1776 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1777 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1778 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1780 #ifde‡
STM32F10X_CL


1781 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1782 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1784 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1785 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1787 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1788 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1789 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1790 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1791 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1792 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1793 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1795 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1798 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1799 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1800 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1801 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1802 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1804 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1805 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1806 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1807 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1808 
	#RCC_CFGR_MCO_PLLCLK_Div2
 ((
uöt32_t
)0x07000000Ë

	)

1809 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1810 
	#RCC_CFGR_MCO_PLL3CLK_Div2
 ((
uöt32_t
)0x09000000Ë

	)

1811 
	#RCC_CFGR_MCO_Ext_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1812 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1813 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1814 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1815 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1817 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1818 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1820 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1821 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1822 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1823 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1824 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1825 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1826 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1827 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1828 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1829 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1830 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1831 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1832 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1833 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1834 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1837 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1838 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1839 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1840 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1842 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1843 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1844 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1845 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1846 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1848 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1849 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

1851 
	#RCC_CFGR_PLLXTPRE_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1852 
	#RCC_CFGR_PLLXTPRE_HSE_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1854 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1855 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1856 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1857 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1858 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1859 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1860 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1861 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1862 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1863 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1864 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1865 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1866 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1867 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1868 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1869 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1872 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1873 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1874 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1875 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1877 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1878 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1879 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1880 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1881 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1885 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1886 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1887 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1888 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1889 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1890 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1891 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1892 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1893 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1894 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1895 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1896 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1897 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1898 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1899 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1900 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1901 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1903 #ifde‡
STM32F10X_CL


1904 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1905 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1906 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1907 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1908 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1909 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1913 
	#RCC_APB2RSTR_AFIORST
 ((
uöt32_t
)0x00000001Ë

	)

1914 
	#RCC_APB2RSTR_IOPARST
 ((
uöt32_t
)0x00000004Ë

	)

1915 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt32_t
)0x00000008Ë

	)

1916 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt32_t
)0x00000010Ë

	)

1917 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt32_t
)0x00000020Ë

	)

1918 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

1920 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

1921 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt32_t
)0x00000400Ë

	)

1924 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000800Ë

	)

1925 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

1926 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

1928 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1929 
	#RCC_APB2RSTR_TIM15RST
 ((
uöt32_t
)0x00010000Ë

	)

1930 
	#RCC_APB2RSTR_TIM16RST
 ((
uöt32_t
)0x00020000Ë

	)

1931 
	#RCC_APB2RSTR_TIM17RST
 ((
uöt32_t
)0x00040000Ë

	)

1934 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1935 
	#RCC_APB2RSTR_IOPERST
 ((
uöt32_t
)0x00000040Ë

	)

1938 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1939 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1940 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1941 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00002000Ë

	)

1942 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt32_t
)0x00008000Ë

	)

1945 #i‡
deföed
 (
STM32F10X_HD_VL
)

1946 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1947 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1950 #ifde‡
STM32F10X_XL


1951 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00080000Ë

	)

1952 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00100000Ë

	)

1953 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00200000Ë

	)

1957 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1958 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1959 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1960 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1961 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1963 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

1964 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1967 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1968 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1970 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1971 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1972 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1973 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1974 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1977 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
Ë|| deföed (
STM32F10X_XL
)

1978 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1981 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_XL
)

1982 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1983 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1984 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1985 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1986 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1987 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1988 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1991 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1992 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1993 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1994 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1995 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x40000000Ë

	)

1998 #i‡
deföed
 (
STM32F10X_HD_VL
)

1999 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

2000 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

2001 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

2002 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

2003 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

2004 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

2005 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

2008 #ifde‡
STM32F10X_CL


2009 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000Ë

	)

2012 #ifde‡
STM32F10X_XL


2013 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

2014 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

2015 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

2019 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

2020 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

2021 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

2022 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

2024 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_HD_VL
)

2025 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

2028 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

2029 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

2030 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

2033 #i‡
deföed
 (
STM32F10X_HD_VL
)

2034 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

2037 #ifde‡
STM32F10X_CL


2038 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

2039 
	#RCC_AHBENR_ETHMACEN
 ((
uöt32_t
)0x00004000Ë

	)

2040 
	#RCC_AHBENR_ETHMACTXEN
 ((
uöt32_t
)0x00008000Ë

	)

2041 
	#RCC_AHBENR_ETHMACRXEN
 ((
uöt32_t
)0x00010000Ë

	)

2045 
	#RCC_APB2ENR_AFIOEN
 ((
uöt32_t
)0x00000001Ë

	)

2046 
	#RCC_APB2ENR_IOPAEN
 ((
uöt32_t
)0x00000004Ë

	)

2047 
	#RCC_APB2ENR_IOPBEN
 ((
uöt32_t
)0x00000008Ë

	)

2048 
	#RCC_APB2ENR_IOPCEN
 ((
uöt32_t
)0x00000010Ë

	)

2049 
	#RCC_APB2ENR_IOPDEN
 ((
uöt32_t
)0x00000020Ë

	)

2050 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

2052 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

2053 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000400Ë

	)

2056 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

2057 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

2058 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

2060 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2061 
	#RCC_APB2ENR_TIM15EN
 ((
uöt32_t
)0x00010000Ë

	)

2062 
	#RCC_APB2ENR_TIM16EN
 ((
uöt32_t
)0x00020000Ë

	)

2063 
	#RCC_APB2ENR_TIM17EN
 ((
uöt32_t
)0x00040000Ë

	)

2066 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2067 
	#RCC_APB2ENR_IOPEEN
 ((
uöt32_t
)0x00000040Ë

	)

2070 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

2071 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

2072 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

2073 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00002000Ë

	)

2074 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00008000Ë

	)

2077 #i‡
deföed
 (
STM32F10X_HD_VL
)

2078 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

2079 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

2082 #ifde‡
STM32F10X_XL


2083 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00080000Ë

	)

2084 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00100000Ë

	)

2085 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00200000Ë

	)

2089 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

2090 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

2091 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

2092 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

2093 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

2095 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

2096 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

2099 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

2100 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

2102 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2103 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

2104 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

2105 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

2106 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

2109 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

2110 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

2113 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

2114 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2115 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2116 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2117 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2118 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2119 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2120 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2123 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2124 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2125 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2126 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2127 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x40000000Ë

	)

2130 #ifde‡
STM32F10X_HD_VL


2131 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2132 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2133 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2134 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2135 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2136 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2137 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2140 #ifde‡
STM32F10X_CL


2141 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000Ë

	)

2144 #ifde‡
STM32F10X_XL


2145 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2146 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2147 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2151 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

2152 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

2153 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

2155 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

2156 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

2157 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

2160 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

2161 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

2162 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

2163 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

2165 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

2166 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

2169 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

2170 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

2171 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

2172 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

2173 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

2174 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

2175 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

2176 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

2177 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

2179 #ifde‡
STM32F10X_CL


2181 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

2182 
	#RCC_AHBRSTR_ETHMACRST
 ((
uöt32_t
)0x00004000Ë

	)

2186 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2187 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2188 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2189 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2190 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2192 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2193 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2194 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2195 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2196 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2197 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2198 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2199 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2200 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2201 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2202 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2203 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2204 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2205 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2206 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2207 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2210 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

2211 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

2212 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

2213 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

2214 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

2216 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2217 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

2218 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

2219 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

2220 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

2221 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

2222 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

2223 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

2224 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

2225 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

2226 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

2227 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

2228 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

2229 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

2230 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

2231 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

2234 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

2235 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

2236 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

2237 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

2238 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

2240 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

2241 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

2242 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

2243 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

2244 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

2245 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

2246 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

2247 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

2248 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

2251 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

2252 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

2253 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

2254 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

2255 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

2257 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

2258 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

2259 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

2260 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

2261 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

2262 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

2263 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

2264 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

2265 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

2267 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

2268 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

2269 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

2270 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

2271 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

2274 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2277 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2278 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2279 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2280 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2281 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2283 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2284 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2285 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2286 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2287 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2288 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2289 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2290 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2291 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2292 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2293 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2294 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2295 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2296 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2297 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2298 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2308 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2310 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

2311 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

2312 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

2314 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

2315 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

2316 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

2318 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

2319 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

2320 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

2322 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

2323 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

2324 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

2326 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

2327 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

2328 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

2330 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

2331 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

2332 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

2334 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

2335 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

2336 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

2338 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

2339 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

2340 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

2342 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2344 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

2345 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

2346 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

2348 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

2349 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

2350 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

2352 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

2353 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

2354 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

2356 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

2357 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

2358 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

2360 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

2361 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

2362 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

2364 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

2365 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

2366 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

2368 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

2369 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

2370 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

2372 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

2373 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

2374 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

2377 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2379 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

2380 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

2381 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

2383 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

2384 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

2385 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

2387 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

2388 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

2389 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

2391 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

2392 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

2393 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

2395 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

2396 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

2397 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

2399 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

2400 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

2401 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

2403 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

2404 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

2405 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

2407 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

2408 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

2409 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

2411 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2413 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

2414 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

2415 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

2417 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

2418 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

2419 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

2421 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

2422 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

2423 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

2425 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

2426 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

2427 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

2429 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

2430 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

2431 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

2433 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

2434 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

2435 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

2437 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

2438 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

2439 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

2441 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

2442 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

2443 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

2446 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

2447 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

2448 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

2449 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

2450 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

2451 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

2452 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

2453 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

2454 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

2455 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

2456 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

2457 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

2458 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

2459 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

2460 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

2461 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

2464 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

2465 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

2466 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

2467 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

2468 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

2469 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

2470 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

2471 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

2472 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

2473 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

2474 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

2475 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

2476 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

2477 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

2478 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

2479 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

2482 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

2483 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

2484 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

2485 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

2486 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

2487 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

2488 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

2489 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

2490 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

2491 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

2492 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

2493 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

2494 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

2495 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

2496 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

2497 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

2499 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

2500 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

2501 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

2502 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

2503 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

2504 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

2505 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

2506 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

2507 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

2508 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

2509 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

2510 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

2511 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

2512 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

2513 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

2514 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

2517 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

2518 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

2519 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

2520 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

2521 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

2522 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

2523 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

2524 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

2525 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

2526 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

2527 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

2528 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

2529 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

2530 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

2531 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

2532 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

2535 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

2536 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

2537 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

2538 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

2539 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

2540 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

2541 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

2542 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

2543 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

2544 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

2545 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

2546 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

2547 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

2548 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

2549 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

2550 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

2551 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

2556 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

2557 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

2558 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

2559 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

2560 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

2563 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

2564 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

2565 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

2566 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

2567 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

2568 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

2569 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

2570 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

2571 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

2572 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

2573 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

2574 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

2575 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

2576 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

2577 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

2578 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

2580 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

2581 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

2582 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

2583 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

2586 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

2587 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

2588 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

2589 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

2590 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

2592 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

2595 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2596 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2597 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2598 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2600 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

2601 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

2602 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

2605 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2606 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

2607 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

2609 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2610 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

2611 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

2614 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2615 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

2616 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2618 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

2619 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

2620 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

2623 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2624 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

2625 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

2626 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

2628 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2629 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

2630 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

2633 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2634 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

2635 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2637 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2639 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

2640 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

2641 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

2644 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

2645 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

2646 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

2648 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

2649 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

2650 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

2651 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

2652 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

2653 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

2656 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

2657 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

2658 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

2659 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

2661 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

2662 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

2663 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

2664 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

2666 #ifde‡
STM32F10X_CL


2668 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

2671 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

2674 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

2677 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

2680 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

2683 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x40000000Ë

	)

2687 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

2688 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

2689 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

2690 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

2693 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

2694 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

2695 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

2696 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

2697 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

2698 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

2699 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

2702 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

2703 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

2704 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

2705 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

2706 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

2707 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

2708 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

2711 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

2712 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

2713 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

2714 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

2715 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

2716 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

2717 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

2720 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

2721 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

2722 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

2723 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

2724 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

2725 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

2726 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

2729 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

2730 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

2731 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

2732 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

2735 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

2736 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

2737 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

2738 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

2739 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

2740 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

2741 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

2744 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

2745 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

2746 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

2747 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

2748 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

2749 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

2750 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

2753 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

2754 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

2755 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

2756 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

2757 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

2758 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

2759 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

2762 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

2763 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

2764 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

2765 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

2766 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

2767 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

2768 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

2771 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

2772 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

2773 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

2774 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

2777 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

2778 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

2779 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

2780 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

2781 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

2782 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

2783 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

2786 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

2787 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

2788 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

2789 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

2790 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

2791 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

2792 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

2795 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

2796 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

2797 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

2798 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

2799 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

2800 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

2801 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

2804 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

2805 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

2806 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

2807 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

2808 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

2809 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

2810 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2813 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2814 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2815 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2816 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2819 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2820 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2821 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2822 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2823 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2824 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2825 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2828 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2829 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2830 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2831 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2832 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2833 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2834 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2837 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2838 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2839 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2840 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2841 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2842 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2843 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2846 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2847 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2848 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2849 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2850 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2851 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2852 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2854 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2856 
	#AFIO_MAPR2_TIM15_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2857 
	#AFIO_MAPR2_TIM16_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2858 
	#AFIO_MAPR2_TIM17_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2859 
	#AFIO_MAPR2_CEC_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2860 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 ((
uöt32_t
)0x00000010Ë

	)

2863 #ifde‡
STM32F10X_HD_VL


2864 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2865 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2866 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2867 
	#AFIO_MAPR2_TIM67_DAC_DMA_REMAP
 ((
uöt32_t
)0x00000800Ë

	)

2868 
	#AFIO_MAPR2_TIM12_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2869 
	#AFIO_MAPR2_MISC_REMAP
 ((
uöt32_t
)0x00002000Ë

	)

2872 #ifde‡
STM32F10X_XL


2874 
	#AFIO_MAPR2_TIM9_REMAP
 ((
uöt32_t
)0x00000020Ë

	)

2875 
	#AFIO_MAPR2_TIM10_REMAP
 ((
uöt32_t
)0x00000040Ë

	)

2876 
	#AFIO_MAPR2_TIM11_REMAP
 ((
uöt32_t
)0x00000080Ë

	)

2877 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2878 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2879 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2889 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2890 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2891 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2892 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2895 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2898 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2901 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2902 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2903 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2912 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2913 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2914 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2915 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2916 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2917 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2918 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2919 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2920 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2921 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2922 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2923 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2924 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2925 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2926 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2927 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2928 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2929 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2930 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2931 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2932 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2933 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2934 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2935 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2936 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2937 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2938 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2939 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2940 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2941 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2942 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2943 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2944 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2947 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2948 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2949 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2950 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2951 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2952 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2953 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2954 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2955 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2956 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2957 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2958 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2959 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2960 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2961 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2962 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2963 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2964 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2965 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2966 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2967 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2968 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2969 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2970 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2971 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2972 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2973 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2974 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2975 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2976 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2977 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2978 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2979 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2982 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2983 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2984 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2985 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2986 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2987 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2988 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2989 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2990 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2991 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2992 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2993 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2994 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2995 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2996 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2997 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2998 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2999 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

3000 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

3001 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

3002 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

3003 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

3004 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

3005 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

3006 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

3007 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

3008 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

3009 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

3010 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

3011 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

3012 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

3013 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

3014 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

3017 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

3018 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

3019 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

3020 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

3021 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

3022 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

3023 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

3024 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

3025 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

3026 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

3027 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

3028 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

3029 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

3030 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

3031 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

3032 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

3033 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

3034 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

3035 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

3036 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

3037 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

3038 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

3039 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

3040 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

3041 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

3042 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

3043 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

3044 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

3045 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

3046 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

3047 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

3048 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

3049 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

3052 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

3053 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

3054 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

3055 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

3056 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

3057 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

3058 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

3059 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

3060 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

3061 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

3062 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

3063 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

3064 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

3065 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

3066 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

3067 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

3068 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

3069 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

3070 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

3071 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

3072 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

3073 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

3074 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

3075 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

3076 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

3077 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

3078 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

3079 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

3080 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

3081 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

3082 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

3083 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

3084 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

3087 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

3088 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3089 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

3090 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

3093 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

3094 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

3095 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

3096 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

3099 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

3100 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

3101 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

3102 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

3105 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

3106 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

3107 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

3108 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

3111 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

3112 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

3113 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

3114 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

3117 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

3118 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

3119 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

3120 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

3123 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

3124 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

3125 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

3126 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

3129 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

3130 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

3131 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

3132 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

3135 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

3136 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

3137 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

3138 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

3139 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

3142 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

3143 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

3144 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

3145 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

3146 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

3147 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

3148 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

3149 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

3150 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

3151 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

3154 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

3155 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

3158 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

3159 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

3160 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

3162 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

3163 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

3164 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

3165 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

3168 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

3169 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

3170 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

3171 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

3172 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

3173 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

3174 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

3175 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

3177 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

3178 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

3181 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

3182 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

3183 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

3186 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

3187 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

3188 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

3189 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

3190 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

3191 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

3194 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

3195 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

3196 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

3197 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

3200 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

3201 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

3202 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

3203 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

3204 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

3205 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

3206 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

3207 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

3208 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

3209 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

3210 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

3211 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

3212 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

3213 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

3217 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

3218 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

3219 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

3220 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

3221 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

3223 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

3224 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

3225 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

3226 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

3227 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

3228 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

3230 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

3231 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

3232 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

3233 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

3234 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

3235 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

3238 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

3239 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

3240 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

3243 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

3244 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

3245 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

3246 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

3247 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

3250 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3253 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3256 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

3265 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3266 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3267 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3268 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3269 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3270 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3271 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3272 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3273 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3274 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3275 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3276 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3277 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3278 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3279 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3280 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3281 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3282 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3283 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3284 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3287 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3288 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3289 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3290 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3291 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3292 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3293 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3294 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3295 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3296 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3297 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3298 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3299 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3300 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3301 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3302 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3303 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3304 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3305 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3306 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3309 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3310 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3311 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3312 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3313 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3314 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3315 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3316 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3317 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3318 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3319 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3320 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3321 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3322 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3323 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3324 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3325 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3326 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3327 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3328 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3331 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3332 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3333 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3334 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3335 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3336 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3337 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3338 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3339 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3340 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3341 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3342 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3343 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3344 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3345 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3346 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3347 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3348 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3349 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3350 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3353 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3354 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3355 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3356 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3357 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3358 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3359 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3360 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3361 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3362 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3363 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3364 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3365 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3366 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3367 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3368 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3369 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3370 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3371 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3372 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3375 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3376 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3377 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3378 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3379 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3380 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3381 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3382 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3383 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3384 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3385 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3386 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3387 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3388 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3389 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3390 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3391 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3392 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3393 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3394 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3403 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

3404 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3405 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3406 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3407 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

3408 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3409 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3410 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3411 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

3412 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3413 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3414 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3415 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

3416 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3417 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3418 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3419 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3420 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3421 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3422 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3423 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3424 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3425 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3426 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3427 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3428 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3429 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3430 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3433 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3434 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3435 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3436 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3437 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3438 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3439 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3440 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3441 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3442 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3443 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3444 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3445 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3446 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3447 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3448 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3449 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3450 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3451 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3452 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3453 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3454 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3455 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3456 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3457 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3458 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3459 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3460 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3463 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

3464 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3465 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3466 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3467 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3468 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3469 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

3470 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

3472 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3473 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3474 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3476 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3477 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3478 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3480 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

3481 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3482 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3484 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3487 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

3488 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3489 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3490 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3491 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

3492 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3493 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

3494 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

3496 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3497 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3498 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3500 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3501 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3502 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3504 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

3505 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3506 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3508 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3511 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

3512 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3513 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3514 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3515 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

3516 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3517 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

3518 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

3520 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3521 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3522 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3524 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3525 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3526 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3528 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

3529 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3530 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3532 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3535 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

3536 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3537 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3538 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3539 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

3540 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3541 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

3542 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

3544 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3545 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3546 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3548 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3549 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3550 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3552 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

3553 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3554 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3556 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3559 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

3560 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3561 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3562 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3563 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

3564 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3565 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

3566 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

3568 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3569 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3570 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3572 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3573 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3574 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3576 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

3577 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3578 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3580 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3583 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

3584 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3585 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3586 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3587 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

3588 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3589 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

3590 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

3592 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3593 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3594 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3596 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3597 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3598 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3600 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

3601 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3602 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3604 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3607 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

3608 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3609 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3610 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3611 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

3612 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3613 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

3614 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

3616 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

3617 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3618 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3620 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3621 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3622 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3624 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

3625 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3626 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3628 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3631 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

3634 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

3637 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

3640 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

3643 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

3646 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

3649 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

3652 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3655 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3658 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3662 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3665 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3668 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3672 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3675 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3678 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3681 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3685 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3688 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3691 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3694 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3703 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

3704 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

3705 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

3706 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

3707 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

3710 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

3711 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

3712 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

3713 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

3714 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

3715 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

3717 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

3718 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

3719 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

3720 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

3721 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

3722 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

3723 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

3724 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

3726 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

3727 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

3728 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

3729 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

3731 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

3732 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

3733 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

3734 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

3735 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

3737 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

3738 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

3742 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

3743 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

3744 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

3745 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

3746 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

3747 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

3749 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

3750 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

3751 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

3752 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

3754 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

3756 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

3757 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

3758 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

3759 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

3761 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

3762 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

3763 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

3764 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

3767 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

3768 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

3769 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

3770 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

3772 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

3773 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

3774 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

3775 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

3777 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

3778 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

3779 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

3780 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

3782 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

3783 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

3784 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

3785 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

3787 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

3788 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

3789 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

3790 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

3792 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

3793 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

3794 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

3795 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

3797 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

3798 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

3799 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

3800 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

3802 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

3803 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

3804 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

3805 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

3808 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

3809 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

3810 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

3811 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

3813 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

3814 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

3815 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

3816 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

3818 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

3819 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

3820 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

3821 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

3823 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

3824 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

3825 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

3826 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

3828 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

3829 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

3830 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

3831 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

3833 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

3834 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

3835 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

3836 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

3838 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

3839 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

3840 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

3841 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

3843 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

3844 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3845 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3846 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3848 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3849 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3850 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3851 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3853 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3854 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3855 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3856 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3859 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3862 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3865 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3868 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3871 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3874 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3877 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3878 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3879 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3880 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3881 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3882 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3884 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3885 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3886 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3887 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3888 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3889 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3891 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3892 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3893 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3894 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3895 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3896 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3898 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3899 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3900 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3901 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3902 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3903 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3905 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3906 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3907 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3908 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3909 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3912 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3913 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3914 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3915 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3916 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3917 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3919 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3920 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3921 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3922 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3923 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3924 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3926 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3927 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3928 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3929 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3930 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3931 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3933 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3934 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3935 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3936 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3937 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3938 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3940 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3941 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3942 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3943 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3944 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3945 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3947 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3948 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3949 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3950 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3951 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3952 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3955 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3956 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3957 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3958 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3959 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3960 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3962 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3963 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3964 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3965 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3966 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3967 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3969 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3970 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3971 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3972 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3973 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3974 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3976 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3977 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3978 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3979 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3980 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3981 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3983 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3984 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3985 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3986 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3987 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3988 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3990 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3991 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3992 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3993 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3994 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3995 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3998 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3999 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

4000 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

4001 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

4002 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

4003 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

4005 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

4006 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

4007 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

4008 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

4009 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

4010 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

4012 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

4013 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

4014 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

4015 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

4016 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

4017 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

4019 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

4020 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

4021 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

4022 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

4023 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

4024 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

4026 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

4027 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

4028 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

4031 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4034 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4037 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4040 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4043 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

4044 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

4053 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

4054 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

4055 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

4057 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

4058 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

4059 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

4060 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

4062 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

4063 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

4064 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

4066 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

4067 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

4068 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

4069 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

4070 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

4072 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

4073 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

4074 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

4075 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

4077 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

4078 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

4079 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

4080 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

4082 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

4083 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

4084 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

4086 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

4087 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

4088 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

4089 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

4090 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

4092 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

4095 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

4096 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

4099 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

4102 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4105 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

4108 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

4111 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4114 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

4117 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

4118 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

4121 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

4122 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

4125 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

4126 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

4129 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

4132 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

4135 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

4136 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

4144 
	#CEC_CFGR_PE
 ((
uöt16_t
)0x0001Ë

	)

4145 
	#CEC_CFGR_IE
 ((
uöt16_t
)0x0002Ë

	)

4146 
	#CEC_CFGR_BTEM
 ((
uöt16_t
)0x0004Ë

	)

4147 
	#CEC_CFGR_BPEM
 ((
uöt16_t
)0x0008Ë

	)

4150 
	#CEC_OAR_OA
 ((
uöt16_t
)0x000FË

	)

4151 
	#CEC_OAR_OA_0
 ((
uöt16_t
)0x0001Ë

	)

4152 
	#CEC_OAR_OA_1
 ((
uöt16_t
)0x0002Ë

	)

4153 
	#CEC_OAR_OA_2
 ((
uöt16_t
)0x0004Ë

	)

4154 
	#CEC_OAR_OA_3
 ((
uöt16_t
)0x0008Ë

	)

4157 
	#CEC_PRES_PRES
 ((
uöt16_t
)0x3FFFË

	)

4160 
	#CEC_ESR_BTE
 ((
uöt16_t
)0x0001Ë

	)

4161 
	#CEC_ESR_BPE
 ((
uöt16_t
)0x0002Ë

	)

4162 
	#CEC_ESR_RBTFE
 ((
uöt16_t
)0x0004Ë

	)

4163 
	#CEC_ESR_SBE
 ((
uöt16_t
)0x0008Ë

	)

4164 
	#CEC_ESR_ACKE
 ((
uöt16_t
)0x0010Ë

	)

4165 
	#CEC_ESR_LINE
 ((
uöt16_t
)0x0020Ë

	)

4166 
	#CEC_ESR_TBTFE
 ((
uöt16_t
)0x0040Ë

	)

4169 
	#CEC_CSR_TSOM
 ((
uöt16_t
)0x0001Ë

	)

4170 
	#CEC_CSR_TEOM
 ((
uöt16_t
)0x0002Ë

	)

4171 
	#CEC_CSR_TERR
 ((
uöt16_t
)0x0004Ë

	)

4172 
	#CEC_CSR_TBTRF
 ((
uöt16_t
)0x0008Ë

	)

4173 
	#CEC_CSR_RSOM
 ((
uöt16_t
)0x0010Ë

	)

4174 
	#CEC_CSR_REOM
 ((
uöt16_t
)0x0020Ë

	)

4175 
	#CEC_CSR_RERR
 ((
uöt16_t
)0x0040Ë

	)

4176 
	#CEC_CSR_RBTF
 ((
uöt16_t
)0x0080Ë

	)

4179 
	#CEC_TXD_TXD
 ((
uöt16_t
)0x00FFË

	)

4182 
	#CEC_RXD_RXD
 ((
uöt16_t
)0x00FFË

	)

4191 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

4192 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

4193 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

4194 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

4195 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

4197 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

4198 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

4199 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

4201 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

4203 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

4204 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

4205 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

4208 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

4209 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

4210 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

4212 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

4213 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

4214 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

4215 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

4217 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

4218 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

4219 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

4220 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

4221 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

4222 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

4223 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

4224 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

4227 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

4228 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

4229 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

4230 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

4232 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

4233 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

4234 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

4235 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

4237 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

4239 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

4240 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

4241 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

4242 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

4243 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

4245 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

4246 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

4247 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

4249 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

4250 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

4253 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

4254 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

4255 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

4256 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

4257 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

4258 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

4259 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

4260 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

4261 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

4262 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

4263 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

4264 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

4265 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

4266 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

4267 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

4270 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

4271 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

4272 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

4273 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

4274 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

4275 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

4276 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

4277 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

4278 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

4279 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

4280 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

4281 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

4284 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

4285 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

4286 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

4287 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

4288 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

4289 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

4290 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

4291 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

4294 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

4295 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

4296 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

4298 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

4299 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

4301 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

4302 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

4303 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

4304 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

4306 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

4308 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

4309 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

4310 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

4312 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

4313 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

4315 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

4316 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

4317 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

4318 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

4320 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

4324 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

4325 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4326 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4328 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

4329 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

4330 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

4331 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

4332 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

4334 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

4335 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4336 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4338 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

4339 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

4340 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

4341 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

4342 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

4345 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

4346 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

4347 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

4349 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

4350 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

4352 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

4353 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

4354 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

4355 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

4357 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

4359 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

4360 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

4361 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

4363 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

4364 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

4366 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

4367 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

4368 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

4369 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

4371 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

4375 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

4376 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4377 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4379 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

4380 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

4381 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

4382 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

4383 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

4385 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

4386 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4387 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4389 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

4390 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

4391 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

4392 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

4393 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

4396 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

4397 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

4398 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

4399 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

4400 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

4401 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

4402 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

4403 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

4404 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

4405 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

4406 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

4407 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

4408 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

4409 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

4410 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

4413 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

4416 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

4419 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

4422 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

4425 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

4428 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

4431 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

4434 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

4437 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

4438 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

4439 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

4440 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

4441 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

4442 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

4443 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

4444 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

4445 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

4447 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

4448 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

4449 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

4451 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

4452 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

4453 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

4454 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

4455 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

4456 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

4459 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

4460 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

4461 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

4462 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

4463 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

4464 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

4466 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

4467 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

4468 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

4469 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

4470 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

4471 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

4474 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

4483 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

4484 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

4485 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

4488 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

4489 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

4490 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

4491 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

4492 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

4493 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

4496 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

4499 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

4502 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

4505 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

4508 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4511 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4514 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4517 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4526 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4529 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4530 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4531 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4532 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4535 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4538 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4539 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4548 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

4549 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

4550 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

4551 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

4552 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

4553 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

4554 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

4555 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

4557 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

4560 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

4561 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

4562 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

4563 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

4564 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

4565 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

4566 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

4567 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

4569 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

4570 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

4571 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

4573 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

4576 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

4585 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4586 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4588 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4589 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4590 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4592 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4593 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4594 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4596 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4597 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4598 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4599 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4600 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4601 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4602 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4603 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4604 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4605 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4608 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4609 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4611 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4612 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4613 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4615 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4616 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4617 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4619 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4620 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4621 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4622 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4623 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4624 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4625 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4626 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4627 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4628 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4631 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4632 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4634 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4635 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4636 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4638 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4639 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4640 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4642 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4643 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4644 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4645 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4646 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4647 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4648 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4649 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4650 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4651 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4654 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4655 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4657 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4658 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4659 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4661 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4662 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4663 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4665 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4666 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4667 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4668 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4669 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4670 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4671 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4672 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4673 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4674 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4677 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4678 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4679 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4680 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4681 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4683 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4684 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4685 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4686 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4687 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4689 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4690 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4691 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4692 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4693 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4695 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4696 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4697 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4698 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4699 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4701 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4702 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4703 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4704 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4705 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4707 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4708 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4709 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4710 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4711 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4713 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4714 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4715 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4718 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4719 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4720 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4721 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4722 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4724 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4725 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4726 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4727 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4728 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4730 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4731 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4732 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4733 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4734 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4736 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4737 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4738 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4739 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4740 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4742 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4743 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4744 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4745 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4746 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4748 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4749 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4750 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4751 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4752 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4754 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4755 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4756 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4759 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4760 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4761 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4762 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4763 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4765 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4766 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4767 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4768 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4769 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4771 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4772 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4773 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4774 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4775 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4777 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4778 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4779 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4780 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4781 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4783 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4784 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4785 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4786 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4787 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4789 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4790 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4791 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4792 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4793 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4795 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4796 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4797 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4800 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4801 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4802 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4803 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4804 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4806 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4807 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4808 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4809 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4810 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4812 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4813 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4814 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4815 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4816 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4818 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4819 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4820 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4821 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4822 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4824 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4825 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4826 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4827 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4828 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4830 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4831 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4832 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4833 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4834 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4836 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4837 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4838 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4841 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4842 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4843 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4844 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4845 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4847 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4848 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4849 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4850 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4851 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4853 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4854 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4855 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4856 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4857 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4859 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4860 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4861 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4862 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4863 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4865 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4866 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4867 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4868 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4869 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4871 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4872 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4873 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4876 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4877 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4878 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4879 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4880 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4882 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4883 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4884 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4885 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4886 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4888 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4889 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4890 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4891 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4892 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4894 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4895 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4896 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4897 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4898 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4900 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4901 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4902 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4903 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4904 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4906 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4907 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4908 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4911 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4912 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4913 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4914 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4915 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4917 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4918 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4919 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4920 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4921 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4923 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4924 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4925 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4926 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4927 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4929 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4930 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4931 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4932 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4933 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4935 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4936 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4937 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4938 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4939 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4941 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4942 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4943 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4946 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4947 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4948 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4949 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4950 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4952 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4953 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4954 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4955 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4956 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4958 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4959 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4960 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4961 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4962 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4964 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4965 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4966 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4967 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4968 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4970 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4971 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4972 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4973 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4974 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4976 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4977 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4978 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4981 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4982 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4983 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4985 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4986 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4987 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4989 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4991 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4992 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4993 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4994 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4995 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4997 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4998 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4999 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5000 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5001 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5003 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5004 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5005 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5006 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5009 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5010 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5011 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5013 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5014 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5015 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5017 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5019 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5020 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5021 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5022 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5023 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5025 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5026 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5027 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5028 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5029 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5031 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5032 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5033 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5034 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5037 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5038 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5039 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5041 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5042 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5043 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5045 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5047 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5048 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5049 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5050 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5051 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5053 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5054 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5055 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5056 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5057 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5059 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5060 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5061 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5062 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5065 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5066 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5067 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5068 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5069 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5070 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5071 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5074 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5075 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5076 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5077 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5078 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5079 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5080 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5083 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5084 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5085 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5086 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5087 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5088 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5089 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5092 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5093 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5094 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5095 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5096 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5097 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5098 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5099 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5100 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5102 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5103 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5104 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5105 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5106 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5107 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5108 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5109 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5110 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5112 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5113 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5114 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5115 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5116 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5117 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5118 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5119 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5120 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5122 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5123 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5124 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5125 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5126 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5127 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5128 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5129 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5130 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5133 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5134 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5135 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5136 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5137 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5138 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5139 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5140 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5141 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5143 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5144 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5145 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5146 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5147 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5148 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5149 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5150 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5151 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5153 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5154 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5155 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5156 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5157 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5158 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5159 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5160 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5161 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5163 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5164 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5165 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5166 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5167 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5168 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5169 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5170 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5171 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5174 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5175 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5176 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5177 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5178 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5179 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5180 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5181 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5182 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5184 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5185 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5186 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5187 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5188 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5189 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5190 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5191 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5192 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5194 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5195 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5196 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5197 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5198 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5199 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5200 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5201 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5202 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5204 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5205 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5206 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5207 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5208 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5209 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5210 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5211 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5212 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5215 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5216 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5217 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5218 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5219 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5220 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5221 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5222 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5223 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5225 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5226 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5227 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5228 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5229 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5230 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5231 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5232 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5233 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5235 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5236 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5237 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5238 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5239 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5240 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5241 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5242 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5243 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5245 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5246 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5247 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5248 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5249 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5250 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5251 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5252 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5253 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5256 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5257 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5258 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5259 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5260 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5261 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5262 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5263 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5264 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5266 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5267 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5268 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5269 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5270 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5271 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5272 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5273 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5274 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5276 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5277 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5278 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5279 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5280 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5281 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5282 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5283 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5284 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5286 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5287 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5288 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5289 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5290 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5291 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5292 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5293 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5294 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5297 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5298 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5299 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5300 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5301 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5302 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5303 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5304 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5305 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5307 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5308 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5309 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5310 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5311 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5312 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5313 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5314 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5315 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5317 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5318 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5319 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5320 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5321 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5322 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5323 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5324 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5325 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5327 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5328 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5329 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5330 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5331 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5332 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5333 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5334 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5335 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5338 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5339 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5340 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5341 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5342 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5343 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5344 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5345 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5346 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5348 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5349 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5350 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5351 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5352 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5353 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5354 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5355 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5356 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5358 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5359 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5360 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5361 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5362 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5363 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5364 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5365 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5366 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5368 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5369 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5370 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5371 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5372 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5373 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5374 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5375 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5376 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5379 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5382 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5391 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

5392 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

5393 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

5396 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

5397 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

5398 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

5399 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

5401 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

5402 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

5403 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

5405 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

5406 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

5409 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

5412 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

5414 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

5415 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

5416 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

5418 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

5419 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

5420 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

5421 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

5422 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

5423 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

5424 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

5427 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

5430 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

5433 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

5436 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5439 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5442 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

5445 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

5448 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

5451 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

5452 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

5453 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

5454 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

5456 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

5457 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

5458 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

5459 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

5460 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

5462 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

5463 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

5464 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

5465 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

5468 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

5471 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

5472 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

5473 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5474 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5475 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5476 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5477 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5478 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5479 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5480 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5481 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5482 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5483 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5484 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5485 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5486 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5487 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5488 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5489 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5490 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5491 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5492 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5493 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5494 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5497 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5498 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5499 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5500 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5501 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5502 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5503 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5504 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5505 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5506 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5507 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5508 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5509 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5512 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5513 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5514 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5515 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5516 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5517 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5518 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5519 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5520 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5521 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5522 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5523 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5524 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5525 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5526 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5527 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5528 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5529 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5530 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5531 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5532 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5533 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5534 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5535 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5538 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5541 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5551 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5553 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5554 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5555 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5557 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5558 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5559 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5561 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5562 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5563 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5565 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5567 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5568 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5569 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5571 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5572 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5575 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5577 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5578 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5579 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5581 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5582 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5583 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5585 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5586 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5587 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5589 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5591 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5592 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5593 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5595 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5596 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5599 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5601 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5602 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5603 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5605 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5606 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5607 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5609 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5610 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5611 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5613 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5615 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5616 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5617 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5619 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5620 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5623 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5625 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5626 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5627 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5629 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5630 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5631 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5633 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5634 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5635 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5637 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5639 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5640 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5641 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5643 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5644 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5647 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5649 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5650 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5651 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5653 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5654 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5655 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5657 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5658 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5659 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5661 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5663 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5664 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5665 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5667 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5668 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5671 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5673 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5674 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5675 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5677 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5678 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5679 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5681 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5682 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5683 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5685 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5687 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5688 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5689 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5691 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5692 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5695 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5697 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5698 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5699 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5701 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5702 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5703 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5705 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5706 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5707 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5709 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5711 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5712 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5713 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5715 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5716 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5719 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5721 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5722 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5723 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5725 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5726 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5727 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5729 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5730 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5731 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5733 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5735 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5736 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5737 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5739 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5740 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5744 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5745 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5746 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5747 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5748 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5749 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5750 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5751 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5752 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5753 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5754 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5755 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5756 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5759 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5760 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5761 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5762 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5763 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5764 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5765 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5766 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5767 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5768 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5771 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5772 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5773 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5774 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5775 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5778 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5779 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5780 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5781 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5782 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5783 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5784 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5785 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5787 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5790 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5794 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5797 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5800 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5803 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5806 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5809 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5812 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5815 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5820 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5823 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5826 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5829 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5832 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5835 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5838 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5841 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5846 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5849 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5852 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5855 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5858 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5861 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5864 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5867 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5870 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5873 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5876 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5879 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5882 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5885 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5888 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5891 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5896 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5899 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5902 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5905 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5908 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5911 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5914 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5917 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5922 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5924 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5925 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5926 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5927 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5928 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5929 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5931 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5934 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5936 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5937 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5938 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5939 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5940 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5941 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5943 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5946 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5948 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5949 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5950 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5951 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5952 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5953 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5955 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5958 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5960 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5961 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5962 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5963 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5964 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5965 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5967 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5970 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5972 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5973 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5974 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5975 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5976 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5977 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5979 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5982 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5984 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5985 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5986 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5987 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5988 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5989 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5991 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5994 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5996 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5997 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5998 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5999 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

6000 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

6001 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

6003 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

6006 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

6008 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

6009 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

6010 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

6011 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

6012 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

6013 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

6015 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

6020 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6022 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6023 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6024 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6025 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6026 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6027 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6029 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6032 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6034 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6035 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6036 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6037 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6038 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6039 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6041 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6044 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6046 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6047 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6048 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6049 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6050 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6051 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6053 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6056 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6058 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6059 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6060 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6061 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6062 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6063 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6065 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6068 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6070 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6071 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6072 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6073 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6074 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6075 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6077 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6080 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6082 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6083 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6084 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6085 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6086 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6087 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6089 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6092 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6094 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6095 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6096 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6097 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6098 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6099 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6101 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6104 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6106 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6107 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6108 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6109 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6110 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6111 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6113 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6116 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6118 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6119 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6120 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6121 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6122 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6123 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6125 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6128 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6130 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6131 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6132 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6133 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6134 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6135 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6137 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6140 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6142 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6143 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6144 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6145 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6146 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6147 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6149 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6152 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6154 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6155 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6156 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6157 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6158 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6159 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6161 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6164 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6166 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6167 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6168 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6169 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6170 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6171 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6173 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6176 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6178 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6179 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6180 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6181 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6182 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6183 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6185 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6188 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6190 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6191 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6192 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6193 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6194 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6195 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6197 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6200 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6202 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6203 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6204 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6205 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6206 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6207 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6209 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6219 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

6220 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

6221 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

6222 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

6223 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

6224 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

6225 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

6226 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

6227 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

6230 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

6231 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

6232 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

6233 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

6234 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

6235 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

6236 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

6237 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

6238 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

6241 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

6242 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

6243 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

6244 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

6245 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

6246 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

6247 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

6248 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

6249 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

6250 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

6251 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

6252 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

6253 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

6254 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

6255 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

6256 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

6258 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

6259 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

6260 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

6261 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

6263 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

6264 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

6265 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

6266 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

6269 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

6270 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

6271 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

6272 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

6275 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

6276 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

6277 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

6278 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

6281 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

6282 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

6283 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

6284 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

6285 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

6286 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

6287 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

6288 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

6289 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

6290 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

6291 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

6292 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

6293 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

6294 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

6297 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

6298 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

6299 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

6301 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

6302 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

6303 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

6304 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

6306 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

6307 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

6310 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

6311 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

6312 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

6313 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

6314 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

6315 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

6319 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6320 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6321 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6322 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6323 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6326 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6327 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6328 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6331 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6332 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6333 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6334 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6337 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6338 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6339 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6340 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6343 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6344 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6345 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6346 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6347 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6350 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6351 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6352 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6355 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6356 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6357 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6358 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6361 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6362 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6363 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6364 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6367 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6368 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6369 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6370 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6371 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6374 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6375 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6376 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6379 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6380 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6381 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6382 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6385 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6386 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6387 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6388 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6391 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6392 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6393 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6394 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6397 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6398 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6399 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6402 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6403 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6404 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6405 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6408 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6409 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6410 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6411 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6414 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6415 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6416 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6417 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6420 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6421 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6422 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6425 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6426 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6427 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6428 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6431 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6432 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6433 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6434 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6438 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

6441 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

6442 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

6443 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

6444 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

6445 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

6446 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

6447 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

6448 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

6449 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

6450 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

6451 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

6452 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

6453 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

6454 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

6455 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

6458 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

6459 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

6460 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

6461 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

6462 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

6463 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

6464 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

6465 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

6466 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

6467 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

6468 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

6469 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

6470 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

6471 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

6472 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

6475 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

6476 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

6477 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

6478 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

6479 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

6480 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

6481 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

6482 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

6483 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

6484 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

6485 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

6486 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

6487 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

6488 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

6489 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

6492 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

6493 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

6494 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

6495 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

6496 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

6497 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

6498 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

6499 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

6500 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

6501 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

6502 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

6503 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

6504 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

6505 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

6506 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

6509 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6510 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6511 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6512 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6513 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6514 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6515 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6516 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6517 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6518 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6519 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6520 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6521 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6522 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6523 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6524 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6525 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6526 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6527 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6528 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6529 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6530 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6531 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6532 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6533 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6534 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6535 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6536 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6537 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6538 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6539 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6540 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6543 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6544 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6545 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6546 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6547 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6548 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6549 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6550 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6551 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6552 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6553 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6554 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6555 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6556 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6557 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6558 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6559 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6560 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6561 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6562 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6563 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6564 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6565 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6566 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6567 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6568 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6569 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6570 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6571 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6572 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6573 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6574 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6577 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6578 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6579 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6580 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6581 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6582 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6583 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6584 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6585 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6586 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6587 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6588 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6589 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6590 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6591 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6592 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6593 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6594 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6595 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6596 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6597 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6598 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6599 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6600 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6601 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6602 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6603 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6604 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6605 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6606 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6607 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6608 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6611 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6612 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6613 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6614 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6615 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6616 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6617 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6618 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6619 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6620 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6621 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6622 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6623 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6624 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6625 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6626 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6627 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6628 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6629 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6630 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6631 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6632 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6633 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6634 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6635 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6636 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6637 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6638 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6639 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6640 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6641 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6642 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6645 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6646 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6647 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6648 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6649 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6650 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6651 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6652 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6653 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6654 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6655 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6656 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6657 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6658 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6659 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6660 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6661 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6662 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6663 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6664 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6665 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6666 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6667 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6668 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6669 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6670 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6671 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6672 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6673 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6674 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6675 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6676 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6679 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6680 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6681 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6682 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6683 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6684 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6685 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6686 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6687 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6688 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6689 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6690 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6691 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6692 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6693 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6694 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6695 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6696 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6697 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6698 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6699 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6700 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6701 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6702 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6703 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6704 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6705 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6706 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6707 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6708 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6709 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6710 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6713 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6714 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6715 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6716 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6717 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6718 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6719 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6720 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6721 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6722 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6723 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6724 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6725 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6726 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6727 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6728 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6729 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6730 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6731 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6732 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6733 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6734 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6735 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6736 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6737 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6738 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6739 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6740 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6741 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6742 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6743 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6744 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6747 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6748 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6749 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6750 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6751 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6752 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6753 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6754 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6755 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6756 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6757 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6758 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6759 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6760 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6761 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6762 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6763 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6764 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6765 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6766 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6767 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6768 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6769 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6770 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6771 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6772 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6773 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6774 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6775 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6776 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6777 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6778 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6781 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6782 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6783 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6784 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6785 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6786 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6787 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6788 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6789 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6790 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6791 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6792 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6793 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6794 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6795 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6796 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6797 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6798 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6799 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6800 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6801 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6802 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6803 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6804 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6805 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6806 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6807 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6808 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6809 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6810 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6811 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6812 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6815 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6816 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6817 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6818 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6819 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6820 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6821 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6822 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6823 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6824 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6825 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6826 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6827 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6828 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6829 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6830 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6831 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6832 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6833 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6834 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6835 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6836 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6837 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6838 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6839 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6840 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6841 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6842 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6843 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6844 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6845 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6846 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6849 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6850 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6851 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6852 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6853 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6854 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6855 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6856 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6857 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6858 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6859 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6860 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6861 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6862 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6863 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6864 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6865 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6866 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6867 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6868 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6869 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6870 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6871 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6872 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6873 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6874 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6875 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6876 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6877 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6878 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6879 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6880 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6883 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6884 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6885 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6886 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6887 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6888 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6889 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6890 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6891 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6892 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6893 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6894 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6895 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6896 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6897 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6898 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6899 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6900 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6901 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6902 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6903 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6904 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6905 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6906 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6907 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6908 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6909 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6910 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6911 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6912 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6913 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6914 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6917 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6918 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6919 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6920 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6921 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6922 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6923 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6924 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6925 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6926 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6927 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6928 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6929 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6930 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6931 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6932 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6933 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6934 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6935 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6936 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6937 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6938 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6939 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6940 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6941 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6942 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6943 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6944 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6945 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6946 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6947 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6948 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6951 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6952 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6953 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6954 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6955 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6956 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6957 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6958 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6959 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6960 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6961 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6962 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6963 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6964 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6965 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6966 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6967 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6968 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6969 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6970 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6971 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6972 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6973 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6974 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6975 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6976 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6977 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6978 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6979 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6980 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6981 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6982 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6985 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6986 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6987 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6988 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6989 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6990 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6991 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6992 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6993 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6994 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6995 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6996 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6997 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6998 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6999 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7000 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7001 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7002 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7003 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7004 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7005 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7006 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7007 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7008 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7009 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7010 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7011 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7012 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7013 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7014 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7015 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7016 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7019 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7020 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7021 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7022 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7023 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7024 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7025 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7026 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7027 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7028 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7029 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7030 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7031 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7032 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7033 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7034 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7035 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7036 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7037 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7038 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7039 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7040 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7041 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7042 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7043 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7044 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7045 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7046 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7047 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7048 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7049 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7050 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7053 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7054 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7055 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7056 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7057 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7058 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7059 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7060 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7061 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7062 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7063 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7064 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7065 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7066 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7067 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7068 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7069 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7070 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7071 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7072 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7073 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7074 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7075 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7076 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7077 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7078 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7079 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7080 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7081 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7082 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7083 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7084 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7087 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7088 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7089 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7090 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7091 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7092 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7093 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7094 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7095 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7096 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7097 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7098 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7099 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7100 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7101 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7102 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7103 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7104 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7105 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7106 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7107 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7108 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7109 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7110 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7111 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7112 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7113 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7114 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7115 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7116 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7117 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7118 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7121 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7122 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7123 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7124 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7125 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7126 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7127 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7128 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7129 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7130 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7131 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7132 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7133 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7134 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7135 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7136 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7137 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7138 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7139 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7140 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7141 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7142 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7143 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7144 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7145 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7146 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7147 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7148 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7149 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7150 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7151 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7152 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7155 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7156 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7157 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7158 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7159 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7160 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7161 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7162 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7163 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7164 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7165 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7166 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7167 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7168 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7169 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7170 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7171 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7172 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7173 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7174 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7175 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7176 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7177 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7178 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7179 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7180 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7181 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7182 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7183 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7184 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7185 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7186 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7189 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7190 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7191 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7192 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7193 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7194 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7195 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7196 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7197 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7198 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7199 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7200 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7201 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7202 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7203 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7204 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7205 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7206 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7207 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7208 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7209 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7210 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7211 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7212 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7213 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7214 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7215 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7216 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7217 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7218 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7219 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7220 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7223 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7224 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7225 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7226 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7227 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7228 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7229 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7230 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7231 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7232 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7233 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7234 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7235 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7236 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7237 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7238 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7239 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7240 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7241 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7242 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7243 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7244 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7245 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7246 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7247 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7248 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7249 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7250 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7251 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7252 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7253 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7254 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7257 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7258 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7259 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7260 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7261 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7262 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7263 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7264 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7265 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7266 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7267 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7268 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7269 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7270 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7271 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7272 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7273 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7274 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7275 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7276 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7277 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7278 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7279 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7280 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7281 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7282 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7283 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7284 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7285 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7286 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7287 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7288 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7291 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7292 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7293 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7294 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7295 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7296 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7297 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7298 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7299 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7300 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7301 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7302 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7303 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7304 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7305 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7306 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7307 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7308 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7309 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7310 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7311 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7312 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7313 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7314 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7315 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7316 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7317 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7318 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7319 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7320 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7321 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7322 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7325 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7326 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7327 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7328 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7329 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7330 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7331 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7332 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7333 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7334 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7335 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7336 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7337 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7338 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7339 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7340 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7341 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7342 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7343 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7344 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7345 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7346 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7347 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7348 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7349 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7350 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7351 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7352 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7353 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7354 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7355 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7356 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7359 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7360 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7361 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7362 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7363 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7364 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7365 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7366 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7367 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7368 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7369 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7370 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7371 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7372 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7373 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7374 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7375 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7376 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7377 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7378 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7379 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7380 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7381 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7382 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7383 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7384 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7385 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7386 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7387 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7388 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7389 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7390 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7393 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7394 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7395 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7396 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7397 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7398 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7399 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7400 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7401 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7402 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7403 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7404 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7405 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7406 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7407 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7408 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7409 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7410 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7411 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7412 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7413 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7414 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7415 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7416 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7417 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7418 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7419 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7420 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7421 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7422 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7423 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7424 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7427 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7428 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7429 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7430 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7431 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7432 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7433 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7434 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7435 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7436 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7437 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7438 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7439 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7440 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7441 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7442 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7443 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7444 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7445 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7446 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7447 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7448 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7449 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7450 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7451 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7452 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7453 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7454 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7455 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7456 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7457 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7458 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7467 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7468 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7469 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7471 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7472 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7473 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7474 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7476 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7477 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7478 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7479 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7480 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7481 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7482 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7483 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7484 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7485 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7488 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7489 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7490 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7491 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7492 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7493 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7496 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7497 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7498 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7499 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7500 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7501 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7502 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7503 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7506 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7509 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7512 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7515 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7518 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7520 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7521 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7522 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7524 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7526 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7527 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7528 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7530 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7532 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7533 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7534 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7536 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7537 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7540 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7541 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7542 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7551 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7552 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7553 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7554 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7555 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7556 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7557 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7558 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7559 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7560 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7561 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7562 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7563 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7564 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7567 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7568 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7569 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7570 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7571 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7572 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7573 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7575 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7576 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7577 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7578 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7579 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7582 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7583 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7585 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7586 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7587 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7588 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7589 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7590 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7591 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7592 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7593 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7594 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7596 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7599 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7600 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7603 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7606 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7607 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7608 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7609 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7610 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7611 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7612 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7613 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7614 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7615 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7616 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7617 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7618 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7619 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7622 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7623 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7624 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7625 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7626 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7627 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7628 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7629 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7632 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7633 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7634 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7637 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7646 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7647 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7648 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7649 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7650 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7651 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7652 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7653 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7654 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7655 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7658 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7661 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7662 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7665 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7666 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7667 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7668 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7669 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7670 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7671 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7672 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7673 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7674 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7675 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7676 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7677 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7678 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7679 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7682 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7683 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7684 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7685 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7686 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7687 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7688 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7690 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7691 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7692 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7694 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7697 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7698 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7699 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7700 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7701 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7702 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7703 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7704 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7705 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7706 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7707 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7708 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7711 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7712 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7713 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7714 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7715 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7716 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7717 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7718 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7719 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7721 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7730 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

7732 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

7733 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

7734 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

7735 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

7736 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

7737 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

7738 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

7739 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

7740 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

7741 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

7742 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

7743 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

7744 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

7745 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

7746 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

7747 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

7748 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

7751 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

7752 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

7753 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

7754 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

7756 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

7757 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

7758 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

7760 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

7761 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

7762 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

7763 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

7764 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

7765 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

7766 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7767 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

7768 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

7769 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00020000Ë

	)

7770 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

7771 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

7772 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

7773 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

7774 
	#DBGMCU_CR_DBG_TIM15_STOP
 ((
uöt32_t
)0x00400000Ë

	)

7775 
	#DBGMCU_CR_DBG_TIM16_STOP
 ((
uöt32_t
)0x00800000Ë

	)

7776 
	#DBGMCU_CR_DBG_TIM17_STOP
 ((
uöt32_t
)0x01000000Ë

	)

7777 
	#DBGMCU_CR_DBG_TIM12_STOP
 ((
uöt32_t
)0x02000000Ë

	)

7778 
	#DBGMCU_CR_DBG_TIM13_STOP
 ((
uöt32_t
)0x04000000Ë

	)

7779 
	#DBGMCU_CR_DBG_TIM14_STOP
 ((
uöt32_t
)0x08000000Ë

	)

7780 
	#DBGMCU_CR_DBG_TIM9_STOP
 ((
uöt32_t
)0x10000000Ë

	)

7781 
	#DBGMCU_CR_DBG_TIM10_STOP
 ((
uöt32_t
)0x20000000Ë

	)

7782 
	#DBGMCU_CR_DBG_TIM11_STOP
 ((
uöt32_t
)0x40000000Ë

	)

7791 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

7792 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

7793 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

7794 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

7796 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

7797 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

7798 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

7801 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7804 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7807 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

7808 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

7809 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

7810 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

7813 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

7814 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

7815 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

7816 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

7817 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

7818 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

7819 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

7820 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

7821 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

7822 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

7825 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7828 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

7829 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

7831 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

7832 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

7833 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

7834 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

7835 
	#FLASH_OBR_BFB2
 ((
uöt16_t
)0x0020Ë

	)

7838 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7843 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

7844 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

7847 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

7848 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

7851 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

7852 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

7855 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

7856 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

7859 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

7860 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

7863 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

7864 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

7867 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

7868 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

7871 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

7872 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

7874 #ifde‡
STM32F10X_CL


7879 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7880 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7881 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7882 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7883 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7884 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7885 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7886 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7887 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7888 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7889 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7890 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7891 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7892 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7893 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7894 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7895 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7896 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7897 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7898 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7900 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7901 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7902 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7903 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7904 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7905 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7906 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7909 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7910 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7911 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7912 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7913 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7914 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7915 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7916 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7917 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7918 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7919 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7920 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7921 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7922 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7925 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7928 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7931 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7932 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7933 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7934 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7935 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7936 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7937 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7938 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7941 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7944 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7945 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7946 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7947 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7948 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7949 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7950 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7951 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7952 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7953 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7954 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7957 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7958 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7961 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7975 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7976 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7977 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7978 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7979 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7980 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7981 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7984 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7985 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7986 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7987 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7988 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7991 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7992 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7995 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7998 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8001 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8002 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8003 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8004 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8005 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8006 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8007 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8008 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8009 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8010 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

8013 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8016 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8017 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8018 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8019 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8020 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8021 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8022 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8023 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8024 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8025 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

8028 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8031 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8032 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8033 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8034 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8035 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8036 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8037 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8038 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8039 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8040 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

8043 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8050 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

8051 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

8052 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

8053 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

8056 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

8057 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

8058 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

8061 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

8062 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

8063 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

8066 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

8067 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

8068 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

8071 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

8072 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

8073 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

8076 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8079 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8082 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8085 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8088 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8091 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8098 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

8099 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

8100 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

8101 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

8102 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

8103 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

8106 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

8109 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8112 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8113 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8116 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8119 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8120 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8123 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8126 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8129 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8136 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8137 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8138 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8139 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8140 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8141 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8142 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8143 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8144 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8145 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8146 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8147 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8148 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8149 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8150 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8151 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8152 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8153 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8154 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8155 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8156 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8157 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8158 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8159 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8160 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

8161 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

8162 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

8163 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

8164 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

8165 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

8166 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

8167 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

8168 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

8169 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

8170 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

8171 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

8172 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

8173 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

8176 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8179 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8182 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8185 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8188 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

8189 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

8190 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

8191 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

8193 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

8194 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

8195 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

8196 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

8197 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8198 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

8199 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

8200 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

8201 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

8202 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

8203 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

8204 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8205 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

8206 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

8207 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

8208 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

8209 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

8210 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

8211 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

8212 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

8213 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

8214 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

8215 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

8216 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

8217 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

8218 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

8219 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

8220 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

8221 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

8222 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

8223 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

8224 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

8227 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

8228 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

8229 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

8230 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

8231 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

8232 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

8233 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8234 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

8235 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

8236 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

8237 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

8238 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

8239 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

8240 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

8241 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

8242 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

8243 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

8244 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

8245 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8246 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

8247 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

8248 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

8249 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

8250 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

8253 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

8254 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

8255 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

8256 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

8257 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

8258 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

8259 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

8260 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

8261 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

8262 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

8263 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

8264 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

8265 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

8266 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

8267 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

8270 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

8271 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

8272 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

8273 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

8276 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8279 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8282 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8285 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8296 #ifde‡
USE_STDPERIPH_DRIVER


8297 
	~"°m32f10x_c⁄f.h
"

8304 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

8306 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

8308 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

8310 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

8312 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

8314 
	#READ_REG
(
REG
Ë((REG))

	)

8316 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

8322 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.c

65 
	~"°m32f10x.h
"

106 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| (deföed 
STM32F10X_MD_VL
Ë|| (deföed 
STM32F10X_HD_VL
)

108 
	#SYSCLK_FREQ_24MHz
 24000000

	)

115 
	#SYSCLK_FREQ_72MHz
 72000000

	)

121 #i‡
deföed
 (
STM32F10X_HD
Ë|| (deföed 
STM32F10X_XL
Ë|| (deföed 
STM32F10X_HD_VL
)

128 
	#VECT_TAB_OFFSET
 0x0

	)

151 #ifde‡
SYSCLK_FREQ_HSE


152 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_HSE
;

153 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


154 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_24MHz
;

155 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


156 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_36MHz
;

157 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


158 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_48MHz
;

159 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


160 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_56MHz
;

161 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


162 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_72MHz
;

164 
uöt32_t
 
	gSy°emC‹eClock
 = 
HSI_VALUE
;

167 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

176 
SëSysClock
();

178 #ifde‡
SYSCLK_FREQ_HSE


179 
SëSysClockToHSE
();

180 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


181 
SëSysClockTo24
();

182 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


183 
SëSysClockTo36
();

184 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


185 
SëSysClockTo48
();

186 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


187 
SëSysClockTo56
();

188 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


189 
SëSysClockTo72
();

192 #ifde‡
DATA_IN_ExtSRAM


193 
Sy°emInô_ExtMemCé
();

212 
	$Sy°emInô
 ()

216 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

219 #i‚de‡
STM32F10X_CL


220 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

222 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

226 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

229 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

232 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

234 #ifde‡
STM32F10X_CL


236 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

239 
RCC
->
CIR
 = 0x00FF0000;

242 
RCC
->
CFGR2
 = 0x00000000;

243 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

245 
RCC
->
CIR
 = 0x009F0000;

248 
RCC
->
CFGR2
 = 0x00000000;

251 
RCC
->
CIR
 = 0x009F0000;

254 #i‡
	`deföed
 (
STM32F10X_HD
Ë|| (
deföed
 
STM32F10X_XL
Ë|| (deföed 
STM32F10X_HD_VL
)

255 #ifde‡
DATA_IN_ExtSRAM


256 
	`Sy°emInô_ExtMemCé
();

262 
	`SëSysClock
();

264 #ifde‡
VECT_TAB_SRAM


265 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

267 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

269 
	}
}

306 
	$Sy°emC‹eClockUpd©e
 ()

308 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0;

310 #ifde‡ 
STM32F10X_CL


311 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

314 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

315 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

319 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

321 
tmp
)

324 
Sy°emC‹eClock
 = 
HSI_VALUE
;

327 
Sy°emC‹eClock
 = 
HSE_VALUE
;

332 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

333 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

335 #i‚de‡
STM32F10X_CL


336 
∂lmuŒ
 = (Öllmull >> 18) + 2;

338 i‡(
∂lsour˚
 == 0x00)

341 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

345 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

346 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

348 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

351 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

353 
Sy°emC‹eClock
 = (
HSE_VALUE
 >> 1Ë* 
∂lmuŒ
;

357 
Sy°emC‹eClock
 = 
HSE_VALUE
 * 
∂lmuŒ
;

362 
∂lmuŒ
 =Öllmull >> 18;

364 i‡(
∂lmuŒ
 != 0x0D)

366 
∂lmuŒ
 += 2;

370 
∂lmuŒ
 = 13 / 2;

373 i‡(
∂lsour˚
 == 0x00)

376 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

382 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

383 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

385 i‡(
¥ediv1sour˚
 == 0)

388 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

394 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4) + 1;

395 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8 ) + 2;

396 
Sy°emC‹eClock
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

403 
Sy°emC‹eClock
 = 
HSI_VALUE
;

409 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

411 
Sy°emC‹eClock
 >>
tmp
;

412 
	}
}

419 
	$SëSysClock
()

421 #ifde‡
SYSCLK_FREQ_HSE


422 
	`SëSysClockToHSE
();

423 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


424 
	`SëSysClockTo24
();

425 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


426 
	`SëSysClockTo36
();

427 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


428 
	`SëSysClockTo48
();

429 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


430 
	`SëSysClockTo56
();

431 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


432 
	`SëSysClockTo72
();

437 
	}
}

445 #ifde‡
DATA_IN_ExtSRAM


455 
	$Sy°emInô_ExtMemCé
()

461 
RCC
->
AHBENR
 = 0x00000114;

464 
RCC
->
APB2ENR
 = 0x000001E0;

472 
GPIOD
->
CRL
 = 0x44BB44BB;

473 
GPIOD
->
CRH
 = 0xBBBBBBBB;

475 
GPIOE
->
CRL
 = 0xB44444BB;

476 
GPIOE
->
CRH
 = 0xBBBBBBBB;

478 
GPIOF
->
CRL
 = 0x44BBBBBB;

479 
GPIOF
->
CRH
 = 0xBBBB4444;

481 
GPIOG
->
CRL
 = 0x44BBBBBB;

482 
GPIOG
->
CRH
 = 0x44444B44;

487 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

488 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

489 
	}
}

492 #ifde‡
SYSCLK_FREQ_HSE


500 
	$SëSysClockToHSE
()

502 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

506 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

511 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

512 
SèπUpCou¡î
++;

513 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

515 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

517 
HSESètus
 = (
uöt32_t
)0x01;

521 
HSESètus
 = (
uöt32_t
)0x00;

524 i‡(
HSESètus
 =(
uöt32_t
)0x01)

527 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL
 && !deföed 
STM32F10X_HD_VL


529 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

532 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

534 #i‚de‡
STM32F10X_CL


535 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

537 i‡(
HSE_VALUE
 <= 24000000)

539 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

543 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

549 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

552 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

555 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

558 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

559 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

562 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

570 
	}
}

571 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


579 
	$SëSysClockTo24
()

581 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

585 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

590 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

591 
SèπUpCou¡î
++;

592 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

594 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

596 
HSESètus
 = (
uöt32_t
)0x01;

600 
HSESètus
 = (
uöt32_t
)0x00;

603 i‡(
HSESètus
 =(
uöt32_t
)0x01)

605 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL
 && !deföed 
STM32F10X_HD_VL


607 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

610 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

611 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

615 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

618 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

621 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

623 #ifde‡
STM32F10X_CL


626 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

627 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

628 
RCC_CFGR_PLLMULL6
);

632 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

633 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

634 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

635 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

638 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

640 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

643 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

645 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

646 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_PREDIV1
 | 
RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 | 
RCC_CFGR_PLLMULL6
);

649 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

650 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL6
);

654 
RCC
->
CR
 |
RCC_CR_PLLON
;

657 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

662 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

663 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

666 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

674 
	}
}

675 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


683 
	$SëSysClockTo36
()

685 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

689 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

694 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

695 
SèπUpCou¡î
++;

696 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

698 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

700 
HSESètus
 = (
uöt32_t
)0x01;

704 
HSESètus
 = (
uöt32_t
)0x00;

707 i‡(
HSESètus
 =(
uöt32_t
)0x01)

710 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

713 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

714 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

717 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

720 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

723 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

725 #ifde‡
STM32F10X_CL


729 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

730 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

731 
RCC_CFGR_PLLMULL9
);

736 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

737 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

738 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

739 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

742 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

744 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

750 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

751 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL9
);

755 
RCC
->
CR
 |
RCC_CR_PLLON
;

758 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

763 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

764 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

767 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

775 
	}
}

776 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


784 
	$SëSysClockTo48
()

786 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

790 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

795 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

796 
SèπUpCou¡î
++;

797 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

799 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

801 
HSESètus
 = (
uöt32_t
)0x01;

805 
HSESètus
 = (
uöt32_t
)0x00;

808 i‡(
HSESètus
 =(
uöt32_t
)0x01)

811 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

814 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

815 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

818 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

821 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

824 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

826 #ifde‡
STM32F10X_CL


831 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

832 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

833 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

834 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

837 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

839 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

845 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

846 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

847 
RCC_CFGR_PLLMULL6
);

850 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

851 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL6
);

855 
RCC
->
CR
 |
RCC_CR_PLLON
;

858 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

863 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

864 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

867 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

875 
	}
}

877 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


885 
	$SëSysClockTo56
()

887 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

891 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

896 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

897 
SèπUpCou¡î
++;

898 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

900 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

902 
HSESètus
 = (
uöt32_t
)0x01;

906 
HSESètus
 = (
uöt32_t
)0x00;

909 i‡(
HSESètus
 =(
uöt32_t
)0x01)

912 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

915 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

916 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

919 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

922 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

925 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

927 #ifde‡
STM32F10X_CL


932 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

933 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

934 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

935 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

938 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

940 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

946 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

947 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

948 
RCC_CFGR_PLLMULL7
);

951 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

952 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL7
);

957 
RCC
->
CR
 |
RCC_CR_PLLON
;

960 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

965 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

966 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

969 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

977 
	}
}

979 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


987 
	$SëSysClockTo72
()

989 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

993 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

998 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

999 
SèπUpCou¡î
++;

1000 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

1002 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

1004 
HSESètus
 = (
uöt32_t
)0x01;

1008 
HSESètus
 = (
uöt32_t
)0x00;

1011 i‡(
HSESètus
 =(
uöt32_t
)0x01)

1014 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

1017 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

1018 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

1022 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

1025 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

1028 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

1030 #ifde‡
STM32F10X_CL


1035 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

1036 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

1037 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

1038 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

1041 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

1043 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

1049 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

1050 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

1051 
RCC_CFGR_PLLMULL9
);

1054 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 |

1055 
RCC_CFGR_PLLMULL
));

1056 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL9
);

1060 
RCC
->
CR
 |
RCC_CR_PLLON
;

1063 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

1068 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

1069 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

1072 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

1080 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h

33 #i‚de‡
__SYSTEM_STM32F10X_H


34 
	#__SYSTEM_STM32F10X_H


	)

36 #ifde‡
__˝lu•lus


53 
uöt32_t
 
Sy°emC‹eClock
;

79 
Sy°emInô
();

80 
Sy°emC‹eClockUpd©e
();

85 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/misc.h

24 #i‚de‡
__MISC_H


25 
	#__MISC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt8_t
 
NVIC_IRQCh™√l
;

57 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

61 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

65 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

68 } 
	tNVIC_InôTy≥Def
;

115 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

116 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

117 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

118 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

127 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

128 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

129 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

130 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

131 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

132 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

141 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

143 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

145 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

147 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

149 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

152 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

156 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

158 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

160 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

162 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

172 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

173 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

174 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

175 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

196 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

197 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

198 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

199 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

200 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

202 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h

24 #i‚de‡
__STM32F10x_ADC_H


25 
	#__STM32F10x_ADC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
ADC_Mode
;

56 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

60 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

68 
uöt32_t
 
ADC_D©aAlign
;

71 
uöt8_t
 
ADC_NbrOfCh™√l
;

74 }
	tADC_InôTy≥Def
;

83 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

84 ((
PERIPH
Ë=
ADC2
) || \

85 ((
PERIPH
Ë=
ADC3
))

87 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

88 ((
PERIPH
Ë=
ADC3
))

94 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

95 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

96 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

97 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

98 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

99 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

100 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

101 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

102 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

103 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

105 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

106 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

107 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

110 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

112 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

114 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

128 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

138 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

140 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

153 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

162 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

163 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

165 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

174 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

175 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

176 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

177 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

178 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

179 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

180 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

181 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

182 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

183 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

184 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

185 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

186 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

187 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

188 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

189 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

190 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

191 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

193 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

194 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

196 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

197 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

201 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

202 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

203 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

204 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

213 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

214 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

215 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

216 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

217 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

218 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

219 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

220 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

221 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

222 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

225 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

226 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

227 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

228 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

238 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

245 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

251 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

253 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
Ë|| \

	)

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

265 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

274 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

275 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

276 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

277 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

278 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

281 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

290 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

291 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

292 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

293 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

294 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

295 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

296 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

298 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

304 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

313 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

314 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

315 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

317 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

319 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

320 ((
IT
Ë=
ADC_IT_JEOC
))

329 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

330 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

331 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

332 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

333 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

334 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

335 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
Ë|| \

	)

336 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

337 ((
FLAG
Ë=
ADC_FLAG_STRT
))

346 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

356 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

366 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

376 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

387 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

396 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

406 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

428 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

429 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

431 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

435 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

437 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

438 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

440 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

441 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

443 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

445 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

446 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

449 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

452 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

453 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

454 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

455 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

456 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

457 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

458 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

459 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

462 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

463 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

465 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h

24 #i‚de‡
__STM32F10x_BKP_H


25 
	#__STM32F10x_BKP_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

59 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

60 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
Ë|| \

	)

61 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

70 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

71 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

72 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

73 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

74 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
Ë|| \

	)

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

77 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

86 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

87 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

88 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

89 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

90 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

91 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

92 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

93 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

94 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

95 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

96 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

97 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

98 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

99 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

100 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

101 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

102 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

103 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

104 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

105 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

106 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

107 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

108 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

109 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

110 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

111 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

112 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

113 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

114 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

115 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

116 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

117 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

118 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

119 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

120 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

121 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

122 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

123 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

124 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

125 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

126 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

127 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

129 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
Ë|| \

	)

130 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

131 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

132 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

133 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

134 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

135 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

136 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

137 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

138 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

139 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

140 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

141 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

142 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

144 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

165 
BKP_DeInô
();

166 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

167 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

169 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

170 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

171 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

172 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

173 
FœgSètus
 
BKP_GëFœgSètus
();

174 
BKP_CÀ¨Fœg
();

175 
ITSètus
 
BKP_GëITSètus
();

176 
BKP_CÀ¨ITPídögBô
();

178 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h

24 #i‚de‡
__STM32F10x_CAN_H


25 
	#__STM32F10x_CAN_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
Ë|| \

	)

47 ((
PERIPH
Ë=
CAN2
))

55 
uöt16_t
 
CAN_PªsˇÀr
;

58 
uöt8_t
 
CAN_Mode
;

62 
uöt8_t
 
CAN_SJW
;

68 
uöt8_t
 
CAN_BS1
;

72 
uöt8_t
 
CAN_BS2
;

77 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

81 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

85 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

89 
Fun˘i⁄ÆSèã
 
CAN_NART
;

93 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

97 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

100 } 
	tCAN_InôTy≥Def
;

108 
uöt16_t
 
CAN_FûãrIdHigh
;

112 
uöt16_t
 
CAN_FûãrIdLow
;

116 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

121 
uöt16_t
 
CAN_FûãrMaskIdLow
;

126 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

129 
uöt8_t
 
CAN_FûãrNumbî
;

131 
uöt8_t
 
CAN_FûãrMode
;

134 
uöt8_t
 
CAN_FûãrSˇÀ
;

137 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

139 } 
	tCAN_FûãrInôTy≥Def
;

147 
uöt32_t
 
StdId
;

150 
uöt32_t
 
ExtId
;

153 
uöt8_t
 
IDE
;

157 
uöt8_t
 
RTR
;

161 
uöt8_t
 
DLC
;

165 
uöt8_t
 
D©a
[8];

167 } 
	tC™TxMsg
;

175 
uöt32_t
 
StdId
;

178 
uöt32_t
 
ExtId
;

181 
uöt8_t
 
IDE
;

185 
uöt8_t
 
RTR
;

189 
uöt8_t
 
DLC
;

192 
uöt8_t
 
D©a
[8];

195 
uöt8_t
 
FMI
;

198 } 
	tC™RxMsg
;

212 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

213 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

223 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

224 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

225 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

226 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

228 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| \

	)

229 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

230 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

231 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

241 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

242 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

243 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

246 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
Ë||\

	)

247 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

248 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

258 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

259 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

270 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

271 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

272 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

273 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

275 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

276 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

285 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

286 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

287 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

288 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

289 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

290 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

291 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

292 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

293 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

294 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

295 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

296 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

297 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

298 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

299 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

300 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

302 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

311 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

313 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

314 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

315 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

316 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

317 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

318 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

320 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

330 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

339 #i‚de‡
STM32F10X_CL


340 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

342 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

352 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

353 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

355 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

356 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

365 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

366 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

368 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

369 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

379 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

380 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

381 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

382 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

390 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

399 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

400 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

401 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

402 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

412 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

413 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

414 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
Ë|| \

	)

415 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

424 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

425 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

426 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

436 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

437 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

438 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

439 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

449 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

450 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

452 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

462 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

463 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

473 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

474 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

485 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

486 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

487 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

488 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

489 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

490 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

491 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

492 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

507 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

508 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

509 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

512 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

513 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

514 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

515 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

516 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

517 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

520 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

521 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

526 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

527 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

528 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

529 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

531 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
Ë|| \

	)

532 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

533 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

534 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

535 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

536 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

537 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

538 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

540 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
Ë|| \

	)

541 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

542 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

543 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

544 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

556 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

559 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

560 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

561 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

562 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

563 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

564 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

567 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

568 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

571 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

572 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

573 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

574 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

575 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

578 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

579 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

580 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

583 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

584 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

585 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

586 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

587 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

588 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

589 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

591 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
Ë||\

	)

592 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

593 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

594 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

595 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

596 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

605 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

606 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

607 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

608 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

609 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

610 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

611 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

612 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

613 
	#CANTXFAILE
 
CAN_TxSètus_Faûed


	)

614 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

615 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

616 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

617 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

618 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

619 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

620 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

642 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

645 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

646 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

647 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

648 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

649 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

650 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

653 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

654 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

655 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

658 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

659 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

660 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

664 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

665 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

666 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

669 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

670 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

671 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

674 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

675 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

676 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

677 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

678 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

680 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h

24 #i‚de‡
__STM32F10x_CEC_H


25 
	#__STM32F10x_CEC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
CEC_BôTimögMode
;

54 
uöt16_t
 
CEC_BôPîiodMode
;

56 }
	tCEC_InôTy≥Def
;

69 
	#CEC_BôTimögStdMode
 ((
uöt16_t
)0x00Ë

	)

70 
	#CEC_BôTimögEºFªeMode
 
CEC_CFGR_BTEM


	)

72 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôTimögStdMode
Ë|| \

	)

73 ((
MODE
Ë=
CEC_BôTimögEºFªeMode
))

81 
	#CEC_BôPîiodStdMode
 ((
uöt16_t
)0x00Ë

	)

82 
	#CEC_BôPîiodFÀxibÀMode
 
CEC_CFGR_BPEM


	)

84 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôPîiodStdMode
Ë|| \

	)

85 ((
MODE
Ë=
CEC_BôPîiodFÀxibÀMode
))

94 
	#CEC_IT_TERR
 
CEC_CSR_TERR


	)

95 
	#CEC_IT_TBTRF
 
CEC_CSR_TBTRF


	)

96 
	#CEC_IT_RERR
 
CEC_CSR_RERR


	)

97 
	#CEC_IT_RBTF
 
CEC_CSR_RBTF


	)

98 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TERR
Ë|| ((ITË=
CEC_IT_TBTRF
Ë|| \

	)

99 ((
IT
Ë=
CEC_IT_RERR
Ë|| ((ITË=
CEC_IT_RBTF
))

108 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

116 
	#IS_CEC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0x3FFF)

	)

129 
	#CEC_FLAG_BTE
 ((
uöt32_t
)0x10010000)

	)

130 
	#CEC_FLAG_BPE
 ((
uöt32_t
)0x10020000)

	)

131 
	#CEC_FLAG_RBTFE
 ((
uöt32_t
)0x10040000)

	)

132 
	#CEC_FLAG_SBE
 ((
uöt32_t
)0x10080000)

	)

133 
	#CEC_FLAG_ACKE
 ((
uöt32_t
)0x10100000)

	)

134 
	#CEC_FLAG_LINE
 ((
uöt32_t
)0x10200000)

	)

135 
	#CEC_FLAG_TBTFE
 ((
uöt32_t
)0x10400000)

	)

140 
	#CEC_FLAG_TEOM
 ((
uöt32_t
)0x00000002)

	)

141 
	#CEC_FLAG_TERR
 ((
uöt32_t
)0x00000004)

	)

142 
	#CEC_FLAG_TBTRF
 ((
uöt32_t
)0x00000008)

	)

143 
	#CEC_FLAG_RSOM
 ((
uöt32_t
)0x00000010)

	)

144 
	#CEC_FLAG_REOM
 ((
uöt32_t
)0x00000020)

	)

145 
	#CEC_FLAG_RERR
 ((
uöt32_t
)0x00000040)

	)

146 
	#CEC_FLAG_RBTF
 ((
uöt32_t
)0x00000080)

	)

148 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF03Ë=0x00Ë&& ((FLAGË!0x00))

	)

150 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_BTE
Ë|| ((FLAGË=
CEC_FLAG_BPE
Ë|| \

	)

151 ((
FLAG
Ë=
CEC_FLAG_RBTFE
Ë|| ((FLAG)=
CEC_FLAG_SBE
) || \

152 ((
FLAG
Ë=
CEC_FLAG_ACKE
Ë|| ((FLAGË=
CEC_FLAG_LINE
) || \

153 ((
FLAG
Ë=
CEC_FLAG_TBTFE
Ë|| ((FLAGË=
CEC_FLAG_TEOM
) || \

154 ((
FLAG
Ë=
CEC_FLAG_TERR
Ë|| ((FLAGË=
CEC_FLAG_TBTRF
) || \

155 ((
FLAG
Ë=
CEC_FLAG_RSOM
Ë|| ((FLAGË=
CEC_FLAG_REOM
) || \

156 ((
FLAG
Ë=
CEC_FLAG_RERR
Ë|| ((FLAGË=
CEC_FLAG_RBTF
))

177 
CEC_DeInô
();

178 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

179 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

181 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

182 
CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
);

183 
CEC_SídD©aByã
(
uöt8_t
 
D©a
);

184 
uöt8_t
 
CEC_Re˚iveD©aByã
();

185 
CEC_SèπOfMesßge
();

186 
CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
FœgSètus
 
CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
);

188 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

189 
ITSètus
 
CEC_GëITSètus
(
uöt8_t
 
CEC_IT
);

190 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

192 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h

24 #i‚de‡
__STM32F10x_CRC_H


25 
	#__STM32F10x_CRC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

70 
CRC_Re£tDR
();

71 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

72 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

73 
uöt32_t
 
CRC_GëCRC
();

74 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

75 
uöt8_t
 
CRC_GëIDRegi°î
();

77 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h

24 #i‚de‡
__STM32F10x_DAC_H


25 
	#__STM32F10x_DAC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DAC_Triggî
;

55 
uöt32_t
 
DAC_WaveGíî©i⁄
;

59 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

63 
uöt32_t
 
DAC_OuçutBuf„r
;

65 }
	tDAC_InôTy≥Def
;

79 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

81 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

82 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

84 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

86 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

87 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

88 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

90 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

91 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

92 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

93 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

95 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

96 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

103 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

113 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

114 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

115 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

116 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

118 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

127 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

128 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

129 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

130 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

131 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

132 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

133 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

134 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

135 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

136 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

137 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

138 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

150 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

152 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

163 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

175 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

184 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

185 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

186 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

187 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

196 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

197 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

199 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

208 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

209 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

210 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

211 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

212 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

213 ((
ALIGN
Ë=
DAC_Align_8b_R
))

222 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

223 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

224 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

225 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

234 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

238 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

243 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

244 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

254 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

255 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

278 
DAC_DeInô
();

279 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

280 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

281 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

282 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

283 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

290 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

291 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

292 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

293 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

294 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

295 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

296 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

297 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

300 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h

24 #i‚de‡
__STM32F10x_DBGMCU_H


25 
	#__STM32F10x_DBGMCU_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

54 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

55 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

56 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

57 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

58 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

59 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

60 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

61 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

62 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

63 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

64 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

65 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

66 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

67 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

68 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

69 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

70 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x01000000)

	)

74 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x02000000)

	)

75 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x04000000)

	)

76 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x08000000)

	)

77 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x10000000)

	)

78 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x20000000)

	)

79 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x40000000)

	)

81 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x800000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

98 
uöt32_t
 
DBGMCU_GëREVID
();

99 
uöt32_t
 
DBGMCU_GëDEVID
();

100 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

102 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h

24 #i‚de‡
__STM32F10x_DMA_H


25 
	#__STM32F10x_DMA_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

54 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

56 
uöt32_t
 
DMA_DIR
;

59 
uöt32_t
 
DMA_Buf„rSize
;

63 
uöt32_t
 
DMA_PîùhîÆInc
;

66 
uöt32_t
 
DMA_Mem‹yInc
;

69 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

72 
uöt32_t
 
DMA_Mem‹yD©aSize
;

75 
uöt32_t
 
DMA_Mode
;

80 
uöt32_t
 
DMA_Pri‹ôy
;

83 
uöt32_t
 
DMA_M2M
;

85 }
	tDMA_InôTy≥Def
;

95 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
Ë|| \

	)

96 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

101 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

106 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

112 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

113 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

114 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
Ë|| \

	)

115 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

124 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

125 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

126 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

127 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

136 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

137 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

138 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

139 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

148 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

149 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

150 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

151 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

153 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

162 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

163 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

164 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

165 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

167 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

176 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

177 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

178 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

187 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

188 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

189 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

190 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

191 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

194 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

203 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

204 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

205 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

215 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

216 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

217 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

218 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

220 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

221 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

222 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

223 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

224 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

225 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

226 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

227 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

228 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

229 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

230 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

231 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

232 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

233 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

234 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

235 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

236 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

237 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

238 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

239 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

240 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

241 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

242 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

243 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

244 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

245 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

246 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

247 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

249 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

250 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

251 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

252 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

253 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

254 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

255 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

256 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

257 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

258 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

259 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

260 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

261 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

262 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

263 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

264 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

265 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

266 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

267 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

268 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

270 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

272 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

273 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

274 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

275 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

276 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

277 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

278 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

279 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

280 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

281 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

282 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

283 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

284 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

285 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

286 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

287 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

288 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

289 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

290 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

291 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

292 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

293 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

294 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

295 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

304 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

305 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

306 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

307 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

308 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

309 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

310 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

311 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

312 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

313 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

314 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

315 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

316 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

317 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

318 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

319 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

320 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

321 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

322 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

323 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

324 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

325 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

326 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

327 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

328 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

329 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

330 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

331 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

333 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

334 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

335 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

336 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

337 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

338 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

339 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

340 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

341 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

342 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

343 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

344 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

345 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

346 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

347 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

348 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

349 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

350 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

351 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

352 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

354 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

356 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

357 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

369 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

379 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

388 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

410 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

411 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

413 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
);

416 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

417 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
);

418 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
);

419 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
);

420 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
);

422 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h

24 #i‚de‡
__STM32F10x_EXTI_H


25 
	#__STM32F10x_EXTI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
EXTI_Mode_I¡îru±
 = 0x00,

53 
EXTI_Mode_Evít
 = 0x04

54 }
	tEXTIMode_Ty≥Def
;

56 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

64 
EXTI_Triggî_Risög
 = 0x08,

65 
EXTI_Triggî_FÆlög
 = 0x0C,

66 
EXTI_Triggî_Risög_FÆlög
 = 0x10

67 }
	tEXTITriggî_Ty≥Def
;

69 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

70 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

71 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

78 
uöt32_t
 
EXTI_Löe
;

81 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

84 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

87 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

89 }
	tEXTI_InôTy≥Def
;

103 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

104 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

105 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

106 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

107 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

108 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

109 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

110 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

111 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

112 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

113 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

114 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

115 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

116 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

117 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

118 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

119 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

120 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

121 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

123 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

126 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

127 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

128 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

129 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

130 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

131 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

132 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

133 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

134 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

135 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

158 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

162 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

163 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

164 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

167 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h

24 #i‚de‡
__STM32F10x_FLASH_H


25 
	#__STM32F10x_FLASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
FLASH_BUSY
 = 1,

53 
FLASH_ERROR_PG
,

54 
FLASH_ERROR_WRP
,

55 
FLASH_COMPLETE
,

56 
FLASH_TIMEOUT


57 }
	tFLASH_Sètus
;

71 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

72 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

73 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

74 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

75 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

76 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

85 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

86 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

87 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
Ë|| \

	)

88 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

97 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

98 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

99 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
Ë|| \

	)

100 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

110 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

111 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

112 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

113 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

114 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

115 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

116 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

117 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

120 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

121 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

122 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

123 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

124 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

125 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

126 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

127 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

128 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

129 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

130 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

132 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

133 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

134 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

135 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

136 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

143 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

146 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

148 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

150 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

152 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

154 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

156 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

158 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

160 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

162 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

164 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

166 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

168 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

170 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

172 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

174 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

176 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

178 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

180 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

182 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

184 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

186 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

188 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

190 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

192 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

194 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

196 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

198 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

200 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

202 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

204 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

206 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

210 
	#FLASH_WRPrŸ_Pages62to511
 ((
uöt32_t
)0x80000000Ë

	)

212 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

214 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

216 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x080FFFFF))

	)

218 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

228 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

229 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

230 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

240 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

241 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

242 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

252 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

253 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

254 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

256 #ifde‡
STM32F10X_XL


263 
	#FLASH_BOOT_B™k1
 ((
uöt16_t
)0x0000Ë

	)

265 
	#FLASH_BOOT_B™k2
 ((
uöt16_t
)0x0001Ë

	)

268 
	#IS_FLASH_BOOT
(
BOOT
Ë(((BOOTË=
FLASH_BOOT_B™k1
Ë|| ((BOOTË=
FLASH_BOOT_B™k2
))

	)

276 #ifde‡
STM32F10X_XL


277 
	#FLASH_IT_BANK2_ERROR
 ((
uöt32_t
)0x80000400Ë

	)

278 
	#FLASH_IT_BANK2_EOP
 ((
uöt32_t
)0x80001000Ë

	)

280 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

281 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

283 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

284 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

285 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x7FFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

287 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

288 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

289 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

290 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

292 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

302 #ifde‡
STM32F10X_XL


303 
	#FLASH_FLAG_BANK2_BSY
 ((
uöt32_t
)0x80000001Ë

	)

304 
	#FLASH_FLAG_BANK2_EOP
 ((
uöt32_t
)0x80000020Ë

	)

305 
	#FLASH_FLAG_BANK2_PGERR
 ((
uöt32_t
)0x80000004Ë

	)

306 
	#FLASH_FLAG_BANK2_WRPRTERR
 ((
uöt32_t
)0x80000010Ë

	)

308 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

309 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

310 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

311 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

313 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

314 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

315 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

316 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

317 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

319 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0x7FFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

320 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

321 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

322 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
)|| \

323 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

324 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

325 ((
FLAG
Ë=
FLASH_FLAG_BANK2_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_EOP
) || \

326 ((
FLAG
Ë=
FLASH_FLAG_BANK2_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_WRPRTERR
))

328 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

329 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

330 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

331 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

332 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

334 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

335 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

336 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

337 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

339 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

340 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
Ë|| \

	)

341 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

342 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

343 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

344 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

368 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

369 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

370 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

371 
FLASH_U∆ock
();

372 
FLASH_Lock
();

373 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

374 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

375 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

376 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

377 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

378 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

379 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

380 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

382 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

383 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

384 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

385 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

386 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

388 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

389 
FLASH_Sètus
 
FLASH_GëSètus
();

390 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

393 
FLASH_U∆ockB™k1
();

394 
FLASH_LockB™k1
();

395 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Pages
();

396 
FLASH_Sètus
 
FLASH_GëB™k1Sètus
();

397 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
);

399 #ifde‡
STM32F10X_XL


401 
FLASH_U∆ockB™k2
();

402 
FLASH_LockB™k2
();

403 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Pages
();

404 
FLASH_Sètus
 
FLASH_GëB™k2Sètus
();

405 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
);

406 
FLASH_Sètus
 
FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
);

409 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h

24 #i‚de‡
__STM32F10x_FSMC_H


25 
	#__STM32F10x_FSMC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
FSMC_AddªssSëupTime
;

57 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

62 
uöt32_t
 
FSMC_D©aSëupTime
;

67 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

72 
uöt32_t
 
FSMC_CLKDivisi⁄
;

76 
uöt32_t
 
FSMC_D©aL©ícy
;

84 
uöt32_t
 
FSMC_Ac˚ssMode
;

86 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

94 
uöt32_t
 
FSMC_B™k
;

97 
uöt32_t
 
FSMC_D©aAddªssMux
;

101 
uöt32_t
 
FSMC_Mem‹yTy≥
;

105 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

108 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

112 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

116 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

120 
uöt32_t
 
FSMC_WøpMode
;

124 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

129 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

132 
uöt32_t
 
FSMC_WaôSig«l
;

136 
uöt32_t
 
FSMC_ExãndedMode
;

139 
uöt32_t
 
FSMC_WrôeBur°
;

142 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

144 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

145 }
	tFSMC_NORSRAMInôTy≥Def
;

153 
uöt32_t
 
FSMC_SëupTime
;

159 
uöt32_t
 
FSMC_WaôSëupTime
;

165 
uöt32_t
 
FSMC_HﬁdSëupTime
;

172 
uöt32_t
 
FSMC_HiZSëupTime
;

177 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

185 
uöt32_t
 
FSMC_B™k
;

188 
uöt32_t
 
FSMC_Waô„©uª
;

191 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

194 
uöt32_t
 
FSMC_ECC
;

197 
uöt32_t
 
FSMC_ECCPageSize
;

200 
uöt32_t
 
FSMC_TCLRSëupTime
;

204 
uöt32_t
 
FSMC_TARSëupTime
;

208 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

210 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

211 }
	tFSMC_NANDInôTy≥Def
;

219 
uöt32_t
 
FSMC_Waô„©uª
;

222 
uöt32_t
 
FSMC_TCLRSëupTime
;

226 
uöt32_t
 
FSMC_TARSëupTime
;

231 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

233 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

235 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

236 }
	tFSMC_PCCARDInôTy≥Def
;

249 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

250 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

251 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

252 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

260 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

261 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

269 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

274 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

275 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

276 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

277 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

279 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

280 ((
BANK
Ë=
FSMC_B™k3_NAND
))

282 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

283 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

284 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

286 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

287 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

288 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

298 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

299 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

300 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

301 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

311 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

312 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

313 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

314 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

315 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

316 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

326 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

327 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

328 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

329 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

339 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

340 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

341 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

342 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

350 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

351 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

352 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
Ë|| \

	)

353 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

363 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

364 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

365 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

366 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

376 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

377 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

378 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

379 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

389 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

390 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

391 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

392 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

402 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

403 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

404 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

405 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

415 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

416 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

417 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

418 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

427 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

428 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

430 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

431 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

441 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

442 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

443 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

444 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

453 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

463 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

473 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

483 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

493 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

503 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

513 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

514 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

515 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

516 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

517 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

518 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

519 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

520 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

538 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

539 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

540 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

541 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

552 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

553 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

554 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

555 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

565 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

566 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

567 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

568 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

569 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

570 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

571 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

572 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

573 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

574 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

575 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

576 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

586 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

596 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

606 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

616 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

626 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

636 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

646 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

647 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

648 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

649 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

650 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

651 ((
IT
Ë=
FSMC_IT_Levñ
) || \

652 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

661 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

662 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

663 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

664 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

665 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

666 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

667 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

668 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

670 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

696 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

697 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

698 
FSMC_PCCARDDeInô
();

699 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

700 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

701 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

702 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

703 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

704 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

705 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

706 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

707 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

708 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

709 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

710 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

711 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

712 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

713 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

714 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

716 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h

24 #i‚de‡
__STM32F10x_GPIO_H


25 
	#__STM32F10x_GPIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

47 ((
PERIPH
Ë=
GPIOB
) || \

48 ((
PERIPH
Ë=
GPIOC
) || \

49 ((
PERIPH
Ë=
GPIOD
) || \

50 ((
PERIPH
Ë=
GPIOE
) || \

51 ((
PERIPH
Ë=
GPIOF
) || \

52 ((
PERIPH
Ë=
GPIOG
))

60 
GPIO_S≥ed_10MHz
 = 1,

61 
GPIO_S≥ed_2MHz
,

62 
GPIO_S≥ed_50MHz


63 }
	tGPIOS≥ed_Ty≥Def
;

64 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

65 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

72 { 
GPIO_Mode_AIN
 = 0x0,

73 
GPIO_Mode_IN_FLOATING
 = 0x04,

74 
GPIO_Mode_IPD
 = 0x28,

75 
GPIO_Mode_IPU
 = 0x48,

76 
GPIO_Mode_Out_OD
 = 0x14,

77 
GPIO_Mode_Out_PP
 = 0x10,

78 
GPIO_Mode_AF_OD
 = 0x1C,

79 
GPIO_Mode_AF_PP
 = 0x18

80 }
	tGPIOMode_Ty≥Def
;

82 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
Ë|| \

	)

83 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

84 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

85 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

93 
uöt16_t
 
GPIO_Pö
;

96 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

99 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

101 }
	tGPIO_InôTy≥Def
;

109 { 
Bô_RESET
 = 0,

110 
Bô_SET


111 }
	tBôA˘i⁄
;

113 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

127 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

128 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

129 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

130 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

131 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

132 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

133 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

134 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

135 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

136 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

137 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

138 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

139 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

140 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

141 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

142 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

143 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

145 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

147 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

148 ((
PIN
Ë=
GPIO_Pö_1
) || \

149 ((
PIN
Ë=
GPIO_Pö_2
) || \

150 ((
PIN
Ë=
GPIO_Pö_3
) || \

151 ((
PIN
Ë=
GPIO_Pö_4
) || \

152 ((
PIN
Ë=
GPIO_Pö_5
) || \

153 ((
PIN
Ë=
GPIO_Pö_6
) || \

154 ((
PIN
Ë=
GPIO_Pö_7
) || \

155 ((
PIN
Ë=
GPIO_Pö_8
) || \

156 ((
PIN
Ë=
GPIO_Pö_9
) || \

157 ((
PIN
Ë=
GPIO_Pö_10
) || \

158 ((
PIN
Ë=
GPIO_Pö_11
) || \

159 ((
PIN
Ë=
GPIO_Pö_12
) || \

160 ((
PIN
Ë=
GPIO_Pö_13
) || \

161 ((
PIN
Ë=
GPIO_Pö_14
) || \

162 ((
PIN
Ë=
GPIO_Pö_15
))

172 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

173 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

174 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

175 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

176 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

177 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

178 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

179 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

180 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

181 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

182 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

183 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

184 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

185 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

186 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

187 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

188 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

189 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

191 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

193 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

194 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

195 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

196 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

197 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

198 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

199 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201100Ë

	)

200 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

203 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

205 
	#GPIO_Rem≠_TIM15
 ((
uöt32_t
)0x80000001Ë

	)

206 
	#GPIO_Rem≠_TIM16
 ((
uöt32_t
)0x80000002Ë

	)

207 
	#GPIO_Rem≠_TIM17
 ((
uöt32_t
)0x80000004Ë

	)

208 
	#GPIO_Rem≠_CEC
 ((
uöt32_t
)0x80000008Ë

	)

209 
	#GPIO_Rem≠_TIM1_DMA
 ((
uöt32_t
)0x80000010Ë

	)

211 
	#GPIO_Rem≠_TIM9
 ((
uöt32_t
)0x80000020Ë

	)

212 
	#GPIO_Rem≠_TIM10
 ((
uöt32_t
)0x80000040Ë

	)

213 
	#GPIO_Rem≠_TIM11
 ((
uöt32_t
)0x80000080Ë

	)

214 
	#GPIO_Rem≠_TIM13
 ((
uöt32_t
)0x80000100Ë

	)

215 
	#GPIO_Rem≠_TIM14
 ((
uöt32_t
)0x80000200Ë

	)

216 
	#GPIO_Rem≠_FSMC_NADV
 ((
uöt32_t
)0x80000400Ë

	)

218 
	#GPIO_Rem≠_TIM67_DAC_DMA
 ((
uöt32_t
)0x80000800Ë

	)

219 
	#GPIO_Rem≠_TIM12
 ((
uöt32_t
)0x80001000Ë

	)

220 
	#GPIO_Rem≠_MISC
 ((
uöt32_t
)0x80002000Ë

	)

223 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
Ë|| \

	)

224 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

225 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

226 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

227 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

228 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

229 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

230 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

231 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

232 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

233 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

234 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

235 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

236 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

237 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
) || \

238 ((
REMAP
Ë=
GPIO_Rem≠_TIM15
Ë|| ((REMAPË=
GPIO_Rem≠_TIM16
) || \

239 ((
REMAP
Ë=
GPIO_Rem≠_TIM17
Ë|| ((REMAPË=
GPIO_Rem≠_CEC
) || \

240 ((
REMAP
Ë=
GPIO_Rem≠_TIM1_DMA
Ë|| ((REMAPË=
GPIO_Rem≠_TIM9
) || \

241 ((
REMAP
Ë=
GPIO_Rem≠_TIM10
Ë|| ((REMAPË=
GPIO_Rem≠_TIM11
) || \

242 ((
REMAP
Ë=
GPIO_Rem≠_TIM13
Ë|| ((REMAPË=
GPIO_Rem≠_TIM14
) || \

243 ((
REMAP
Ë=
GPIO_Rem≠_FSMC_NADV
Ë|| ((REMAPË=
GPIO_Rem≠_TIM67_DAC_DMA
) || \

244 ((
REMAP
Ë=
GPIO_Rem≠_TIM12
Ë|| ((REMAPË=
GPIO_Rem≠_MISC
))

254 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

255 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

256 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

257 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

258 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

259 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

260 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

261 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

262 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

263 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

264 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

265 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

267 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
Ë|| \

	)

268 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

269 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

270 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

271 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

272 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

273 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

283 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

284 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

285 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

286 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

287 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

288 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

289 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

290 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

291 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

292 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

293 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

294 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

295 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

296 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

297 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

298 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

300 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

301 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

302 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

303 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

304 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

305 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

306 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

307 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

308 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

309 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

310 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

311 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

312 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

313 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

314 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

315 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

324 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

325 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

327 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
Ë|| \

	)

328 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

349 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

350 
GPIO_AFIODeInô
();

351 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

352 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

353 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

354 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

355 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

356 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

357 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

358 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

359 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

360 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

361 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

362 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

363 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

364 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

365 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

366 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

368 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h

24 #i‚de‡
__STM32F10x_I2C_H


25 
	#__STM32F10x_I2C_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
I2C_ClockS≥ed
;

55 
uöt16_t
 
I2C_Mode
;

58 
uöt16_t
 
I2C_DutyCy˛e
;

61 
uöt16_t
 
I2C_OwnAddªss1
;

64 
uöt16_t
 
I2C_Ack
;

67 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

69 }
	tI2C_InôTy≥Def
;

80 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
Ë|| \

	)

81 ((
PERIPH
Ë=
I2C2
))

86 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

87 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

88 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

89 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

90 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

91 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

100 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

101 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

102 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

103 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

112 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

113 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

114 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

115 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

124 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

125 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

126 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

127 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

136 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

137 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

138 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

139 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

148 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

149 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

150 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

151 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

152 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

153 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

154 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

155 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

156 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

157 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

158 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

165 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

174 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

175 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

176 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

177 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

186 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

187 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

188 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

189 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

198 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

199 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

200 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
Ë|| \

	)

201 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

210 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

211 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

212 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

213 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

222 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

223 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

224 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

225 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

226 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

227 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

228 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

229 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

230 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

231 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

232 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

233 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

234 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

235 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

237 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

239 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

240 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

241 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

242 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

243 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

244 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

245 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

258 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

259 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

260 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

261 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

262 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

263 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

264 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

270 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

271 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

272 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

273 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

274 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

275 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

276 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

277 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

278 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

279 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

280 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

281 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

282 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

283 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

285 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

287 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

288 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

289 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

290 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

291 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

292 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

293 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

294 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

295 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

296 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

297 ((
FLAG
Ë=
I2C_FLAG_SB
))

319 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

347 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

348 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

350 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

383 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

387 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

389 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

424 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

425 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

428 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

429 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

432 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

463 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

465 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

469 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

470 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

472 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

476 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

477 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

478 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

479 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

480 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

481 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

482 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

483 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

484 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

485 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

486 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

487 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

488 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

489 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

490 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

491 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

492 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

493 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

494 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

495 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

504 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

513 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

534 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

535 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

536 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

537 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

538 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

540 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

542 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

544 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

547 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

548 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

549 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

550 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

551 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

553 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

554 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

555 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

556 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

558 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

645 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

651 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

657 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

663 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

664 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

665 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

667 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h

24 #i‚de‡
__STM32F10x_IWDG_H


25 
	#__STM32F10x_IWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

70 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

71 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

72 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

73 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

74 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

75 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

76 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

77 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

83 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

92 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

93 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

94 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

95 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

116 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

117 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

118 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

119 
IWDG_RñﬂdCou¡î
();

120 
IWDG_E«bÀ
();

121 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

123 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h

24 #i‚de‡
__STM32F10x_PWR_H


25 
	#__STM32F10x_PWR_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

59 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

60 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

61 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

62 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

63 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

64 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

65 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

66 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

	)

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

78 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

79 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

80 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

81 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

90 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

91 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

92 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

102 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

103 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

104 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

105 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

106 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

108 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

129 
PWR_DeInô
();

130 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

132 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

133 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

134 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

135 
PWR_E¡îSTANDBYMode
();

136 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

137 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

139 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h

24 #i‚de‡
__STM32F10x_RCC_H


25 
	#__STM32F10x_RCC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SYSCLK_Fªquícy
;

49 
uöt32_t
 
HCLK_Fªquícy
;

50 
uöt32_t
 
PCLK1_Fªquícy
;

51 
uöt32_t
 
PCLK2_Fªquícy
;

52 
uöt32_t
 
ADCCLK_Fªquícy
;

53 }
	tRCC_ClocksTy≥Def
;

67 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

68 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

69 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

70 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

71 ((
HSE
Ë=
RCC_HSE_By∑ss
))

81 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

83 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_CL
)

84 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

85 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

86 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

88 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

90 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

91 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

92 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

102 #i‚de‡
STM32F10X_CL


103 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

104 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

105 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

106 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

107 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

108 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

109 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

110 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

111 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

112 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

113 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

114 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

115 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

116 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

117 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

118 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

119 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

120 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

121 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

122 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

123 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

124 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

125 ((
MUL
Ë=
RCC_PLLMul_16
))

128 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

129 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

130 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

131 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

132 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

133 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

134 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

136 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
Ë|| \

	)

137 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

138 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

139 ((
MUL
Ë=
RCC_PLLMul_6_5
))

148 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

149 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

150 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

151 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

152 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

153 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

154 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

155 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

156 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

157 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

158 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

159 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

160 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

161 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

162 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

163 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

164 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

166 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
Ë|| \

	)

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

173 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

183 #ifde‡
STM32F10X_CL


185 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

186 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

188 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
Ë|| \

	)

189 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

190 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

192 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

194 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
))

	)

200 #ifde‡
STM32F10X_CL


205 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

207 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

208 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

209 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

210 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

211 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

212 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

213 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

214 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

215 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

216 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

217 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

218 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

219 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

220 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

222 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
Ë|| \

	)

223 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

224 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

225 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

226 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

227 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

228 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

229 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

239 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

240 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

241 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

242 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

243 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

244 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

245 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

246 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

247 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

249 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
Ë|| \

	)

250 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

251 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

252 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

253 ((
MUL
Ë=
RCC_PLL2Mul_20
))

263 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

264 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

265 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

266 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

267 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

268 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

269 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

270 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

271 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

273 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
Ë|| \

	)

274 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

275 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

276 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

277 ((
MUL
Ë=
RCC_PLL3Mul_20
))

289 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

290 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

291 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

292 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

293 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

294 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

303 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

304 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

305 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

306 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

307 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

308 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

309 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

310 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

311 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

312 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

313 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

314 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

315 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

316 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

325 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

326 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

327 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

328 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

329 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

330 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

331 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

332 ((
PCLK
Ë=
RCC_HCLK_Div16
))

341 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

342 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

343 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

344 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

345 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

346 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

348 #i‚de‡
STM32F10X_CL


349 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

350 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

351 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

352 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

353 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

355 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

356 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

357 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

358 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

359 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

360 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

361 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

362 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

370 #i‚de‡
STM32F10X_CL


375 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

376 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

378 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

379 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

387 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

388 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

390 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
Ë|| \

	)

391 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

398 #ifde‡
STM32F10X_CL


402 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

403 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

405 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
Ë|| \

	)

406 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

414 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

415 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

417 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
Ë|| \

	)

418 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

429 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

430 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

431 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

432 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

433 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
Ë|| \

	)

434 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

443 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

444 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

445 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

446 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

447 ((
LSE
Ë=
RCC_LSE_By∑ss
))

456 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

457 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

458 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

459 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

460 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

461 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

470 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

471 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

472 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

473 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

474 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

476 #i‚de‡
STM32F10X_CL


477 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

478 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

479 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

481 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

482 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

483 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

484 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

486 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

487 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

497 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

498 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

499 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

500 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

501 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

502 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

503 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

504 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

505 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

506 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

507 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

508 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

509 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

510 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

511 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

512 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

513 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

514 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

515 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00080000)

	)

516 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00100000)

	)

517 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00200000)

	)

519 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC00002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

528 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

529 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

530 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

531 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

532 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

533 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

534 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

535 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

536 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

537 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

538 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

539 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

540 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

541 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

542 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

543 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

544 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

545 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

546 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

547 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

548 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

549 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

550 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

551 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

552 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x40000000)

	)

554 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

564 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

565 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

566 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

567 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

568 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

570 #i‚de‡
STM32F10X_CL


571 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

572 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

573 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

575 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

576 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

577 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

578 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

580 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
Ë|| \

	)

581 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

582 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

583 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

584 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

595 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

596 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

597 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

598 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

599 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

600 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

601 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

602 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

603 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

604 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

605 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

607 #i‚de‡
STM32F10X_CL


608 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

609 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

610 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

611 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

612 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

613 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

615 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

616 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

617 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

618 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

619 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

620 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

621 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

622 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

623 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

626 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

647 
RCC_DeInô
();

648 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

649 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

650 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

651 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

652 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

653 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

655 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

656 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

659 #ifde‡ 
STM32F10X_CL


660 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

661 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

662 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

663 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

664 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

667 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

668 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

669 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

670 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

671 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

672 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

674 #i‚de‡
STM32F10X_CL


675 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

677 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

680 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

682 #ifde‡
STM32F10X_CL


683 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

684 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

687 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

688 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

689 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

690 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

692 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

694 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

696 #ifde‡
STM32F10X_CL


697 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

700 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

701 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

703 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

704 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

705 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

706 
RCC_CÀ¨Fœg
();

707 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

708 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

710 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h

24 #i‚de‡
__STM32F10x_RTC_H


25 
	#__STM32F10x_RTC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

59 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

60 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

61 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

62 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
Ë|| \

	)

63 ((
IT
Ë=
RTC_IT_SEC
))

72 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

73 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

74 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

75 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

76 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

77 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

78 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
Ë|| \

	)

79 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

80 ((
FLAG
Ë=
RTC_FLAG_SEC
))

81 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

103 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

104 
RTC_E¡îC⁄figMode
();

105 
RTC_ExôC⁄figMode
();

106 
uöt32_t
 
RTC_GëCou¡î
();

107 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

108 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

109 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

110 
uöt32_t
 
RTC_GëDividî
();

111 
RTC_WaôF‹La°Task
();

112 
RTC_WaôF‹Synchro
();

113 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

114 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

115 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

116 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

118 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h

24 #i‚de‡
__STM32F10x_SDIO_H


25 
	#__STM32F10x_SDIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SDIO_ClockEdge
;

51 
uöt32_t
 
SDIO_ClockBy∑ss
;

55 
uöt32_t
 
SDIO_ClockPowîSave
;

59 
uöt32_t
 
SDIO_BusWide
;

62 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

65 
uöt8_t
 
SDIO_ClockDiv
;

68 } 
	tSDIO_InôTy≥Def
;

72 
uöt32_t
 
SDIO_Argumít
;

77 
uöt32_t
 
SDIO_CmdIndex
;

79 
uöt32_t
 
SDIO_Re•⁄£
;

82 
uöt32_t
 
SDIO_Waô
;

85 
uöt32_t
 
SDIO_CPSM
;

88 } 
	tSDIO_CmdInôTy≥Def
;

92 
uöt32_t
 
SDIO_D©aTimeOut
;

94 
uöt32_t
 
SDIO_D©aLígth
;

96 
uöt32_t
 
SDIO_D©aBlockSize
;

99 
uöt32_t
 
SDIO_Tøns„rDú
;

103 
uöt32_t
 
SDIO_Tøns„rMode
;

106 
uöt32_t
 
SDIO_DPSM
;

109 } 
	tSDIO_D©aInôTy≥Def
;

123 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

124 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

125 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

126 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

135 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

136 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

137 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

138 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

147 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

148 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

149 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

150 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

159 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

160 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

161 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

162 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

163 ((
WIDE
Ë=
SDIO_BusWide_8b
))

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

174 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

175 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

176 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

185 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

186 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

187 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

197 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

198 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

199 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

200 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

201 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

202 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

203 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

204 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

205 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

206 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

207 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

208 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

209 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

210 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

211 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

212 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

213 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

214 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

215 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

216 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

217 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

218 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

219 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

220 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

221 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

230 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

239 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

240 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

241 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

242 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

244 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

253 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

254 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

255 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

256 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

257 ((
WAIT
Ë=
SDIO_Waô_Píd
))

266 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

267 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

268 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

277 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

278 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

279 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

280 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

281 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

282 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

291 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

300 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

301 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

302 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

303 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

304 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

305 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

306 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

307 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

308 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

309 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

310 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

311 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

312 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

313 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

314 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

315 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

338 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

339 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

340 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

341 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

350 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

351 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

352 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

353 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

362 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

363 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

364 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

373 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

374 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

375 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

376 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

377 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

378 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

379 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

380 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

381 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

382 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

383 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

384 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

385 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

386 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

387 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

388 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

389 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

390 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

391 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

392 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

393 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

394 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

395 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

396 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

397 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

398 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

422 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

424 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

425 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

426 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

428 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

429 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

430 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

431 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

432 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

433 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

434 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

435 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

436 ((
IT
Ë=
SDIO_IT_TXACT
) || \

437 ((
IT
Ë=
SDIO_IT_RXACT
) || \

438 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

439 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

440 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

442 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

444 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

446 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

447 ((
IT
Ë=
SDIO_IT_CEATAEND
))

449 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

459 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

460 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

461 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

462 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

483 
SDIO_DeInô
();

484 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

486 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

487 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

488 
uöt32_t
 
SDIO_GëPowîSèã
();

489 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

491 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

492 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

493 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

494 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

495 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

497 
uöt32_t
 
SDIO_GëD©aCou¡î
();

498 
uöt32_t
 
SDIO_RódD©a
();

499 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

500 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

510 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

511 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

512 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

514 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h

24 #i‚de‡
__STM32F10x_SPI_H


25 
	#__STM32F10x_SPI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
SPI_Dúe˘i⁄
;

55 
uöt16_t
 
SPI_Mode
;

58 
uöt16_t
 
SPI_D©aSize
;

61 
uöt16_t
 
SPI_CPOL
;

64 
uöt16_t
 
SPI_CPHA
;

67 
uöt16_t
 
SPI_NSS
;

71 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

77 
uöt16_t
 
SPI_Fú°Bô
;

80 
uöt16_t
 
SPI_CRCPﬁynomül
;

81 }
	tSPI_InôTy≥Def
;

90 
uöt16_t
 
I2S_Mode
;

93 
uöt16_t
 
I2S_Sènd¨d
;

96 
uöt16_t
 
I2S_D©aF‹m©
;

99 
uöt16_t
 
I2S_MCLKOuçut
;

102 
uöt32_t
 
I2S_AudioFªq
;

105 
uöt16_t
 
I2S_CPOL
;

107 }
	tI2S_InôTy≥Def
;

117 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

118 ((
PERIPH
Ë=
SPI2
) || \

119 ((
PERIPH
Ë=
SPI3
))

121 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

122 ((
PERIPH
Ë=
SPI3
))

128 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

129 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

131 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

132 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

135 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

144 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

145 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

146 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

147 ((
MODE
Ë=
SPI_Mode_Sœve
))

156 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

157 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

158 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

159 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

168 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

169 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

170 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

171 ((
CPOL
Ë=
SPI_CPOL_High
))

180 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

181 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

182 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

183 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

192 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

193 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

194 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

195 ((
NSS
Ë=
SPI_NSS_H¨d
))

204 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

205 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

206 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

207 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

208 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

209 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

210 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

211 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

212 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

219 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

228 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

229 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

230 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

231 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

240 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

241 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

242 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

243 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

244 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

245 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

247 ((
MODE
Ë=
I2S_Mode_Ma°îRx
) )

256 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

257 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

258 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

259 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

260 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

261 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

262 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

265 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

274 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

275 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

276 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

277 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

278 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

281 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

290 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

291 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

292 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

293 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

302 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

303 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

304 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

305 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

306 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

307 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

308 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

309 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

310 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

311 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

313 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
Ë&& \

	)

314 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

324 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

325 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

326 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

327 ((
CPOL
Ë=
I2S_CPOL_High
))

336 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

337 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

338 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

347 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

348 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

349 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

350 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

359 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

360 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

361 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

370 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

371 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

372 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

373 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

382 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

383 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

384 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

385 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

386 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

387 ((
IT
Ë=
SPI_I2S_IT_ERR
))

388 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

389 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

390 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

391 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

392 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

393 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

394 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

395 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

404 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

405 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

406 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

407 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

408 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

409 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

410 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

411 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

412 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

413 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

414 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

415 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

416 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

425 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

446 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

447 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

448 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

449 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

450 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

451 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

456 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

457 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

458 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

460 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

461 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

463 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

465 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

466 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

467 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

468 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

470 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h

24 #i‚de‡
__STM32F10x_TIM_H


25 
	#__STM32F10x_TIM_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

53 
uöt16_t
 
TIM_PªsˇÀr
;

56 
uöt16_t
 
TIM_Cou¡îMode
;

59 
uöt16_t
 
TIM_Pîiod
;

63 
uöt16_t
 
TIM_ClockDivisi⁄
;

66 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

74 } 
	tTIM_TimeBa£InôTy≥Def
;

82 
uöt16_t
 
TIM_OCMode
;

85 
uöt16_t
 
TIM_OuçutSèã
;

88 
uöt16_t
 
TIM_OuçutNSèã
;

92 
uöt16_t
 
TIM_Pul£
;

95 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

98 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCIdÀSèã
;

106 
uöt16_t
 
TIM_OCNIdÀSèã
;

109 } 
	tTIM_OCInôTy≥Def
;

118 
uöt16_t
 
TIM_Ch™√l
;

121 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

124 
uöt16_t
 
TIM_ICSñe˘i⁄
;

127 
uöt16_t
 
TIM_ICPªsˇÀr
;

130 
uöt16_t
 
TIM_ICFûãr
;

132 } 
	tTIM_ICInôTy≥Def
;

142 
uöt16_t
 
TIM_OSSRSèã
;

145 
uöt16_t
 
TIM_OSSISèã
;

148 
uöt16_t
 
TIM_LOCKLevñ
;

151 
uöt16_t
 
TIM_DódTime
;

155 
uöt16_t
 
TIM_Bªak
;

158 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

161 
uöt16_t
 
TIM_Autom©icOuçut
;

163 } 
	tTIM_BDTRInôTy≥Def
;

169 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

170 ((
PERIPH
Ë=
TIM2
) || \

171 ((
PERIPH
Ë=
TIM3
) || \

172 ((
PERIPH
Ë=
TIM4
) || \

173 ((
PERIPH
Ë=
TIM5
) || \

174 ((
PERIPH
Ë=
TIM6
) || \

175 ((
PERIPH
Ë=
TIM7
) || \

176 ((
PERIPH
Ë=
TIM8
) || \

177 ((
PERIPH
Ë=
TIM9
) || \

178 ((
PERIPH
Ë=
TIM10
)|| \

179 ((
PERIPH
Ë=
TIM11
)|| \

180 ((
PERIPH
Ë=
TIM12
)|| \

181 ((
PERIPH
Ë=
TIM13
)|| \

182 ((
PERIPH
Ë=
TIM14
)|| \

183 ((
PERIPH
Ë=
TIM15
)|| \

184 ((
PERIPH
Ë=
TIM16
)|| \

185 ((
PERIPH
Ë=
TIM17
))

188 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

189 ((
PERIPH
Ë=
TIM8
))

192 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

193 ((
PERIPH
Ë=
TIM8
) || \

194 ((
PERIPH
Ë=
TIM15
)|| \

195 ((
PERIPH
Ë=
TIM16
)|| \

196 ((
PERIPH
Ë=
TIM17
))

199 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

200 ((
PERIPH
Ë=
TIM2
) || \

201 ((
PERIPH
Ë=
TIM3
) || \

202 ((
PERIPH
Ë=
TIM4
) || \

203 ((
PERIPH
Ë=
TIM5
) || \

204 ((
PERIPH
Ë=
TIM8
))

207 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

208 ((
PERIPH
Ë=
TIM2
) || \

209 ((
PERIPH
Ë=
TIM3
) || \

210 ((
PERIPH
Ë=
TIM4
) || \

211 ((
PERIPH
Ë=
TIM5
) || \

212 ((
PERIPH
Ë=
TIM8
) || \

213 ((
PERIPH
Ë=
TIM15
)|| \

214 ((
PERIPH
Ë=
TIM16
)|| \

215 ((
PERIPH
Ë=
TIM17
))

218 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

219 ((
PERIPH
Ë=
TIM2
) || \

220 ((
PERIPH
Ë=
TIM3
) || \

221 ((
PERIPH
Ë=
TIM4
) || \

222 ((
PERIPH
Ë=
TIM5
) || \

223 ((
PERIPH
Ë=
TIM8
) || \

224 ((
PERIPH
Ë=
TIM15
))

227 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

228 ((
PERIPH
Ë=
TIM2
) || \

229 ((
PERIPH
Ë=
TIM3
) || \

230 ((
PERIPH
Ë=
TIM4
) || \

231 ((
PERIPH
Ë=
TIM5
) || \

232 ((
PERIPH
Ë=
TIM8
) || \

233 ((
PERIPH
Ë=
TIM9
) || \

234 ((
PERIPH
Ë=
TIM12
)|| \

235 ((
PERIPH
Ë=
TIM15
))

238 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

239 ((
PERIPH
Ë=
TIM2
) || \

240 ((
PERIPH
Ë=
TIM3
) || \

241 ((
PERIPH
Ë=
TIM4
) || \

242 ((
PERIPH
Ë=
TIM5
) || \

243 ((
PERIPH
Ë=
TIM6
) || \

244 ((
PERIPH
Ë=
TIM7
) || \

245 ((
PERIPH
Ë=
TIM8
) || \

246 ((
PERIPH
Ë=
TIM9
) || \

247 ((
PERIPH
Ë=
TIM12
)|| \

248 ((
PERIPH
Ë=
TIM15
))

251 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

252 ((
PERIPH
Ë=
TIM2
) || \

253 ((
PERIPH
Ë=
TIM3
) || \

254 ((
PERIPH
Ë=
TIM4
) || \

255 ((
PERIPH
Ë=
TIM5
) || \

256 ((
PERIPH
Ë=
TIM8
) || \

257 ((
PERIPH
Ë=
TIM9
) || \

258 ((
PERIPH
Ë=
TIM10
)|| \

259 ((
PERIPH
Ë=
TIM11
)|| \

260 ((
PERIPH
Ë=
TIM12
)|| \

261 ((
PERIPH
Ë=
TIM13
)|| \

262 ((
PERIPH
Ë=
TIM14
)|| \

263 ((
PERIPH
Ë=
TIM15
)|| \

264 ((
PERIPH
Ë=
TIM16
)|| \

265 ((
PERIPH
Ë=
TIM17
))

268 
	#IS_TIM_LIST9_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

269 ((
PERIPH
Ë=
TIM2
) || \

270 ((
PERIPH
Ë=
TIM3
) || \

271 ((
PERIPH
Ë=
TIM4
) || \

272 ((
PERIPH
Ë=
TIM5
) || \

273 ((
PERIPH
Ë=
TIM6
) || \

274 ((
PERIPH
Ë=
TIM7
) || \

275 ((
PERIPH
Ë=
TIM8
) || \

276 ((
PERIPH
Ë=
TIM15
)|| \

277 ((
PERIPH
Ë=
TIM16
)|| \

278 ((
PERIPH
Ë=
TIM17
))

288 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

289 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

290 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

291 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

292 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

293 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

294 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

295 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

296 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

297 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

298 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

299 ((
MODE
Ë=
TIM_OCMode_PWM2
))

300 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

301 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

302 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

303 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

304 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

305 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

306 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

307 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

316 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

317 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

318 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

319 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

328 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

329 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

330 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

331 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

332 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

333 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

334 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

335 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

336 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

337 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

338 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

339 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

340 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

349 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

350 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

351 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

352 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

353 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

354 ((
DIV
Ë=
TIM_CKD_DIV4
))

363 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

364 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

365 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

366 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

367 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

368 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

369 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

370 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

371 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

372 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

381 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

382 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

383 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

384 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

393 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

394 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

395 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

396 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

405 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

406 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

407 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

408 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

417 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

418 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

419 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

420 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

429 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

430 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

431 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

432 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

441 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

442 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

443 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

444 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

453 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

454 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

455 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

456 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

465 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

466 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

467 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

468 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

477 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

478 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

479 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

480 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

489 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

490 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

491 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

492 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

493 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

494 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

495 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

496 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

505 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

506 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

507 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

508 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

517 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

518 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

519 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

520 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

529 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

530 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

531 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

532 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

541 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

542 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

543 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

544 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

553 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

554 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

556 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

557 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

558 
	#IS_TIM_IC_POLARITY_LITE
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

559 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

560 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

569 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

571 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

573 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

574 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

575 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

576 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

585 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

586 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

587 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

588 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

589 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

590 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

591 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

592 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

601 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

602 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

603 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

604 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

605 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

606 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

607 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

608 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

609 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

611 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

612 ((
IT
Ë=
TIM_IT_CC1
) || \

613 ((
IT
Ë=
TIM_IT_CC2
) || \

614 ((
IT
Ë=
TIM_IT_CC3
) || \

615 ((
IT
Ë=
TIM_IT_CC4
) || \

616 ((
IT
Ë=
TIM_IT_COM
) || \

617 ((
IT
Ë=
TIM_IT_Triggî
) || \

618 ((
IT
Ë=
TIM_IT_Bªak
))

627 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

629 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

630 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

631 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

632 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

633 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

634 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

635 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

636 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

637 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

638 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

639 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

640 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

641 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

642 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

643 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

644 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

645 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

646 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

647 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

648 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

649 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

650 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

651 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

652 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

653 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

654 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

655 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

656 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

657 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

658 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

659 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

660 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

661 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

662 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

663 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

664 ((
BASE
Ë=
TIM_DMABa£_DCR
))

673 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

674 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

675 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

676 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

677 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

678 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

679 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

680 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

681 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

682 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

683 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

684 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

685 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

686 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

687 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

688 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

689 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

691 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
Ë|| \

	)

692 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

693 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

694 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

695 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

696 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

697 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

698 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

699 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

700 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

701 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

702 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

703 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

704 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

705 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

706 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

707 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

708 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

717 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

718 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

719 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

720 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

721 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

722 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

723 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

724 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

734 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

735 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

736 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

737 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

738 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

739 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

740 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

741 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

750 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

751 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

752 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

753 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

754 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

755 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

756 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

757 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

758 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

759 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

760 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

761 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

762 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

763 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

764 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

765 ((
SELECTION
Ë=
TIM_TS_ETRF
))

766 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

767 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

768 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

769 ((
SELECTION
Ë=
TIM_TS_ITR3
))

778 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

779 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

780 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

781 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
Ë|| \

	)

782 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

783 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

791 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

792 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

793 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

794 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

803 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

804 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

805 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

806 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

815 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

816 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

817 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

818 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

827 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

828 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

829 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

830 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

831 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

832 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

842 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

843 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

844 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

845 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

846 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

847 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

848 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

849 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

850 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

860 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

863 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

864 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

865 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

874 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

875 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

876 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

877 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

886 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

887 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

888 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

889 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

899 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

900 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

901 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

902 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

911 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

912 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

913 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

914 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

915 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

916 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

917 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

918 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

919 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

920 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

921 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

922 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

923 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

924 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

925 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

926 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

935 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

936 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

937 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

938 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

939 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

940 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

941 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

942 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

951 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

952 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

953 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

954 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

963 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

964 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

965 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

966 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

967 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

968 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

969 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

970 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

971 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

972 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

973 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

974 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

975 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

976 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

977 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

978 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

979 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

980 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

981 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

982 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

983 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

984 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

985 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

986 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

989 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

998 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1007 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1016 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

1017 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

1018 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

1019 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1020 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1021 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1022 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1023 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1024 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1025 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1026 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1027 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1028 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1029 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1030 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1031 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1032 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1033 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1054 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1055 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1056 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1057 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1058 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1059 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1060 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1061 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1062 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1063 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1064 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1065 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1066 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1067 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1068 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1069 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1070 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1071 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1072 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1073 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1074 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1075 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1076 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1077 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1078 
uöt16_t
 
ExtTRGFûãr
);

1079 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1080 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1081 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1082 
uöt16_t
 
ExtTRGFûãr
);

1083 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1084 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1085 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1086 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1087 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1088 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1089 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1090 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1091 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1092 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1093 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1094 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1095 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1097 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1098 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1099 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1100 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1101 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1102 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1103 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1104 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1105 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1106 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1107 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1108 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1109 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1110 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1111 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1112 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1113 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1114 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1115 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1116 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1117 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1118 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1119 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1120 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1121 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1126 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1127 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1128 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1129 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1130 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1131 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1132 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1133 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1134 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1135 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1136 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1137 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1138 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1139 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1140 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1141 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1142 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1143 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1144 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1145 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1147 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h

24 #i‚de‡
__STM32F10x_USART_H


25 
	#__STM32F10x_USART_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
USART_BaudR©e
;

57 
uöt16_t
 
USART_W‹dLígth
;

60 
uöt16_t
 
USART_St›Bôs
;

63 
uöt16_t
 
USART_P¨ôy
;

70 
uöt16_t
 
USART_Mode
;

73 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

76 } 
	tUSART_InôTy≥Def
;

85 
uöt16_t
 
USART_Clock
;

88 
uöt16_t
 
USART_CPOL
;

91 
uöt16_t
 
USART_CPHA
;

94 
uöt16_t
 
USART_La°Bô
;

97 } 
	tUSART_ClockInôTy≥Def
;

107 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

108 ((
PERIPH
Ë=
USART2
) || \

109 ((
PERIPH
Ë=
USART3
) || \

110 ((
PERIPH
Ë=
UART4
) || \

111 ((
PERIPH
Ë=
UART5
))

113 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

114 ((
PERIPH
Ë=
USART2
) || \

115 ((
PERIPH
Ë=
USART3
))

117 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

118 ((
PERIPH
Ë=
USART2
) || \

119 ((
PERIPH
Ë=
USART3
) || \

120 ((
PERIPH
Ë=
UART4
))

125 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

126 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

128 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

129 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

138 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

139 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

140 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

141 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

142 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

143 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

145 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

154 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

155 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

156 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

157 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

158 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

159 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

168 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

169 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

170 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

182 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

183 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

186 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

194 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

195 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

196 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

197 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

206 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

207 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

208 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

218 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

219 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

220 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

230 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

231 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

232 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

233 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

242 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

243 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

244 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

245 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

246 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

247 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

248 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

249 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

250 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

251 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

252 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

253 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

254 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

255 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

256 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

257 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

258 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

259 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

260 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

261 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

262 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

263 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

272 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

273 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

274 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

284 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

285 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

286 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

287 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

296 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

297 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

298 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

299 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

300 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

309 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

310 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

311 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

312 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

321 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

322 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

323 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

324 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

325 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

326 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

327 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

328 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

329 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

330 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

331 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

332 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

333 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

334 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

335 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

337 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

338 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
Ë&&\

	)

339 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

340 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

341 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

342 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

343 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

365 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

366 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

368 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

370 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

373 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

374 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

375 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

376 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

377 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

378 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

379 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

381 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

382 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

383 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

388 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

389 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

390 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

391 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

392 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

393 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

395 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h

24 #i‚de‡
__STM32F10x_WWDG_H


25 
	#__STM32F10x_WWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

59 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

60 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

61 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

62 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

66 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

67 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

88 
WWDG_DeInô
();

89 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

90 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

91 
WWDG_E«bÀIT
();

92 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

93 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/misc.c

24 
	~"misc.h
"

47 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

96 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

99 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

102 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

103 
	}
}

112 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

114 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

117 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

118 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

119 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

121 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

124 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

125 
tmµª
 = (0x4 - 
tmµri‹ôy
);

126 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

128 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

129 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

130 
tmµri‹ôy
 =Åmppriority << 0x04;

132 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

135 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

136 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

141 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

142 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

144 
	}
}

156 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

159 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

160 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

162 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

163 
	}
}

175 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

178 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

181 i‡(
NewSèã
 !
DISABLE
)

183 
SCB
->
SCR
 |
LowPowîMode
;

187 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

189 
	}
}

199 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

202 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

203 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

205 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

209 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

211 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c

23 
	~"°m32f10x_adc.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

51 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

52 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

55 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

56 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

59 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

60 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

63 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

66 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

69 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

72 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

73 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

76 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

77 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

80 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

83 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

86 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

89 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

90 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

93 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

94 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

97 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

100 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

101 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

104 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

108 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

111 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

112 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

115 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

118 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

120 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

123 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

126 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

129 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

130 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

133 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

134 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

137 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

140 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

179 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

182 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

184 i‡(
ADCx
 =
ADC1
)

187 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

189 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

191 i‡(
ADCx
 =
ADC2
)

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

196 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

200 i‡(
ADCx
 =
ADC3
)

203 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

205 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

208 
	}
}

218 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

220 
uöt32_t
 
tm¥eg1
 = 0;

221 
uöt8_t
 
tm¥eg2
 = 0;

223 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

224 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_InôSåu˘
->
ADC_Mode
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

227 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

228 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

229 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
));

233 
tm¥eg1
 = 
ADCx
->
CR1
;

235 
tm¥eg1
 &
CR1_CLEAR_Mask
;

239 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

241 
ADCx
->
CR1
 = 
tm¥eg1
;

245 
tm¥eg1
 = 
ADCx
->
CR2
;

247 
tm¥eg1
 &
CR2_CLEAR_Mask
;

252 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

253 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

255 
ADCx
->
CR2
 = 
tm¥eg1
;

259 
tm¥eg1
 = 
ADCx
->
SQR1
;

261 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

264 
tm¥eg2
 |(
uöt8_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - (uint8_t)1);

265 
tm¥eg1
 |(
uöt32_t
)
tm¥eg2
 << 20;

267 
ADCx
->
SQR1
 = 
tm¥eg1
;

268 
	}
}

275 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

279 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

281 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

283 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

285 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

287 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

289 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

290 
	}
}

299 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

302 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

303 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

304 i‡(
NewSèã
 !
DISABLE
)

307 
ADCx
->
CR2
 |
CR2_ADON_Së
;

312 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

314 
	}
}

324 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

327 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

328 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

329 i‡(
NewSèã
 !
DISABLE
)

332 
ADCx
->
CR2
 |
CR2_DMA_Së
;

337 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

339 
	}
}

353 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

355 
uöt8_t
 
ômask
 = 0;

357 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

358 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

361 
ômask
 = (
uöt8_t
)
ADC_IT
;

362 i‡(
NewSèã
 !
DISABLE
)

365 
ADCx
->
CR1
 |
ômask
;

370 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

372 
	}
}

379 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

382 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

384 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

385 
	}
}

392 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

394 
FœgSètus
 
bô°©us
 = 
RESET
;

396 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

398 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

401 
bô°©us
 = 
SET
;

406 
bô°©us
 = 
RESET
;

409  
bô°©us
;

410 
	}
}

417 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

420 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

422 
ADCx
->
CR2
 |
CR2_CAL_Së
;

423 
	}
}

430 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

432 
FœgSètus
 
bô°©us
 = 
RESET
;

434 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

436 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

439 
bô°©us
 = 
SET
;

444 
bô°©us
 = 
RESET
;

447  
bô°©us
;

448 
	}
}

457 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

460 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

461 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

462 i‡(
NewSèã
 !
DISABLE
)

466 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

472 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

474 
	}
}

481 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

483 
FœgSètus
 
bô°©us
 = 
RESET
;

485 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

487 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

490 
bô°©us
 = 
SET
;

495 
bô°©us
 = 
RESET
;

498  
bô°©us
;

499 
	}
}

509 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

511 
uöt32_t
 
tm¥eg1
 = 0;

512 
uöt32_t
 
tm¥eg2
 = 0;

514 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

515 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

517 
tm¥eg1
 = 
ADCx
->
CR1
;

519 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

521 
tm¥eg2
 = 
Numbî
 - 1;

522 
tm¥eg1
 |
tm¥eg2
 << 13;

524 
ADCx
->
CR1
 = 
tm¥eg1
;

525 
	}
}

536 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

539 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 i‡(
NewSèã
 !
DISABLE
)

544 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

549 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

551 
	}
}

590 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

592 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

594 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

595 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

596 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

597 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

599 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

602 
tm¥eg1
 = 
ADCx
->
SMPR1
;

604 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

606 
tm¥eg1
 &~
tm¥eg2
;

608 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

610 
tm¥eg1
 |
tm¥eg2
;

612 
ADCx
->
SMPR1
 = 
tm¥eg1
;

617 
tm¥eg1
 = 
ADCx
->
SMPR2
;

619 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

621 
tm¥eg1
 &~
tm¥eg2
;

623 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

625 
tm¥eg1
 |
tm¥eg2
;

627 
ADCx
->
SMPR2
 = 
tm¥eg1
;

630 i‡(
R™k
 < 7)

633 
tm¥eg1
 = 
ADCx
->
SQR3
;

635 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

637 
tm¥eg1
 &~
tm¥eg2
;

639 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

641 
tm¥eg1
 |
tm¥eg2
;

643 
ADCx
->
SQR3
 = 
tm¥eg1
;

646 i‡(
R™k
 < 13)

649 
tm¥eg1
 = 
ADCx
->
SQR2
;

651 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

653 
tm¥eg1
 &~
tm¥eg2
;

655 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

657 
tm¥eg1
 |
tm¥eg2
;

659 
ADCx
->
SQR2
 = 
tm¥eg1
;

665 
tm¥eg1
 = 
ADCx
->
SQR1
;

667 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

669 
tm¥eg1
 &~
tm¥eg2
;

671 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

673 
tm¥eg1
 |
tm¥eg2
;

675 
ADCx
->
SQR1
 = 
tm¥eg1
;

677 
	}
}

686 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

689 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

690 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

691 i‡(
NewSèã
 !
DISABLE
)

694 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

699 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

701 
	}
}

708 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

711 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

713  (
uöt16_t
Ë
ADCx
->
DR
;

714 
	}
}

720 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

723  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

724 
	}
}

734 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

737 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

738 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

739 i‡(
NewSèã
 !
DISABLE
)

742 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

747 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

749 
	}
}

760 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

763 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

764 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

765 i‡(
NewSèã
 !
DISABLE
)

768 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

773 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

775 
	}
}

799 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

801 
uöt32_t
 
tm¥eg
 = 0;

803 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

804 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

806 
tm¥eg
 = 
ADCx
->
CR2
;

808 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

810 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

812 
ADCx
->
CR2
 = 
tm¥eg
;

813 
	}
}

824 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

827 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

828 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

829 i‡(
NewSèã
 !
DISABLE
)

832 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

837 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

839 
	}
}

849 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

852 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

853 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

854 i‡(
NewSèã
 !
DISABLE
)

858 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

864 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

866 
	}
}

873 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

875 
FœgSètus
 
bô°©us
 = 
RESET
;

877 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

879 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

882 
bô°©us
 = 
SET
;

887 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

930 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

932 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

934 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

935 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

936 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

937 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

939 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

942 
tm¥eg1
 = 
ADCx
->
SMPR1
;

944 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

946 
tm¥eg1
 &~
tm¥eg2
;

948 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

950 
tm¥eg1
 |
tm¥eg2
;

952 
ADCx
->
SMPR1
 = 
tm¥eg1
;

957 
tm¥eg1
 = 
ADCx
->
SMPR2
;

959 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

961 
tm¥eg1
 &~
tm¥eg2
;

963 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

965 
tm¥eg1
 |
tm¥eg2
;

967 
ADCx
->
SMPR2
 = 
tm¥eg1
;

971 
tm¥eg1
 = 
ADCx
->
JSQR
;

973 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

975 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

977 
tm¥eg1
 &~
tm¥eg2
;

979 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

981 
tm¥eg1
 |
tm¥eg2
;

983 
ADCx
->
JSQR
 = 
tm¥eg1
;

984 
	}
}

993 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

995 
uöt32_t
 
tm¥eg1
 = 0;

996 
uöt32_t
 
tm¥eg2
 = 0;

998 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

999 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1002 
tm¥eg1
 = 
ADCx
->
JSQR
;

1004 
tm¥eg1
 &
JSQR_JL_Re£t
;

1006 
tm¥eg2
 = 
Lígth
 - 1;

1007 
tm¥eg1
 |
tm¥eg2
 << 20;

1009 
ADCx
->
JSQR
 = 
tm¥eg1
;

1010 
	}
}

1025 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1027 
__IO
 
uöt32_t
 
tmp
 = 0;

1030 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1031 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1032 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1034 
tmp
 = (
uöt32_t
)
ADCx
;

1035 
tmp
 +
ADC_Inje˘edCh™√l
;

1038 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1039 
	}
}

1052 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1054 
__IO
 
uöt32_t
 
tmp
 = 0;

1057 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1058 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1060 
tmp
 = (
uöt32_t
)
ADCx
;

1061 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

1064  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1065 
	}
}

1082 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1084 
uöt32_t
 
tm¥eg
 = 0;

1086 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1087 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

1089 
tm¥eg
 = 
ADCx
->
CR1
;

1091 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1093 
tm¥eg
 |
ADC_A«logW©chdog
;

1095 
ADCx
->
CR1
 = 
tm¥eg
;

1096 
	}
}

1107 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1108 
uöt16_t
 
LowThªshﬁd
)

1111 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1112 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

1113 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

1115 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1117 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1118 
	}
}

1145 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1147 
uöt32_t
 
tm¥eg
 = 0;

1149 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1150 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1152 
tm¥eg
 = 
ADCx
->
CR1
;

1154 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1156 
tm¥eg
 |
ADC_Ch™√l
;

1158 
ADCx
->
CR1
 = 
tm¥eg
;

1159 
	}
}

1167 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1170 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1171 i‡(
NewSèã
 !
DISABLE
)

1174 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1179 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1181 
	}
}

1195 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1197 
FœgSètus
 
bô°©us
 = 
RESET
;

1199 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1200 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1202 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1205 
bô°©us
 = 
SET
;

1210 
bô°©us
 = 
RESET
;

1213  
bô°©us
;

1214 
	}
}

1228 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1231 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1232 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1234 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1235 
	}
}

1247 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1249 
ITSètus
 
bô°©us
 = 
RESET
;

1250 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1252 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1253 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

1255 
ômask
 = 
ADC_IT
 >> 8;

1257 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1259 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1262 
bô°©us
 = 
SET
;

1267 
bô°©us
 = 
RESET
;

1270  
bô°©us
;

1271 
	}
}

1283 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1285 
uöt8_t
 
ômask
 = 0;

1287 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1288 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1290 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1292 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1293 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c

23 
	~"°m32f10x_bkp.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

54 
	#TPAL_BôNumbî
 0x01

	)

55 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

58 
	#TPE_BôNumbî
 0x00

	)

59 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

65 
	#TPIE_BôNumbî
 0x02

	)

66 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

69 
	#TIF_BôNumbî
 0x09

	)

70 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

73 
	#TEF_BôNumbî
 0x08

	)

74 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

79 
	#RTCCR_CAL_MASK
 ((
uöt16_t
)0xFF80)

	)

80 
	#RTCCR_MASK
 ((
uöt16_t
)0xFC7F)

	)

120 
	$BKP_DeInô
()

122 
	`RCC_BackupRe£tCmd
(
ENABLE
);

123 
	`RCC_BackupRe£tCmd
(
DISABLE
);

124 
	}
}

134 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

137 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

138 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

139 
	}
}

147 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

150 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

151 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

152 
	}
}

160 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

163 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

164 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

165 
	}
}

180 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

182 
uöt16_t
 
tm¥eg
 = 0;

184 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

185 
tm¥eg
 = 
BKP
->
RTCCR
;

187 
tm¥eg
 &
RTCCR_MASK
;

190 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

192 
BKP
->
RTCCR
 = 
tm¥eg
;

193 
	}
}

201 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

203 
uöt16_t
 
tm¥eg
 = 0;

205 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

206 
tm¥eg
 = 
BKP
->
RTCCR
;

208 
tm¥eg
 &
RTCCR_CAL_MASK
;

210 
tm¥eg
 |
CÆibøti⁄VÆue
;

212 
BKP
->
RTCCR
 = 
tm¥eg
;

213 
	}
}

222 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

224 
__IO
 
uöt32_t
 
tmp
 = 0;

227 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

229 
tmp
 = (
uöt32_t
)
BKP_BASE
;

230 
tmp
 +
BKP_DR
;

232 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

233 
	}
}

241 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

243 
__IO
 
uöt32_t
 
tmp
 = 0;

246 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

248 
tmp
 = (
uöt32_t
)
BKP_BASE
;

249 
tmp
 +
BKP_DR
;

251  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

252 
	}
}

259 
FœgSètus
 
	$BKP_GëFœgSètus
()

261  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

262 
	}
}

269 
	$BKP_CÀ¨Fœg
()

272 
BKP
->
CSR
 |
BKP_CSR_CTE
;

273 
	}
}

280 
ITSètus
 
	$BKP_GëITSètus
()

282  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

283 
	}
}

290 
	$BKP_CÀ¨ITPídögBô
()

293 
BKP
->
CSR
 |
BKP_CSR_CTI
;

294 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c

23 
	~"°m32f10x_ˇn.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

52 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

55 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

58 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

60 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

65 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

67 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

69 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

71 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

73 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

76 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

77 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

78 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

82 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

107 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

122 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

125 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

127 i‡(
CANx
 =
CAN1
)

130 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

132 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

137 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

141 
	}
}

154 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

156 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

157 
uöt32_t
 
waô_ack
 = 0x00000000;

159 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

160 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

161 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

162 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

163 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

164 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

165 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

166 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

167 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

168 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

169 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

170 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

173 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

176 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

179 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

181 
waô_ack
++;

185 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

187 
InôSètus
 = 
CAN_InôSètus_Faûed
;

192 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

194 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

198 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

202 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

204 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

208 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

212 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

214 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

218 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

222 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

224 
CANx
->
MCR
 |
CAN_MCR_NART
;

228 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

232 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

234 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

238 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

242 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

244 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

248 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

252 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

253 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

254 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

255 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

256 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

259 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

262 
waô_ack
 = 0;

264 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

266 
waô_ack
++;

270 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

272 
InôSètus
 = 
CAN_InôSètus_Faûed
;

276 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

281  
InôSètus
;

282 
	}
}

292 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

294 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

296 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

297 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

298 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

299 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

300 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

302 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

305 
CAN1
->
FMR
 |
FMR_FINIT
;

308 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

311 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

314 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

318 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

319 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

320 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

324 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

325 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

326 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

329 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

332 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

334 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

335 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

336 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

338 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

339 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

340 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

344 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

347 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

352 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

356 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

359 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

362 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

365 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

369 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

371 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

375 
CAN1
->
FMR
 &~
FMR_FINIT
;

376 
	}
}

384 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

389 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

392 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

395 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

398 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

401 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

404 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

407 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

410 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

413 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

416 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

419 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

420 
	}
}

428 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

431 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

434 
CAN1
->
FMR
 |
FMR_FINIT
;

437 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

438 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

441 
CAN1
->
FMR
 &~
FMR_FINIT
;

442 
	}
}

451 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

455 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

457 i‡(
NewSèã
 !
DISABLE
)

460 
CANx
->
MCR
 |
MCR_DBF
;

465 
CANx
->
MCR
 &~
MCR_DBF
;

467 
	}
}

481 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

486 i‡(
NewSèã
 !
DISABLE
)

489 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

492 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

493 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

494 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

499 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

502 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

503 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

504 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

506 
	}
}

515 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

517 
uöt8_t
 
å™smô_maûbox
 = 0;

519 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

520 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

521 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

522 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

525 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

527 
å™smô_maûbox
 = 0;

529 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

531 
å™smô_maûbox
 = 1;

533 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

535 
å™smô_maûbox
 = 2;

539 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

542 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

545 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

546 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

548 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

549 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

550 
TxMesßge
->
RTR
);

554 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

555 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

556 
TxMesßge
->
IDE
 | \

557 
TxMesßge
->
RTR
);

561 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

562 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

563 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

566 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

567 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

568 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

569 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

570 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

571 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

572 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

573 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

575 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

577  
å™smô_maûbox
;

578 
	}
}

589 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

591 
uöt32_t
 
°©e
 = 0;

594 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

595 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

597 
TønsmôMaûbox
)

599 (
CAN_TXMAILBOX_0
):

600 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

602 (
CAN_TXMAILBOX_1
):

603 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

605 (
CAN_TXMAILBOX_2
):

606 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

609 
°©e
 = 
CAN_TxSètus_Faûed
;

612 
°©e
)

615 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

618 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

620 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

622 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

625 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

627 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

629 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

631 : 
°©e
 = 
CAN_TxSètus_Faûed
;

634  (
uöt8_t
Ë
°©e
;

635 
	}
}

643 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

646 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

647 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

649 
Maûbox
)

651 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

653 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

655 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

660 
	}
}

671 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

674 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

675 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

677 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

678 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

680 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

684 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

687 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

689 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

691 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

693 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

694 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

695 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

696 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

697 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

698 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

699 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

700 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

703 i‡(
FIFONumbî
 =
CAN_FIFO0
)

705 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

710 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

712 
	}
}

720 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

723 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

724 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

726 i‡(
FIFONumbî
 =
CAN_FIFO0
)

728 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

733 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

735 
	}
}

743 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

745 
uöt8_t
 
mesßge_≥ndög
=0;

747 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

748 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

749 i‡(
FIFONumbî
 =
CAN_FIFO0
)

751 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

753 i‡(
FIFONumbî
 =
CAN_FIFO1
)

755 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

759 
mesßge_≥ndög
 = 0;

761  
mesßge_≥ndög
;

762 
	}
}

774 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

776 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

779 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

782 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

783 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

785 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

788 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

791 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

793 
timeout
--;

795 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

797 
°©us
 = 
CAN_ModeSètus_Faûed
;

801 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

804 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

807 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

810 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

812 
timeout
--;

814 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

816 
°©us
 = 
CAN_ModeSètus_Faûed
;

820 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

823 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

826 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

829 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

831 
timeout
--;

833 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

835 
°©us
 = 
CAN_ModeSètus_Faûed
;

839 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

844 
°©us
 = 
CAN_ModeSètus_Faûed
;

847  (
uöt8_t
Ë
°©us
;

848 
	}
}

856 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

858 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

861 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

864 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

867 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

870 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

873  (
uöt8_t
)
¶ìp°©us
;

874 
	}
}

882 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

884 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

885 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

888 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

891 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

894 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

896 
waô_¶ak
--;

898 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

901 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

904  (
uöt8_t
)
wakeup°©us
;

905 
	}
}

922 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

924 
uöt8_t
 
îr‹code
=0;

927 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

930 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

933  
îr‹code
;

934 
	}
}

946 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

948 
uöt8_t
 
cou¡î
=0;

951 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

954 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

957  
cou¡î
;

958 
	}
}

966 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

968 
uöt8_t
 
cou¡î
=0;

971 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

974 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

977  
cou¡î
;

978 
	}
}

1003 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1006 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1007 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1008 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1010 i‡(
NewSèã
 !
DISABLE
)

1013 
CANx
->
IER
 |
CAN_IT
;

1018 
CANx
->
IER
 &~
CAN_IT
;

1020 
	}
}

1043 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1045 
FœgSètus
 
bô°©us
 = 
RESET
;

1048 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1049 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1052 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1055 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1058 
bô°©us
 = 
SET
;

1063 
bô°©us
 = 
RESET
;

1066 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1069 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1072 
bô°©us
 = 
SET
;

1077 
bô°©us
 = 
RESET
;

1080 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1083 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1086 
bô°©us
 = 
SET
;

1091 
bô°©us
 = 
RESET
;

1094 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1097 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1100 
bô°©us
 = 
SET
;

1105 
bô°©us
 = 
RESET
;

1111 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1114 
bô°©us
 = 
SET
;

1119 
bô°©us
 = 
RESET
;

1123  
bô°©us
;

1124 
	}
}

1143 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1145 
uöt32_t
 
Êagtmp
=0;

1147 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1148 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1150 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1153 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1157 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1159 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1162 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1164 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1167 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1169 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1172 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1177 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1180 
	}
}

1203 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1205 
ITSètus
 
ô°©us
 = 
RESET
;

1207 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1208 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1211 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1214 
CAN_IT
)

1216 
CAN_IT_TME
:

1218 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1220 
CAN_IT_FMP0
:

1222 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1224 
CAN_IT_FF0
:

1226 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1228 
CAN_IT_FOV0
:

1230 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1232 
CAN_IT_FMP1
:

1234 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1236 
CAN_IT_FF1
:

1238 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1240 
CAN_IT_FOV1
:

1242 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1244 
CAN_IT_WKU
:

1246 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1248 
CAN_IT_SLK
:

1250 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1252 
CAN_IT_EWG
:

1254 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1256 
CAN_IT_EPV
:

1258 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1260 
CAN_IT_BOF
:

1262 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1264 
CAN_IT_LEC
:

1266 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1268 
CAN_IT_ERR
:

1270 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1274 
ô°©us
 = 
RESET
;

1281 
ô°©us
 = 
RESET
;

1285  
ô°©us
;

1286 
	}
}

1306 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1309 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1310 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1312 
CAN_IT
)

1314 
CAN_IT_TME
:

1316 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1318 
CAN_IT_FF0
:

1320 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1322 
CAN_IT_FOV0
:

1324 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1326 
CAN_IT_FF1
:

1328 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1330 
CAN_IT_FOV1
:

1332 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1334 
CAN_IT_WKU
:

1336 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1338 
CAN_IT_SLK
:

1340 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1342 
CAN_IT_EWG
:

1344 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1348 
CAN_IT_EPV
:

1350 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1354 
CAN_IT_BOF
:

1356 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1360 
CAN_IT_LEC
:

1362 
CANx
->
ESR
 = 
RESET
;

1364 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1366 
CAN_IT_ERR
:

1368 
CANx
->
ESR
 = 
RESET
;

1370 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1377 
	}
}

1385 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1387 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1389 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1392 
≥ndögbô°©us
 = 
SET
;

1397 
≥ndögbô°©us
 = 
RESET
;

1399  
≥ndögbô°©us
;

1400 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c

23 
	~"°m32f10x_˚c.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CEC_OFFSET
 (
CEC_BASE
 - 
PERIPH_BASE
)

	)

54 
	#CFGR_OFFSET
 (
CEC_OFFSET
 + 0x00)

	)

55 
	#PE_BôNumbî
 0x00

	)

56 
	#CFGR_PE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
PE_BôNumbî
 * 4))

	)

59 
	#IE_BôNumbî
 0x01

	)

60 
	#CFGR_IE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
IE_BôNumbî
 * 4))

	)

65 
	#CSR_OFFSET
 (
CEC_OFFSET
 + 0x10)

	)

66 
	#TSOM_BôNumbî
 0x00

	)

67 
	#CSR_TSOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TSOM_BôNumbî
 * 4))

	)

70 
	#TEOM_BôNumbî
 0x01

	)

71 
	#CSR_TEOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEOM_BôNumbî
 * 4))

	)

73 
	#CFGR_CLEAR_Mask
 (
uöt8_t
)(0xF3Ë

	)

74 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFFË

	)

118 
	$CEC_DeInô
()

121 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
ENABLE
);

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
DISABLE
);

124 
	}
}

135 
	$CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

137 
uöt16_t
 
tm¥eg
 = 0;

140 
	`as£π_∑øm
(
	`IS_CEC_BIT_TIMING_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôTimögMode
));

141 
	`as£π_∑øm
(
	`IS_CEC_BIT_PERIOD_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôPîiodMode
));

145 
tm¥eg
 = 
CEC
->
CFGR
;

148 
tm¥eg
 &
CFGR_CLEAR_Mask
;

151 
tm¥eg
 |(
uöt16_t
)(
CEC_InôSåu˘
->
CEC_BôTimögMode
 | CEC_InôSåu˘->
CEC_BôPîiodMode
);

154 
CEC
->
CFGR
 = 
tm¥eg
;

156 
	}
}

164 
	$CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

167 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

169 *(
__IO
 
uöt32_t
 *Ë
CFGR_PE_BB
 = (uöt32_t)
NewSèã
;

171 if(
NewSèã
 =
DISABLE
)

174 (
CEC
->
CFGR
 & 
CEC_CFGR_PE
Ë!(
uöt32_t
)
RESET
)

178 
	}
}

186 
	$CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

189 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

191 *(
__IO
 
uöt32_t
 *Ë
CFGR_IE_BB
 = (uöt32_t)
NewSèã
;

192 
	}
}

199 
	$CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
)

202 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
CEC_OwnAddªss
));

205 
CEC
->
OAR
 = 
CEC_OwnAddªss
;

206 
	}
}

213 
	$CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
)

216 
	`as£π_∑øm
(
	`IS_CEC_PRESCALER
(
CEC_PªsˇÀr
));

219 
CEC
->
PRES
 = 
CEC_PªsˇÀr
;

220 
	}
}

227 
	$CEC_SídD©aByã
(
uöt8_t
 
D©a
)

230 
CEC
->
TXD
 = 
D©a
 ;

231 
	}
}

239 
uöt8_t
 
	$CEC_Re˚iveD©aByã
()

242  (
uöt8_t
)(
CEC
->
RXD
);

243 
	}
}

250 
	$CEC_SèπOfMesßge
()

253 *(
__IO
 
uöt32_t
 *Ë
CSR_TSOM_BB
 = (uint32_t)0x1;

254 
	}
}

262 
	$CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

268 *(
__IO
 
uöt32_t
 *Ë
CSR_TEOM_BB
 = (uöt32_t)
NewSèã
;

269 
	}
}

291 
FœgSètus
 
	$CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
)

293 
FœgSètus
 
bô°©us
 = 
RESET
;

294 
uöt32_t
 
˚¸eg
 = 0, 
˚cba£
 = 0;

297 
	`as£π_∑øm
(
	`IS_CEC_GET_FLAG
(
CEC_FLAG
));

300 
˚cba£
 = (
uöt32_t
)(
CEC_BASE
);

303 
˚¸eg
 = 
CEC_FLAG
 >> 28;

306 
CEC_FLAG
 &
FLAG_Mask
;

308 if(
˚¸eg
 != 0)

311 
CEC_FLAG
 = (
uöt32_t
)(CEC_FLAG >> 16);

314 
˚cba£
 += 0xC;

319 
˚cba£
 += 0x10;

322 if(((*(
__IO
 
uöt32_t
 *)
˚cba£
Ë& 
CEC_FLAG
Ë!(uöt32_t)
RESET
)

325 
bô°©us
 = 
SET
;

330 
bô°©us
 = 
RESET
;

334  
bô°©us
;

335 
	}
}

349 
	$CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
)

351 
uöt32_t
 
tmp
 = 0x0;

354 
	`as£π_∑øm
(
	`IS_CEC_CLEAR_FLAG
(
CEC_FLAG
));

356 
tmp
 = 
CEC
->
CSR
 & 0x2;

359 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_FLAG
Ë& 0xFFFFFFFCË| 
tmp
);

360 
	}
}

372 
ITSètus
 
	$CEC_GëITSètus
(
uöt8_t
 
CEC_IT
)

374 
ITSètus
 
bô°©us
 = 
RESET
;

375 
uöt32_t
 
íabÀ°©us
 = 0;

378 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

381 
íabÀ°©us
 = (
CEC
->
CFGR
 & (
uöt8_t
)
CEC_CFGR_IE
) ;

384 i‡(((
CEC
->
CSR
 & 
CEC_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

387 
bô°©us
 = 
SET
;

392 
bô°©us
 = 
RESET
;

395  
bô°©us
;

396 
	}
}

408 
	$CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
)

410 
uöt32_t
 
tmp
 = 0x0;

413 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

415 
tmp
 = 
CEC
->
CSR
 & 0x2;

418 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_IT
Ë& 0xFFFFFFFCË| 
tmp
);

419 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c

23 
	~"°m32f10x_¸c.h
"

83 
	$CRC_Re£tDR
()

86 
CRC
->
CR
 = 
CRC_CR_RESET
;

87 
	}
}

94 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

96 
CRC
->
DR
 = 
D©a
;

98  (
CRC
->
DR
);

99 
	}
}

107 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

109 
uöt32_t
 
ödex
 = 0;

111 
ödex
 = 0; index < 
Buf„rLígth
; index++)

113 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

115  (
CRC
->
DR
);

116 
	}
}

123 
uöt32_t
 
	$CRC_GëCRC
()

125  (
CRC
->
DR
);

126 
	}
}

133 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

135 
CRC
->
IDR
 = 
IDVÆue
;

136 
	}
}

143 
uöt8_t
 
	$CRC_GëIDRegi°î
()

145  (
CRC
->
IDR
);

146 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c

23 
	~"°m32f10x_dac.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

51 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

52 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

55 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

56 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

57 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

60 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

98 
	$DAC_DeInô
()

101 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

103 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

104 
	}
}

117 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

119 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

121 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

122 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

123 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

124 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

127 
tm¥eg1
 = 
DAC
->
CR
;

129 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

136 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

137 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

139 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

141 
DAC
->
CR
 = 
tm¥eg1
;

142 
	}
}

150 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

154 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

156 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

158 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

160 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

161 
	}
}

173 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

176 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

177 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

178 i‡(
NewSèã
 !
DISABLE
)

181 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

186 
DAC
->
CR
 &~(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

188 
	}
}

189 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

203 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

206 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

207 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

208 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

210 i‡(
NewSèã
 !
DISABLE
)

213 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

218 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

220 
	}
}

233 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

236 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

237 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

238 i‡(
NewSèã
 !
DISABLE
)

241 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

246 
DAC
->
CR
 &~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

248 
	}
}

260 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

263 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

265 i‡(
NewSèã
 !
DISABLE
)

268 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

273 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

275 
	}
}

284 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

287 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

288 i‡(
NewSèã
 !
DISABLE
)

291 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
 ;

296 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

298 
	}
}

314 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

318 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

320 i‡(
NewSèã
 !
DISABLE
)

323 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

328 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

330 
	}
}

342 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

344 
__IO
 
uöt32_t
 
tmp
 = 0;

347 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

348 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

350 
tmp
 = (
uöt32_t
)
DAC_BASE
;

351 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

354 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

355 
	}
}

367 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

369 
__IO
 
uöt32_t
 
tmp
 = 0;

372 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

373 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

375 
tmp
 = (
uöt32_t
)
DAC_BASE
;

376 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

379 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

380 
	}
}

396 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

398 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

401 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

402 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

403 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

406 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

408 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

412 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

415 
tmp
 = (
uöt32_t
)
DAC_BASE
;

416 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

419 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

420 
	}
}

430 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

432 
__IO
 
uöt32_t
 
tmp
 = 0;

435 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

437 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

438 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

441  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

442 
	}
}

444 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

456 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

458 
FœgSètus
 
bô°©us
 = 
RESET
;

460 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

461 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

464 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

467 
bô°©us
 = 
SET
;

472 
bô°©us
 = 
RESET
;

475  
bô°©us
;

476 
	}
}

489 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

492 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

493 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

496 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

497 
	}
}

510 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

512 
ITSètus
 
bô°©us
 = 
RESET
;

513 
uöt32_t
 
íabÀ°©us
 = 0;

516 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

517 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

520 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

523 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

526 
bô°©us
 = 
SET
;

531 
bô°©us
 = 
RESET
;

534  
bô°©us
;

535 
	}
}

548 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

551 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

552 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

555 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

556 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c

23 
	~"°m32f10x_dbgmcu.h
"

46 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

84 
uöt32_t
 
	$DBGMCU_GëREVID
()

86 (
DBGMCU
->
IDCODE
 >> 16);

87 
	}
}

94 
uöt32_t
 
	$DBGMCU_GëDEVID
()

96 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

97 
	}
}

134 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

137 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

140 i‡(
NewSèã
 !
DISABLE
)

142 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

146 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

148 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c

23 
	~"°m32f10x_dma.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

49 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

50 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

51 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

52 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

53 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF6
 | 
DMA_ISR_TCIF6
 | 
DMA_ISR_HTIF6
 | 
DMA_ISR_TEIF6
))

	)

54 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF7
 | 
DMA_ISR_TCIF7
 | 
DMA_ISR_HTIF7
 | 
DMA_ISR_TEIF7
))

	)

57 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

58 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

59 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

60 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

61 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

64 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

67 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

108 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

111 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

114 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

117 
DMAy_Ch™√lx
->
CCR
 = 0;

120 
DMAy_Ch™√lx
->
CNDTR
 = 0;

123 
DMAy_Ch™√lx
->
CPAR
 = 0;

126 
DMAy_Ch™√lx
->
CMAR
 = 0;

128 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

131 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

133 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

136 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

138 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

141 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

143 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

146 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

148 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

151 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

153 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

156 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

158 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

161 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

163 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

166 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

168 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

171 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

173 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

176 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

178 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

181 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

185 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

188 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

191 
	}
}

202 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

204 
uöt32_t
 
tm¥eg
 = 0;

207 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

208 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

209 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

210 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

211 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

212 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

213 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

214 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

215 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

216 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

220 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

222 
tm¥eg
 &
CCR_CLEAR_Mask
;

232 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

233 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

234 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

235 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

238 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

242 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

246 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

250 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

251 
	}
}

259 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

263 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

265 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

267 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

269 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

271 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

273 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

275 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

277 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

279 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

281 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

283 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

284 
	}
}

294 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DMAy_Ch™√lx
->
CCR
 |
DMA_CCR1_EN
;

308 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

310 
	}
}

326 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

329 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

330 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 i‡(
NewSèã
 !
DISABLE
)

335 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

340 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

342 
	}
}

353 
	$DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
)

356 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

360 
DMAy_Ch™√lx
->
CNDTR
 = 
D©aNumbî
;

361 
	}
}

371 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

374 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

376  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

377 
	}
}

433 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
)

435 
FœgSètus
 
bô°©us
 = 
RESET
;

436 
uöt32_t
 
tm¥eg
 = 0;

439 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMAy_FLAG
));

442 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

445 
tm¥eg
 = 
DMA2
->
ISR
 ;

450 
tm¥eg
 = 
DMA1
->
ISR
 ;

454 i‡((
tm¥eg
 & 
DMAy_FLAG
Ë!(
uöt32_t
)
RESET
)

457 
bô°©us
 = 
SET
;

462 
bô°©us
 = 
RESET
;

466  
bô°©us
;

467 
	}
}

523 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
)

526 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMAy_FLAG
));

529 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

532 
DMA2
->
IFCR
 = 
DMAy_FLAG
;

537 
DMA1
->
IFCR
 = 
DMAy_FLAG
;

539 
	}
}

595 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
)

597 
ITSètus
 
bô°©us
 = 
RESET
;

598 
uöt32_t
 
tm¥eg
 = 0;

601 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMAy_IT
));

604 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

607 
tm¥eg
 = 
DMA2
->
ISR
;

612 
tm¥eg
 = 
DMA1
->
ISR
;

616 i‡((
tm¥eg
 & 
DMAy_IT
Ë!(
uöt32_t
)
RESET
)

619 
bô°©us
 = 
SET
;

624 
bô°©us
 = 
RESET
;

627  
bô°©us
;

628 
	}
}

684 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
)

687 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMAy_IT
));

690 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

693 
DMA2
->
IFCR
 = 
DMAy_IT
;

698 
DMA1
->
IFCR
 = 
DMAy_IT
;

700 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c

23 
	~"°m32f10x_exti.h
"

46 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

85 
	$EXTI_DeInô
()

87 
EXTI
->
IMR
 = 0x00000000;

88 
EXTI
->
EMR
 = 0x00000000;

89 
EXTI
->
RTSR
 = 0x00000000;

90 
EXTI
->
FTSR
 = 0x00000000;

91 
EXTI
->
PR
 = 0x000FFFFF;

92 
	}
}

101 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

103 
uöt32_t
 
tmp
 = 0;

106 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

107 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

108 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

109 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

111 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

113 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

116 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

117 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

119 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

121 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

124 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

125 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

128 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

131 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

132 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

136 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

137 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

139 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

144 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

147 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

149 
	}
}

157 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

159 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

160 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

161 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

162 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

163 
	}
}

171 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

174 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

176 
EXTI
->
SWIER
 |
EXTI_Löe
;

177 
	}
}

186 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

188 
FœgSètus
 
bô°©us
 = 
RESET
;

190 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

192 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

194 
bô°©us
 = 
SET
;

198 
bô°©us
 = 
RESET
;

200  
bô°©us
;

201 
	}
}

209 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

212 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

214 
EXTI
->
PR
 = 
EXTI_Löe
;

215 
	}
}

224 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

226 
ITSètus
 
bô°©us
 = 
RESET
;

227 
uöt32_t
 
íabÀ°©us
 = 0;

229 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

231 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

232 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

234 
bô°©us
 = 
SET
;

238 
bô°©us
 = 
RESET
;

240  
bô°©us
;

241 
	}
}

249 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

252 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

254 
EXTI
->
PR
 = 
EXTI_Löe
;

255 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c

23 
	~"°m32f10x_Êash.h
"

47 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

48 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

49 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

52 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

55 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

56 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

57 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

58 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

59 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

60 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

61 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

62 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

63 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

64 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

65 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

66 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

69 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

70 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

71 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

72 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

73 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

74 
	#OB_USER_BFB2
 ((
uöt16_t
)0x0008)

	)

77 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

78 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

79 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

82 
	#FLASH_BANK1_END_ADDRESS
 ((
uöt32_t
)0x807FFFF)

	)

85 
	#Eø£Timeout
 ((
uöt32_t
)0x000B0000)

	)

86 
	#ProgømTimeout
 ((
uöt32_t
)0x00002000)

	)

254 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

256 
uöt32_t
 
tm¥eg
 = 0;

259 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

262 
tm¥eg
 = 
FLASH
->
ACR
;

265 
tm¥eg
 &
ACR_LATENCY_Mask
;

266 
tm¥eg
 |
FLASH_L©ícy
;

269 
FLASH
->
ACR
 = 
tm¥eg
;

270 
	}
}

281 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

284 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

287 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

288 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

289 
	}
}

300 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

303 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

306 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

307 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

308 
	}
}

319 
	$FLASH_U∆ock
()

322 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

323 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

325 #ifde‡
STM32F10X_XL


327 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

328 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

330 
	}
}

340 
	$FLASH_U∆ockB™k1
()

343 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

344 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

345 
	}
}

347 #ifde‡
STM32F10X_XL


354 
	$FLASH_U∆ockB™k2
()

357 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

358 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

360 
	}
}

372 
	$FLASH_Lock
()

375 
FLASH
->
CR
 |
CR_LOCK_Së
;

377 #ifde‡
STM32F10X_XL


379 
FLASH
->
CR2
 |
CR_LOCK_Së
;

381 
	}
}

392 
	$FLASH_LockB™k1
()

395 
FLASH
->
CR
 |
CR_LOCK_Së
;

396 
	}
}

398 #ifde‡
STM32F10X_XL


405 
	$FLASH_LockB™k2
()

408 
FLASH
->
CR2
 |
CR_LOCK_Së
;

409 
	}
}

419 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

421 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

423 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

425 #ifde‡
STM32F10X_XL


426 if(
Page_Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

429 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

430 if(
°©us
 =
FLASH_COMPLETE
)

433 
FLASH
->
CR
|
CR_PER_Së
;

434 
FLASH
->
AR
 = 
Page_Addªss
;

435 
FLASH
->
CR
|
CR_STRT_Së
;

438 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

441 
FLASH
->
CR
 &
CR_PER_Re£t
;

447 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

448 if(
°©us
 =
FLASH_COMPLETE
)

451 
FLASH
->
CR2
|
CR_PER_Së
;

452 
FLASH
->
AR2
 = 
Page_Addªss
;

453 
FLASH
->
CR2
|
CR_STRT_Së
;

456 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

459 
FLASH
->
CR2
 &
CR_PER_Re£t
;

464 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

466 if(
°©us
 =
FLASH_COMPLETE
)

469 
FLASH
->
CR
|
CR_PER_Së
;

470 
FLASH
->
AR
 = 
Page_Addªss
;

471 
FLASH
->
CR
|
CR_STRT_Së
;

474 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

477 
FLASH
->
CR
 &
CR_PER_Re£t
;

482  
°©us
;

483 
	}
}

492 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

494 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

496 #ifde‡
STM32F10X_XL


498 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

500 if(
°©us
 =
FLASH_COMPLETE
)

503 
FLASH
->
CR
 |
CR_MER_Së
;

504 
FLASH
->
CR
 |
CR_STRT_Së
;

507 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

510 
FLASH
->
CR
 &
CR_MER_Re£t
;

512 if(
°©us
 =
FLASH_COMPLETE
)

515 
FLASH
->
CR2
 |
CR_MER_Së
;

516 
FLASH
->
CR2
 |
CR_STRT_Së
;

519 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

522 
FLASH
->
CR2
 &
CR_MER_Re£t
;

526 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

527 if(
°©us
 =
FLASH_COMPLETE
)

530 
FLASH
->
CR
 |
CR_MER_Së
;

531 
FLASH
->
CR
 |
CR_STRT_Së
;

534 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

537 
FLASH
->
CR
 &
CR_MER_Re£t
;

542  
°©us
;

543 
	}
}

555 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Pages
()

557 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

559 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

561 if(
°©us
 =
FLASH_COMPLETE
)

564 
FLASH
->
CR
 |
CR_MER_Së
;

565 
FLASH
->
CR
 |
CR_STRT_Së
;

568 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

571 
FLASH
->
CR
 &
CR_MER_Re£t
;

574  
°©us
;

575 
	}
}

577 #ifde‡
STM32F10X_XL


585 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Pages
()

587 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

589 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

591 if(
°©us
 =
FLASH_COMPLETE
)

594 
FLASH
->
CR2
 |
CR_MER_Së
;

595 
FLASH
->
CR2
 |
CR_STRT_Së
;

598 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

601 
FLASH
->
CR2
 &
CR_MER_Re£t
;

604  
°©us
;

605 
	}
}

616 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

618 
uöt16_t
 
rd±mp
 = 
RDP_Key
;

620 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

623 if(
	`FLASH_GëRódOutPrŸe˘i⁄Sètus
(Ë!
RESET
)

625 
rd±mp
 = 0x00;

629 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

630 if(
°©us
 =
FLASH_COMPLETE
)

633 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

634 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

637 
FLASH
->
CR
 |
CR_OPTER_Së
;

638 
FLASH
->
CR
 |
CR_STRT_Së
;

640 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

642 if(
°©us
 =
FLASH_COMPLETE
)

645 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

648 
FLASH
->
CR
 |
CR_OPTPG_Së
;

650 
OB
->
RDP
 = (
uöt16_t
)
rd±mp
;

652 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

654 if(
°©us
 !
FLASH_TIMEOUT
)

657 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

662 i‡(
°©us
 !
FLASH_TIMEOUT
)

665 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

670  
°©us
;

671 
	}
}

681 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

683 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

684 
__IO
 
uöt32_t
 
tmp
 = 0;

687 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

689 #ifde‡
STM32F10X_XL


690 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
 - 2)

693 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

694 if(
°©us
 =
FLASH_COMPLETE
)

698 
FLASH
->
CR
 |
CR_PG_Së
;

700 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

702 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

704 if(
°©us
 =
FLASH_COMPLETE
)

708 
tmp
 = 
Addªss
 + 2;

710 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

713 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

716 
FLASH
->
CR
 &
CR_PG_Re£t
;

721 
FLASH
->
CR
 &
CR_PG_Re£t
;

725 if(
Addªss
 =(
FLASH_BANK1_END_ADDRESS
 - 1))

728 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

730 if(
°©us
 =
FLASH_COMPLETE
)

734 
FLASH
->
CR
 |
CR_PG_Së
;

736 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

739 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

742 
FLASH
->
CR
 &
CR_PG_Re£t
;

747 
FLASH
->
CR
 &
CR_PG_Re£t
;

751 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

753 if(
°©us
 =
FLASH_COMPLETE
)

757 
FLASH
->
CR2
 |
CR_PG_Së
;

758 
tmp
 = 
Addªss
 + 2;

760 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

763 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

766 
FLASH
->
CR2
 &
CR_PG_Re£t
;

771 
FLASH
->
CR2
 &
CR_PG_Re£t
;

777 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

779 if(
°©us
 =
FLASH_COMPLETE
)

783 
FLASH
->
CR2
 |
CR_PG_Së
;

785 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

787 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

789 if(
°©us
 =
FLASH_COMPLETE
)

793 
tmp
 = 
Addªss
 + 2;

795 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

798 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

801 
FLASH
->
CR2
 &
CR_PG_Re£t
;

806 
FLASH
->
CR2
 &
CR_PG_Re£t
;

812 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

814 if(
°©us
 =
FLASH_COMPLETE
)

818 
FLASH
->
CR
 |
CR_PG_Së
;

820 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

822 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

824 if(
°©us
 =
FLASH_COMPLETE
)

828 
tmp
 = 
Addªss
 + 2;

830 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

833 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

836 
FLASH
->
CR
 &
CR_PG_Re£t
;

841 
FLASH
->
CR
 &
CR_PG_Re£t
;

847  
°©us
;

848 
	}
}

858 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

860 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

862 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

864 #ifde‡
STM32F10X_XL


866 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

868 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

870 if(
°©us
 =
FLASH_COMPLETE
)

873 
FLASH
->
CR
 |
CR_PG_Së
;

875 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

877 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

880 
FLASH
->
CR
 &
CR_PG_Re£t
;

885 if(
°©us
 =
FLASH_COMPLETE
)

888 
FLASH
->
CR2
 |
CR_PG_Së
;

890 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

892 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

895 
FLASH
->
CR2
 &
CR_PG_Re£t
;

900 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

902 if(
°©us
 =
FLASH_COMPLETE
)

905 
FLASH
->
CR
 |
CR_PG_Së
;

907 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

909 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

912 
FLASH
->
CR
 &
CR_PG_Re£t
;

917  
°©us
;

918 
	}
}

929 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

931 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

933 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

934 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

936 if(
°©us
 =
FLASH_COMPLETE
)

939 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

940 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

942 
FLASH
->
CR
 |
CR_OPTPG_Së
;

943 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

946 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

947 if(
°©us
 !
FLASH_TIMEOUT
)

950 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

954  
°©us
;

955 
	}
}

975 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

977 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

979 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

982 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

984 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

985 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

986 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

987 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

988 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

991 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

993 if(
°©us
 =
FLASH_COMPLETE
)

996 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

997 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

998 
FLASH
->
CR
 |
CR_OPTPG_Së
;

999 if(
WRP0_D©a
 != 0xFF)

1001 
OB
->
WRP0
 = 
WRP0_D©a
;

1004 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1006 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

1008 
OB
->
WRP1
 = 
WRP1_D©a
;

1011 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1013 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

1015 
OB
->
WRP2
 = 
WRP2_D©a
;

1018 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1021 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

1023 
OB
->
WRP3
 = 
WRP3_D©a
;

1026 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1029 if(
°©us
 !
FLASH_TIMEOUT
)

1032 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1036  
°©us
;

1037 
	}
}

1049 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1051 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1053 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1054 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1055 if(
°©us
 =
FLASH_COMPLETE
)

1058 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1059 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1060 
FLASH
->
CR
 |
CR_OPTER_Së
;

1061 
FLASH
->
CR
 |
CR_STRT_Së
;

1063 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1064 if(
°©us
 =
FLASH_COMPLETE
)

1067 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1069 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1070 if(
NewSèã
 !
DISABLE
)

1072 
OB
->
RDP
 = 0x00;

1076 
OB
->
RDP
 = 
RDP_Key
;

1079 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1081 if(
°©us
 !
FLASH_TIMEOUT
)

1084 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1089 if(
°©us
 !
FLASH_TIMEOUT
)

1092 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1097  
°©us
;

1098 
	}
}

1118 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

1120 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1123 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1124 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1125 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1128 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1129 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1132 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1134 if(
°©us
 =
FLASH_COMPLETE
)

1137 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1139 
OB
->
USER
 = 
OB_IWDG
 | (
uöt16_t
)(
OB_STOP
 | (uöt16_t)(
OB_STDBY
 | ((uint16_t)0xF8)));

1142 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1143 if(
°©us
 !
FLASH_TIMEOUT
)

1146 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1150  
°©us
;

1151 
	}
}

1153 #ifde‡
STM32F10X_XL


1172 
FLASH_Sètus
 
	$FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
)

1174 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1175 
	`as£π_∑øm
(
	`IS_FLASH_BOOT
(
FLASH_BOOT
));

1177 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1178 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1181 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1183 if(
°©us
 =
FLASH_COMPLETE
)

1186 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1188 if(
FLASH_BOOT
 =
FLASH_BOOT_B™k1
)

1190 
OB
->
USER
 |
OB_USER_BFB2
;

1194 
OB
->
USER
 &(
uöt16_t
)(~(uöt16_t)(
OB_USER_BFB2
));

1197 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1198 if(
°©us
 !
FLASH_TIMEOUT
)

1201 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1205  
°©us
;

1206 
	}
}

1216 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

1219  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

1220 
	}
}

1228 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

1231  (
uöt32_t
)(
FLASH
->
WRPR
);

1232 
	}
}

1240 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

1242 
FœgSètus
 
ªadout°©us
 = 
RESET
;

1243 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

1245 
ªadout°©us
 = 
SET
;

1249 
ªadout°©us
 = 
RESET
;

1251  
ªadout°©us
;

1252 
	}
}

1260 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

1262 
FœgSètus
 
bô°©us
 = 
RESET
;

1264 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

1266 
bô°©us
 = 
SET
;

1270 
bô°©us
 = 
RESET
;

1273  
bô°©us
;

1274 
	}
}

1290 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1292 #ifde‡
STM32F10X_XL


1294 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1297 if((
FLASH_IT
 & 0x80000000) != 0x0)

1299 if(
NewSèã
 !
DISABLE
)

1302 
FLASH
->
CR2
 |(
FLASH_IT
 & 0x7FFFFFFF);

1307 
FLASH
->
CR2
 &~(
uöt32_t
)(
FLASH_IT
 & 0x7FFFFFFF);

1312 if(
NewSèã
 !
DISABLE
)

1315 
FLASH
->
CR
 |
FLASH_IT
;

1320 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1325 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1328 if(
NewSèã
 !
DISABLE
)

1331 
FLASH
->
CR
 |
FLASH_IT
;

1336 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1339 
	}
}

1357 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1359 
FœgSètus
 
bô°©us
 = 
RESET
;

1361 #ifde‡
STM32F10X_XL


1363 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1364 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1366 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1368 
bô°©us
 = 
SET
;

1372 
bô°©us
 = 
RESET
;

1377 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1379 if((
FLASH
->
SR2
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1381 
bô°©us
 = 
SET
;

1385 
bô°©us
 = 
RESET
;

1390 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1392 
bô°©us
 = 
SET
;

1396 
bô°©us
 = 
RESET
;

1402 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1403 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1405 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1407 
bô°©us
 = 
SET
;

1411 
bô°©us
 = 
RESET
;

1416 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1418 
bô°©us
 = 
SET
;

1422 
bô°©us
 = 
RESET
;

1428  
bô°©us
;

1429 
	}
}

1443 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1445 #ifde‡
STM32F10X_XL


1447 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1449 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1452 
FLASH
->
SR2
 = 
FLASH_FLAG
;

1457 
FLASH
->
SR
 = 
FLASH_FLAG
;

1462 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1465 
FLASH
->
SR
 = 
FLASH_FLAG
;

1467 
	}
}

1477 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1479 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1481 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1483 
Êash°©us
 = 
FLASH_BUSY
;

1487 if((
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
) != 0)

1489 
Êash°©us
 = 
FLASH_ERROR_PG
;

1493 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
) != 0 )

1495 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1499 
Êash°©us
 = 
FLASH_COMPLETE
;

1504  
Êash°©us
;

1505 
	}
}

1515 
FLASH_Sètus
 
	$FLASH_GëB™k1Sètus
()

1517 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1519 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_BSY
Ë=
FLASH_FLAG_BSY
)

1521 
Êash°©us
 = 
FLASH_BUSY
;

1525 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_PGERR
) != 0)

1527 
Êash°©us
 = 
FLASH_ERROR_PG
;

1531 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_WRPRTERR
) != 0 )

1533 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1537 
Êash°©us
 = 
FLASH_COMPLETE
;

1542  
Êash°©us
;

1543 
	}
}

1545 #ifde‡
STM32F10X_XL


1553 
FLASH_Sètus
 
	$FLASH_GëB™k2Sètus
()

1555 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1557 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF))

1559 
Êash°©us
 = 
FLASH_BUSY
;

1563 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_PGERR
 & 0x7FFFFFFF)) != 0)

1565 
Êash°©us
 = 
FLASH_ERROR_PG
;

1569 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_WRPRTERR
 & 0x7FFFFFFF)) != 0 )

1571 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1575 
Êash°©us
 = 
FLASH_COMPLETE
;

1580  
Êash°©us
;

1581 
	}
}

1595 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1597 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1600 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1602 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1604 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1605 
Timeout
--;

1607 if(
Timeout
 == 0x00 )

1609 
°©us
 = 
FLASH_TIMEOUT
;

1612  
°©us
;

1613 
	}
}

1623 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
)

1625 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1628 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1630 (
°©us
 =
FLASH_FLAG_BANK1_BSY
Ë&& (
Timeout
 != 0x00))

1632 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1633 
Timeout
--;

1635 if(
Timeout
 == 0x00 )

1637 
°©us
 = 
FLASH_TIMEOUT
;

1640  
°©us
;

1641 
	}
}

1643 #ifde‡
STM32F10X_XL


1651 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
)

1653 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1656 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1658 (
°©us
 =(
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)Ë&& (
Timeout
 != 0x00))

1660 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1661 
Timeout
--;

1663 if(
Timeout
 == 0x00 )

1665 
°©us
 = 
FLASH_TIMEOUT
;

1668  
°©us
;

1669 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c

23 
	~"°m32f10x_fsmc.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

50 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

51 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

54 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

55 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

56 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

57 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

58 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

102 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

105 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

108 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

110 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

115 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

117 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

118 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

119 
	}
}

129 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

134 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

137 
FSMC_B™k2
->
PCR2
 = 0x00000018;

138 
FSMC_B™k2
->
SR2
 = 0x00000040;

139 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

140 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

146 
FSMC_B™k3
->
PCR3
 = 0x00000018;

147 
FSMC_B™k3
->
SR3
 = 0x00000040;

148 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

149 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

151 
	}
}

158 
	$FSMC_PCCARDDeInô
()

161 
FSMC_B™k4
->
PCR4
 = 0x00000018;

162 
FSMC_B™k4
->
SR4
 = 0x00000000;

163 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

164 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

165 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

166 
	}
}

176 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

179 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

180 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

182 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

183 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

184 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

188 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

190 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

191 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

192 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

194 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

195 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

196 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

197 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

198 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

201 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

202 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

211 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

212 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

213 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

215 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

217 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

221 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

222 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

223 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

224 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

225 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

226 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

227 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

228 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

232 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

234 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

235 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

236 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

237 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

238 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

239 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

240 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

241 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

242 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

243 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

244 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

245 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

246 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

250 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

252 
	}
}

262 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

264 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

267 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

268 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

269 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

270 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

271 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

272 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

273 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

276 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

277 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

278 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

279 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

280 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

281 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

284 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

285 
PCR_Mem‹yTy≥_NAND
 |

286 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

287 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

288 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

289 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

290 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

293 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

294 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

295 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

296 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

299 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

300 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

301 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

302 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

304 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

307 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

308 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

309 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

314 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

315 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

316 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

318 
	}
}

328 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

331 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

332 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

336 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

341 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

342 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

343 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

344 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

345 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

346 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

347 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

350 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

351 
FSMC_Mem‹yD©aWidth_16b
 |

352 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

353 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

356 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

357 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

358 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

359 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

362 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

363 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

364 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

365 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

368 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

369 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

370 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

371 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

372 
	}
}

380 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

402 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

403 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

404 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

405 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

406 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

407 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

408 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

409 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

410 
	}
}

418 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

421 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

422 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

423 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

424 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

425 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

426 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

427 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

428 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

429 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

430 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

431 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

432 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

433 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

434 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

435 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

436 
	}
}

444 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

447 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

455 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

456 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

457 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

458 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

459 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

460 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

461 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

462 
	}
}

475 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

488 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

490 
	}
}

501 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

504 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 i‡(
NewSèã
 !
DISABLE
)

509 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

511 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

515 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

521 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

523 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

527 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

530 
	}
}

538 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

542 i‡(
NewSèã
 !
DISABLE
)

545 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

550 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

552 
	}
}

564 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

566 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

567 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

569 i‡(
NewSèã
 !
DISABLE
)

572 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

574 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

578 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

584 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

586 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

590 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

593 
	}
}

603 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

605 
uöt32_t
 
eccvÆ
 = 0x00000000;

607 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

610 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

615 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

618 (
eccvÆ
);

619 
	}
}

637 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

639 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

640 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

641 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

643 i‡(
NewSèã
 !
DISABLE
)

646 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

648 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

651 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

653 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

658 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

664 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

667 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

670 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

672 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

677 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

680 
	}
}

697 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

699 
FœgSètus
 
bô°©us
 = 
RESET
;

700 
uöt32_t
 
tmp§
 = 0x00000000;

703 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

704 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

706 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

708 
tmp§
 = 
FSMC_B™k2
->
SR2
;

710 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

712 
tmp§
 = 
FSMC_B™k3
->
SR3
;

717 
tmp§
 = 
FSMC_B™k4
->
SR4
;

721 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

723 
bô°©us
 = 
SET
;

727 
bô°©us
 = 
RESET
;

730  
bô°©us
;

731 
	}
}

747 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

750 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

751 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

753 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

755 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

757 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

759 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

764 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

766 
	}
}

782 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

784 
ITSètus
 
bô°©us
 = 
RESET
;

785 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

788 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

789 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

791 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

793 
tmp§
 = 
FSMC_B™k2
->
SR2
;

795 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

797 
tmp§
 = 
FSMC_B™k3
->
SR3
;

802 
tmp§
 = 
FSMC_B™k4
->
SR4
;

805 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

807 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

808 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

810 
bô°©us
 = 
SET
;

814 
bô°©us
 = 
RESET
;

816  
bô°©us
;

817 
	}
}

833 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

836 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

837 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

839 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

841 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

843 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

845 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

850 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

852 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c

23 
	~"°m32f10x_gpio.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

53 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

54 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

55 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

60 
	#MAPR_OFFSET
 (
AFIO_OFFSET
 + 0x04)

	)

61 
	#MII_RMII_SEL_BôNumbî
 ((
u8
)0x17)

	)

62 
	#MAPR_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
MAPR_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

65 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

66 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

67 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

68 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

69 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

70 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

108 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

111 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

113 i‡(
GPIOx
 =
GPIOA
)

115 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

116 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

118 i‡(
GPIOx
 =
GPIOB
)

120 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

121 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

123 i‡(
GPIOx
 =
GPIOC
)

125 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

126 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

128 i‡(
GPIOx
 =
GPIOD
)

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

131 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

133 i‡(
GPIOx
 =
GPIOE
)

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

136 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

138 i‡(
GPIOx
 =
GPIOF
)

140 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

141 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

145 i‡(
GPIOx
 =
GPIOG
)

147 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

148 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

151 
	}
}

159 
	$GPIO_AFIODeInô
()

161 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

162 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

163 
	}
}

173 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

175 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

176 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

178 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

179 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

180 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

183 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

184 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

187 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

189 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

193 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

195 
tm¥eg
 = 
GPIOx
->
CRL
;

196 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

198 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

200 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

201 i‡(
cuºíçö
 =
pos
)

203 
pos
 = 
pöpos
 << 2;

205 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

206 
tm¥eg
 &~
pömask
;

208 
tm¥eg
 |(
cuºítmode
 << 
pos
);

210 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

212 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

217 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

219 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

224 
GPIOx
->
CRL
 = 
tm¥eg
;

228 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

230 
tm¥eg
 = 
GPIOx
->
CRH
;

231 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

233 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

235 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

236 i‡(
cuºíçö
 =
pos
)

238 
pos
 = 
pöpos
 << 2;

240 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

241 
tm¥eg
 &~
pömask
;

243 
tm¥eg
 |(
cuºítmode
 << 
pos
);

245 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

247 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

250 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

252 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

256 
GPIOx
->
CRH
 = 
tm¥eg
;

258 
	}
}

266 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

269 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

270 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

271 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

272 
	}
}

281 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

283 
uöt8_t
 
bô°©us
 = 0x00;

286 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

287 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

289 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

291 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

295 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

297  
bô°©us
;

298 
	}
}

305 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

308 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

310  ((
uöt16_t
)
GPIOx
->
IDR
);

311 
	}
}

320 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

322 
uöt8_t
 
bô°©us
 = 0x00;

324 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

325 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

327 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

329 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

333 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

335  
bô°©us
;

336 
	}
}

343 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

346 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

348  ((
uöt16_t
)
GPIOx
->
ODR
);

349 
	}
}

358 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

361 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

362 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

364 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

365 
	}
}

374 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

377 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

378 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

380 
GPIOx
->
BRR
 = 
GPIO_Pö
;

381 
	}
}

394 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

397 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

398 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

399 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

401 i‡(
BôVÆ
 !
Bô_RESET
)

403 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

407 
GPIOx
->
BRR
 = 
GPIO_Pö
;

409 
	}
}

417 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

420 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

422 
GPIOx
->
ODR
 = 
P‹tVÆ
;

423 
	}
}

432 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

434 
uöt32_t
 
tmp
 = 0x00010000;

437 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

438 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

440 
tmp
 |
GPIO_Pö
;

442 
GPIOx
->
LCKR
 = 
tmp
;

444 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

446 
GPIOx
->
LCKR
 = 
tmp
;

448 
tmp
 = 
GPIOx
->
LCKR
;

450 
tmp
 = 
GPIOx
->
LCKR
;

451 
	}
}

462 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

464 
uöt32_t
 
tm¥eg
 = 0x00;

466 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

467 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

469 
tm¥eg
 = 
AFIO
->
EVCR
;

471 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

472 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

473 
tm¥eg
 |
GPIO_PöSour˚
;

474 
AFIO
->
EVCR
 = 
tm¥eg
;

475 
	}
}

483 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

489 
	}
}

549 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

551 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

554 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

555 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

559 
tm¥eg
 = 
AFIO
->
MAPR2
;

563 
tm¥eg
 = 
AFIO
->
MAPR
;

566 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

567 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

569 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

571 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

572 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

574 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

576 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

577 
tm¥eg
 &~
tmp1
;

578 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

582 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

583 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

586 i‡(
NewSèã
 !
DISABLE
)

588 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

591 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

593 
AFIO
->
MAPR2
 = 
tm¥eg
;

597 
AFIO
->
MAPR
 = 
tm¥eg
;

599 
	}
}

609 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

611 
uöt32_t
 
tmp
 = 0x00;

613 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

614 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

616 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

617 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

618 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

619 
	}
}

630 
	$GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
)

632 
	`as£π_∑øm
(
	`IS_GPIO_ETH_MEDIA_INTERFACE
(
GPIO_ETH_MedüI¡îÁ˚
));

635 *(
__IO
 
uöt32_t
 *Ë
MAPR_MII_RMII_SEL_BB
 = 
GPIO_ETH_MedüI¡îÁ˚
;

636 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c

23 
	~"°m32f10x_i2c.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

50 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

53 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

54 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

57 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

58 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

61 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

62 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

65 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

66 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

69 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

70 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

73 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

74 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

77 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

78 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

81 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

82 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

85 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

86 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

89 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

92 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

93 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

96 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

97 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

100 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

103 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

104 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

107 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

108 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

111 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

114 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

117 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

120 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

123 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

162 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

165 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

167 i‡(
I2Cx
 =
I2C1
)

170 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

172 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

179 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

181 
	}
}

191 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

193 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

194 
uöt16_t
 
ªsu…
 = 0x04;

195 
uöt32_t
 
p˛k1
 = 8000000;

196 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

198 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

199 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

200 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

201 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

202 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

203 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

204 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

208 
tm¥eg
 = 
I2Cx
->
CR2
;

210 
tm¥eg
 &
CR2_FREQ_Re£t
;

212 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

213 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

215 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

216 
tm¥eg
 |
‰eqønge
;

218 
I2Cx
->
CR2
 = 
tm¥eg
;

222 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

225 
tm¥eg
 = 0;

228 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

231 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

233 i‡(
ªsu…
 < 0x04)

236 
ªsu…
 = 0x04;

239 
tm¥eg
 |
ªsu…
;

241 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

246 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

249 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

254 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

256 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

260 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

263 
ªsu…
 |(
uöt16_t
)0x0001;

266 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
CCR_FS_Së
);

268 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

272 
I2Cx
->
CCR
 = 
tm¥eg
;

274 
I2Cx
->
CR1
 |
CR1_PE_Së
;

278 
tm¥eg
 = 
I2Cx
->
CR1
;

280 
tm¥eg
 &
CR1_CLEAR_Mask
;

284 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

286 
I2Cx
->
CR1
 = 
tm¥eg
;

290 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

291 
	}
}

298 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

302 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

304 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

306 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

308 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

310 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

312 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

313 
	}
}

322 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

327 i‡(
NewSèã
 !
DISABLE
)

330 
I2Cx
->
CR1
 |
CR1_PE_Së
;

335 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

337 
	}
}

346 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

349 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

350 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

351 i‡(
NewSèã
 !
DISABLE
)

354 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

359 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

361 
	}
}

370 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

373 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

374 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

375 i‡(
NewSèã
 !
DISABLE
)

378 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

383 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

385 
	}
}

394 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

397 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

398 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

399 i‡(
NewSèã
 !
DISABLE
)

402 
I2Cx
->
CR1
 |
CR1_START_Së
;

407 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

409 
	}
}

418 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

421 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

422 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

423 i‡(
NewSèã
 !
DISABLE
)

426 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

431 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

433 
	}
}

442 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

445 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

446 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

447 i‡(
NewSèã
 !
DISABLE
)

450 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

455 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

457 
	}
}

465 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

467 
uöt16_t
 
tm¥eg
 = 0;

470 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

473 
tm¥eg
 = 
I2Cx
->
OAR2
;

476 
tm¥eg
 &
OAR2_ADD2_Re£t
;

479 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

482 
I2Cx
->
OAR2
 = 
tm¥eg
;

483 
	}
}

492 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

497 i‡(
NewSèã
 !
DISABLE
)

500 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

505 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

507 
	}
}

516 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

519 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

520 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

521 i‡(
NewSèã
 !
DISABLE
)

524 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

529 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

531 
	}
}

545 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

548 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

549 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

550 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

552 i‡(
NewSèã
 !
DISABLE
)

555 
I2Cx
->
CR2
 |
I2C_IT
;

560 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

562 
	}
}

570 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

573 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

575 
I2Cx
->
DR
 = 
D©a
;

576 
	}
}

583 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

586 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

588  (
uöt8_t
)
I2Cx
->
DR
;

589 
	}
}

601 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

604 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

605 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

607 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

610 
Addªss
 |
OAR1_ADD0_Së
;

615 
Addªss
 &
OAR1_ADD0_Re£t
;

618 
I2Cx
->
DR
 = 
Addªss
;

619 
	}
}

636 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

638 
__IO
 
uöt32_t
 
tmp
 = 0;

641 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

642 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

644 
tmp
 = (
uöt32_t
Ë
I2Cx
;

645 
tmp
 +
I2C_Regi°î
;

648  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

649 
	}
}

658 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

661 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

662 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

663 i‡(
NewSèã
 !
DISABLE
)

666 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

671 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

673 
	}
}

696 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

699 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

700 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

703 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

706 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

711 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

713 
	}
}

724 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

727 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

728 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

729 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

732 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

737 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

739 
	}
}

748 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

751 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

752 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

753 i‡(
NewSèã
 !
DISABLE
)

756 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

761 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

763 
	}
}

779 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

782 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

783 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

784 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

787 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

792 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

794 
	}
}

803 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

806 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

807 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

808 i‡(
NewSèã
 !
DISABLE
)

811 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

816 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

818 
	}
}

825 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

828 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

830  ((
I2Cx
->
SR2
) >> 8);

831 
	}
}

840 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

843 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

844 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

845 i‡(
NewSèã
 !
DISABLE
)

848 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

853 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

855 
	}
}

864 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

867 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

868 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

869 i‡(
NewSèã
 =
DISABLE
)

872 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

877 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

879 
	}
}

890 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

893 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

894 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

895 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

898 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

903 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

905 
	}
}

1030 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1032 
uöt32_t
 
œ°evít
 = 0;

1033 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1034 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1037 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1038 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1041 
Êag1
 = 
I2Cx
->
SR1
;

1042 
Êag2
 = 
I2Cx
->
SR2
;

1043 
Êag2
 = flag2 << 16;

1046 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1049 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1052 
°©us
 = 
SUCCESS
;

1057 
°©us
 = 
ERROR
;

1060  
°©us
;

1061 
	}
}

1078 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1080 
uöt32_t
 
œ°evít
 = 0;

1081 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1084 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1087 
Êag1
 = 
I2Cx
->
SR1
;

1088 
Êag2
 = 
I2Cx
->
SR2
;

1089 
Êag2
 = flag2 << 16;

1092 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1095  
œ°evít
;

1096 
	}
}

1133 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1135 
FœgSètus
 
bô°©us
 = 
RESET
;

1136 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1139 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1140 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1143 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1146 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1149 
I2C_FLAG
 &
FLAG_Mask
;

1151 if(
i2¸eg
 != 0)

1154 
i2cxba£
 += 0x14;

1159 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1161 
i2cxba£
 += 0x18;

1164 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1167 
bô°©us
 = 
SET
;

1172 
bô°©us
 = 
RESET
;

1176  
bô°©us
;

1177 
	}
}

1212 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1214 
uöt32_t
 
Êagpos
 = 0;

1216 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1217 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1219 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1221 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1222 
	}
}

1246 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1248 
ITSètus
 
bô°©us
 = 
RESET
;

1249 
uöt32_t
 
íabÀ°©us
 = 0;

1252 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1253 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1256 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1259 
I2C_IT
 &
FLAG_Mask
;

1262 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1265 
bô°©us
 = 
SET
;

1270 
bô°©us
 = 
RESET
;

1273  
bô°©us
;

1274 
	}
}

1307 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1309 
uöt32_t
 
Êagpos
 = 0;

1311 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1312 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1314 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1316 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1317 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c

23 
	~"°m32f10x_iwdg.h
"

49 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

50 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

92 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

95 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

96 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

97 
	}
}

112 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

115 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

116 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

117 
	}
}

125 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

128 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

129 
IWDG
->
RLR
 = 
Rñﬂd
;

130 
	}
}

138 
	$IWDG_RñﬂdCou¡î
()

140 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

141 
	}
}

148 
	$IWDG_E«bÀ
()

150 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

151 
	}
}

161 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

163 
FœgSètus
 
bô°©us
 = 
RESET
;

165 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

166 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

168 
bô°©us
 = 
SET
;

172 
bô°©us
 = 
RESET
;

175  
bô°©us
;

176 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c

23 
	~"°m32f10x_pwr.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

54 
	#DBP_BôNumbî
 0x08

	)

55 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

58 
	#PVDE_BôNumbî
 0x04

	)

59 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

65 
	#EWUP_BôNumbî
 0x08

	)

66 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

71 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

72 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

112 
	$PWR_DeInô
()

114 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

115 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

116 
	}
}

124 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

128 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

129 
	}
}

137 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

140 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

141 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

142 
	}
}

158 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

160 
uöt32_t
 
tm¥eg
 = 0;

162 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

163 
tm¥eg
 = 
PWR
->
CR
;

165 
tm¥eg
 &
CR_PLS_MASK
;

167 
tm¥eg
 |
PWR_PVDLevñ
;

169 
PWR
->
CR
 = 
tm¥eg
;

170 
	}
}

178 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

182 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

183 
	}
}

197 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

199 
uöt32_t
 
tm¥eg
 = 0;

201 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

202 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

205 
tm¥eg
 = 
PWR
->
CR
;

207 
tm¥eg
 &
CR_DS_MASK
;

209 
tm¥eg
 |
PWR_Reguœt‹
;

211 
PWR
->
CR
 = 
tm¥eg
;

213 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

216 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

219 
	`__WFI
();

224 
	`__WFE
();

228 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP
);

229 
	}
}

236 
	$PWR_E¡îSTANDBYMode
()

239 
PWR
->
CR
 |
PWR_CR_CWUF
;

241 
PWR
->
CR
 |
PWR_CR_PDDS
;

243 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

245 #i‡
	`deföed
 ( 
__CC_ARM
 )

246 
	`__f‹˚_°‹es
();

249 
	`__WFI
();

250 
	}
}

261 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

263 
FœgSètus
 
bô°©us
 = 
RESET
;

265 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

267 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

269 
bô°©us
 = 
SET
;

273 
bô°©us
 = 
RESET
;

276  
bô°©us
;

277 
	}
}

287 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

290 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

292 
PWR
->
CR
 |
PWR_FLAG
 << 2;

293 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c

23 
	~"°m32f10x_rcc.h
"

47 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

53 
	#HSION_BôNumbî
 0x00

	)

54 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

57 
	#PLLON_BôNumbî
 0x18

	)

58 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

60 #ifde‡
STM32F10X_CL


62 
	#PLL2ON_BôNumbî
 0x1A

	)

63 
	#CR_PLL2ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL2ON_BôNumbî
 * 4))

	)

66 
	#PLL3ON_BôNumbî
 0x1C

	)

67 
	#CR_PLL3ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL3ON_BôNumbî
 * 4))

	)

71 
	#CSSON_BôNumbî
 0x13

	)

72 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

77 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

79 #i‚de‡
STM32F10X_CL


80 
	#USBPRE_BôNumbî
 0x16

	)

81 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

83 
	#OTGFSPRE_BôNumbî
 0x16

	)

84 
	#CFGR_OTGFSPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
OTGFSPRE_BôNumbî
 * 4))

	)

90 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

91 
	#RTCEN_BôNumbî
 0x0F

	)

92 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

95 
	#BDRST_BôNumbî
 0x10

	)

96 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

101 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

102 
	#LSION_BôNumbî
 0x00

	)

103 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

105 #ifde‡
STM32F10X_CL


109 
	#CFGR2_OFFSET
 (
RCC_OFFSET
 + 0x2C)

	)

110 
	#I2S2SRC_BôNumbî
 0x11

	)

111 
	#CFGR2_I2S2SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S2SRC_BôNumbî
 * 4))

	)

114 
	#I2S3SRC_BôNumbî
 0x12

	)

115 
	#CFGR2_I2S3SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S3SRC_BôNumbî
 * 4))

	)

121 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

122 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

123 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

124 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

125 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

128 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

129 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC2FFFF)

	)

131 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

134 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

135 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

136 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

137 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

138 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

139 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

140 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

141 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

142 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

143 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

144 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

145 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

146 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

149 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

151 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

153 
	#CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000)

	)

154 
	#CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000F)

	)

156 #ifde‡
STM32F10X_CL


157 
	#CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0)

	)

158 
	#CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00)

	)

159 
	#CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000)

	)

163 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

166 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

169 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

172 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

175 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

193 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

194 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

217 
	$RCC_DeInô
()

220 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

223 #i‚de‡
STM32F10X_CL


224 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

226 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

230 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

233 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

236 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

238 #ifde‡
STM32F10X_CL


240 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

243 
RCC
->
CIR
 = 0x00FF0000;

246 
RCC
->
CFGR2
 = 0x00000000;

247 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

249 
RCC
->
CIR
 = 0x009F0000;

252 
RCC
->
CFGR2
 = 0x00000000;

255 
RCC
->
CIR
 = 0x009F0000;

258 
	}
}

270 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

273 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

276 
RCC
->
CR
 &
CR_HSEON_Re£t
;

278 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

280 
RCC_HSE
)

282 
RCC_HSE_ON
:

284 
RCC
->
CR
 |
CR_HSEON_Së
;

287 
RCC_HSE_By∑ss
:

289 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

295 
	}
}

304 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

306 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

307 
Eº‹Sètus
 
°©us
 = 
ERROR
;

308 
FœgSètus
 
HSESètus
 = 
RESET
;

313 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

314 
SèπUpCou¡î
++;

315 } (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
HSESètus
 =
RESET
));

317 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

319 
°©us
 = 
SUCCESS
;

323 
°©us
 = 
ERROR
;

325  (
°©us
);

326 
	}
}

334 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

336 
uöt32_t
 
tm¥eg
 = 0;

338 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

339 
tm¥eg
 = 
RCC
->
CR
;

341 
tm¥eg
 &
CR_HSITRIM_Mask
;

343 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

345 
RCC
->
CR
 = 
tm¥eg
;

346 
	}
}

354 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

358 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

359 
	}
}

378 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

380 
uöt32_t
 
tm¥eg
 = 0;

383 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

384 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

386 
tm¥eg
 = 
RCC
->
CFGR
;

388 
tm¥eg
 &
CFGR_PLL_Mask
;

390 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

392 
RCC
->
CFGR
 = 
tm¥eg
;

393 
	}
}

401 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

404 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

406 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

407 
	}
}

409 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

426 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
)

428 
uöt32_t
 
tm¥eg
 = 0;

431 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_PREDIV1_Sour˚
));

432 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

434 
tm¥eg
 = 
RCC
->
CFGR2
;

436 
tm¥eg
 &~(
CFGR2_PREDIV1
 | 
CFGR2_PREDIV1SRC
);

438 
tm¥eg
 |
RCC_PREDIV1_Sour˚
 | 
RCC_PREDIV1_Div
 ;

440 
RCC
->
CFGR2
 = 
tm¥eg
;

441 
	}
}

444 #ifde‡
STM32F10X_CL


454 
	$RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
)

456 
uöt32_t
 
tm¥eg
 = 0;

459 
	`as£π_∑øm
(
	`IS_RCC_PREDIV2
(
RCC_PREDIV2_Div
));

461 
tm¥eg
 = 
RCC
->
CFGR2
;

463 
tm¥eg
 &~
CFGR2_PREDIV2
;

465 
tm¥eg
 |
RCC_PREDIV2_Div
;

467 
RCC
->
CFGR2
 = 
tm¥eg
;

468 
	}
}

479 
	$RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
)

481 
uöt32_t
 
tm¥eg
 = 0;

484 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_PLL2Mul
));

486 
tm¥eg
 = 
RCC
->
CFGR2
;

488 
tm¥eg
 &~
CFGR2_PLL2MUL
;

490 
tm¥eg
 |
RCC_PLL2Mul
;

492 
RCC
->
CFGR2
 = 
tm¥eg
;

493 
	}
}

505 
	$RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

508 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

510 *(
__IO
 
uöt32_t
 *Ë
CR_PLL2ON_BB
 = (uöt32_t)
NewSèã
;

511 
	}
}

523 
	$RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
)

525 
uöt32_t
 
tm¥eg
 = 0;

528 
	`as£π_∑øm
(
	`IS_RCC_PLL3_MUL
(
RCC_PLL3Mul
));

530 
tm¥eg
 = 
RCC
->
CFGR2
;

532 
tm¥eg
 &~
CFGR2_PLL3MUL
;

534 
tm¥eg
 |
RCC_PLL3Mul
;

536 
RCC
->
CFGR2
 = 
tm¥eg
;

537 
	}
}

546 
	$RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

550 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

551 *(
__IO
 
uöt32_t
 *Ë
CR_PLL3ON_BB
 = (uöt32_t)
NewSèã
;

552 
	}
}

564 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

566 
uöt32_t
 
tm¥eg
 = 0;

568 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

569 
tm¥eg
 = 
RCC
->
CFGR
;

571 
tm¥eg
 &
CFGR_SW_Mask
;

573 
tm¥eg
 |
RCC_SYSCLKSour˚
;

575 
RCC
->
CFGR
 = 
tm¥eg
;

576 
	}
}

587 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

589  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

590 
	}
}

608 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

610 
uöt32_t
 
tm¥eg
 = 0;

612 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

613 
tm¥eg
 = 
RCC
->
CFGR
;

615 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

617 
tm¥eg
 |
RCC_SYSCLK
;

619 
RCC
->
CFGR
 = 
tm¥eg
;

620 
	}
}

634 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

636 
uöt32_t
 
tm¥eg
 = 0;

638 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

639 
tm¥eg
 = 
RCC
->
CFGR
;

641 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

643 
tm¥eg
 |
RCC_HCLK
;

645 
RCC
->
CFGR
 = 
tm¥eg
;

646 
	}
}

660 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

662 
uöt32_t
 
tm¥eg
 = 0;

664 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

665 
tm¥eg
 = 
RCC
->
CFGR
;

667 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

669 
tm¥eg
 |
RCC_HCLK
 << 3;

671 
RCC
->
CFGR
 = 
tm¥eg
;

672 
	}
}

700 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

703 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

704 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

705 i‡(
NewSèã
 !
DISABLE
)

708 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

713 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

715 
	}
}

717 #i‚de‡
STM32F10X_CL


728 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

731 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

733 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

734 
	}
}

746 
	$RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
)

749 
	`as£π_∑øm
(
	`IS_RCC_OTGFSCLK_SOURCE
(
RCC_OTGFSCLKSour˚
));

751 *(
__IO
 
uöt32_t
 *Ë
CFGR_OTGFSPRE_BB
 = 
RCC_OTGFSCLKSour˚
;

752 
	}
}

766 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

768 
uöt32_t
 
tm¥eg
 = 0;

770 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

771 
tm¥eg
 = 
RCC
->
CFGR
;

773 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

775 
tm¥eg
 |
RCC_PCLK2
;

777 
RCC
->
CFGR
 = 
tm¥eg
;

778 
	}
}

780 #ifde‡
STM32F10X_CL


792 
	$RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
)

795 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLK_SOURCE
(
RCC_I2S2CLKSour˚
));

797 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S2SRC_BB
 = 
RCC_I2S2CLKSour˚
;

798 
	}
}

811 
	$RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
)

814 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLK_SOURCE
(
RCC_I2S3CLKSour˚
));

816 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S3SRC_BB
 = 
RCC_I2S3CLKSour˚
;

817 
	}
}

829 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

832 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

835 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

837 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

839 
RCC_LSE
)

841 
RCC_LSE_ON
:

843 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

846 
RCC_LSE_By∑ss
:

848 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

854 
	}
}

862 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

865 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

866 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

867 
	}
}

879 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

882 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

884 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

885 
	}
}

893 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

896 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

897 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

898 
	}
}

908 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

910 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

912 #ifde‡ 
STM32F10X_CL


913 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

916 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

917 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

921 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

923 
tmp
)

926 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

929 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

934 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

935 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

937 #i‚de‡
STM32F10X_CL


938 
∂lmuŒ
 = (Öllmull >> 18) + 2;

940 i‡(
∂lsour˚
 == 0x00)

942 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

946 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

947 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

949 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

952 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

954 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 >> 1Ë* 
∂lmuŒ
;

958 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
 * 
∂lmuŒ
;

963 
∂lmuŒ
 =Öllmull >> 18;

965 i‡(
∂lmuŒ
 != 0x0D)

967 
∂lmuŒ
 += 2;

971 
∂lmuŒ
 = 13 / 2;

974 i‡(
∂lsour˚
 == 0x00)

976 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

982 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
CFGR2_PREDIV1SRC
;

983 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

985 i‡(
¥ediv1sour˚
 == 0)

987 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

993 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
CFGR2_PREDIV2
) >> 4) + 1;

994 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
CFGR2_PLL2MUL
) >> 8 ) + 2;

995 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1002 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1008 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

1009 
tmp
 =Åmp >> 4;

1010 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1012 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1014 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

1015 
tmp
 =Åmp >> 8;

1016 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1018 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1020 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

1021 
tmp
 =Åmp >> 11;

1022 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1024 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1026 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

1027 
tmp
 =Åmp >> 14;

1028 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

1030 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

1031 
	}
}

1064 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1067 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1068 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1070 i‡(
NewSèã
 !
DISABLE
)

1072 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1076 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1078 
	}
}

1095 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1098 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1099 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1100 i‡(
NewSèã
 !
DISABLE
)

1102 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1106 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1108 
	}
}

1126 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1129 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1131 i‡(
NewSèã
 !
DISABLE
)

1133 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1137 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1139 
	}
}

1141 #ifde‡
STM32F10X_CL


1153 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1156 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH_RESET
(
RCC_AHBPîùh
));

1157 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1159 i‡(
NewSèã
 !
DISABLE
)

1161 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1165 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1167 
	}
}

1185 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1188 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1189 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1190 i‡(
NewSèã
 !
DISABLE
)

1192 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1196 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1198 
	}
}

1216 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1219 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1220 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1221 i‡(
NewSèã
 !
DISABLE
)

1223 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1227 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1229 
	}
}

1237 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1240 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1241 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1242 
	}
}

1250 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1253 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1254 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

1255 
	}
}

1282 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

1285 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

1288 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

1289 
	}
}

1326 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1328 
uöt32_t
 
tmp
 = 0;

1329 
uöt32_t
 
°©u§eg
 = 0;

1330 
FœgSètus
 
bô°©us
 = 
RESET
;

1332 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1335 
tmp
 = 
RCC_FLAG
 >> 5;

1336 i‡(
tmp
 == 1)

1338 
°©u§eg
 = 
RCC
->
CR
;

1340 i‡(
tmp
 == 2)

1342 
°©u§eg
 = 
RCC
->
BDCR
;

1346 
°©u§eg
 = 
RCC
->
CSR
;

1350 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

1351 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1353 
bô°©us
 = 
SET
;

1357 
bô°©us
 = 
RESET
;

1361  
bô°©us
;

1362 
	}
}

1371 
	$RCC_CÀ¨Fœg
()

1374 
RCC
->
CSR
 |
CSR_RMVF_Së
;

1375 
	}
}

1402 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1404 
ITSètus
 
bô°©us
 = 
RESET
;

1406 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1409 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1411 
bô°©us
 = 
SET
;

1415 
bô°©us
 = 
RESET
;

1419  
bô°©us
;

1420 
	}
}

1448 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1451 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1455 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1456 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c

23 
	~"°m32f10x_πc.h
"

44 
	#RTC_LSB_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

45 
	#PRLH_MSB_MASK
 ((
uöt32_t
)0x000F0000Ë

	)

90 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

93 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

94 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

96 i‡(
NewSèã
 !
DISABLE
)

98 
RTC
->
CRH
 |
RTC_IT
;

102 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

104 
	}
}

111 
	$RTC_E¡îC⁄figMode
()

114 
RTC
->
CRL
 |
RTC_CRL_CNF
;

115 
	}
}

122 
	$RTC_ExôC⁄figMode
()

125 
RTC
->
CRL
 &(
uöt16_t
)~((uöt16_t)
RTC_CRL_CNF
);

126 
	}
}

133 
uöt32_t
 
	$RTC_GëCou¡î
()

135 
uöt16_t
 
tmp
 = 0;

136 
tmp
 = 
RTC
->
CNTL
;

137  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

138 
	}
}

145 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

147 
	`RTC_E¡îC⁄figMode
();

149 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

151 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_MASK
);

152 
	`RTC_ExôC⁄figMode
();

153 
	}
}

160 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

163 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

165 
	`RTC_E¡îC⁄figMode
();

167 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_MASK
) >> 16;

169 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_MASK
);

170 
	`RTC_ExôC⁄figMode
();

171 
	}
}

178 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

180 
	`RTC_E¡îC⁄figMode
();

182 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

184 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_MASK
);

185 
	`RTC_ExôC⁄figMode
();

186 
	}
}

193 
uöt32_t
 
	$RTC_GëDividî
()

195 
uöt32_t
 
tmp
 = 0x00;

196 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

197 
tmp
 |
RTC
->
DIVL
;

198  
tmp
;

199 
	}
}

207 
	$RTC_WaôF‹La°Task
()

210 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

213 
	}
}

223 
	$RTC_WaôF‹Synchro
()

226 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

228 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

231 
	}
}

244 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

246 
FœgSètus
 
bô°©us
 = 
RESET
;

249 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

251 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

253 
bô°©us
 = 
SET
;

257 
bô°©us
 = 
RESET
;

259  
bô°©us
;

260 
	}
}

273 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

276 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

279 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

280 
	}
}

291 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

293 
ITSètus
 
bô°©us
 = 
RESET
;

295 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

297 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

298 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

300 
bô°©us
 = 
SET
;

304 
bô°©us
 = 
RESET
;

306  
bô°©us
;

307 
	}
}

318 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

321 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

324 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

325 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c

23 
	~"°m32f10x_sdio.h
"

24 
	~"°m32f10x_rcc.h
"

40 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

45 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

46 
	#CLKEN_BôNumbî
 0x08

	)

47 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

52 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

53 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

54 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

57 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

58 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

61 
	#NIEN_BôNumbî
 0x0D

	)

62 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

65 
	#ATACMD_BôNumbî
 0x0E

	)

66 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

71 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

72 
	#DMAEN_BôNumbî
 0x03

	)

73 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

76 
	#RWSTART_BôNumbî
 0x08

	)

77 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

80 
	#RWSTOP_BôNumbî
 0x09

	)

81 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

84 
	#RWMOD_BôNumbî
 0x0A

	)

85 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

88 
	#SDIOEN_BôNumbî
 0x0B

	)

89 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

96 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

101 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

106 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

111 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

114 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

161 
	$SDIO_DeInô
()

163 
SDIO
->
POWER
 = 0x00000000;

164 
SDIO
->
CLKCR
 = 0x00000000;

165 
SDIO
->
ARG
 = 0x00000000;

166 
SDIO
->
CMD
 = 0x00000000;

167 
SDIO
->
DTIMER
 = 0x00000000;

168 
SDIO
->
DLEN
 = 0x00000000;

169 
SDIO
->
DCTRL
 = 0x00000000;

170 
SDIO
->
ICR
 = 0x00C007FF;

171 
SDIO
->
MASK
 = 0x00000000;

172 
	}
}

181 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

183 
uöt32_t
 
tm¥eg
 = 0;

186 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

188 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

189 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

190 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

194 
tm¥eg
 = 
SDIO
->
CLKCR
;

197 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

205 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

206 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

207 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

210 
SDIO
->
CLKCR
 = 
tm¥eg
;

211 
	}
}

219 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

222 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

223 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

224 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

225 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

226 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

227 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

228 
	}
}

235 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

240 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

241 
	}
}

251 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

254 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

256 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

257 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

258 
	}
}

269 
uöt32_t
 
	$SDIO_GëPowîSèã
()

271  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

272 
	}
}

307 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

310 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

311 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

313 i‡(
NewSèã
 !
DISABLE
)

316 
SDIO
->
MASK
 |
SDIO_IT
;

321 
SDIO
->
MASK
 &~
SDIO_IT
;

323 
	}
}

331 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

334 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

336 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

337 
	}
}

346 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

348 
uöt32_t
 
tm¥eg
 = 0;

351 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

352 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

353 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

354 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

358 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

362 
tm¥eg
 = 
SDIO
->
CMD
;

364 
tm¥eg
 &
CMD_CLEAR_MASK
;

369 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


370 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

373 
SDIO
->
CMD
 = 
tm¥eg
;

374 
	}
}

382 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

385 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

386 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

387 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

388 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

389 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

390 
	}
}

397 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

399  (
uöt8_t
)(
SDIO
->
RESPCMD
);

400 
	}
}

412 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

414 
__IO
 
uöt32_t
 
tmp
 = 0;

417 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

419 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

421  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

422 
	}
}

431 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

433 
uöt32_t
 
tm¥eg
 = 0;

436 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

437 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

438 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

439 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

440 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

444 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

448 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

452 
tm¥eg
 = 
SDIO
->
DCTRL
;

454 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

459 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


460 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

463 
SDIO
->
DCTRL
 = 
tm¥eg
;

464 
	}
}

472 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

475 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

476 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

477 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

478 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

479 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

480 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

481 
	}
}

488 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

490  
SDIO
->
DCOUNT
;

491 
	}
}

498 
uöt32_t
 
	$SDIO_RódD©a
()

500  
SDIO
->
FIFO
;

501 
	}
}

508 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

510 
SDIO
->
FIFO
 = 
D©a
;

511 
	}
}

518 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

520  
SDIO
->
FIFOCNT
;

521 
	}
}

529 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

534 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

535 
	}
}

543 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

546 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

548 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

549 
	}
}

559 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

562 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

564 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

565 
	}
}

573 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

576 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

578 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

579 
	}
}

587 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

592 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

593 
	}
}

601 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

604 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

606 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

607 
	}
}

614 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

617 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

620 
	}
}

627 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

630 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

632 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

633 
	}
}

666 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

668 
FœgSètus
 
bô°©us
 = 
RESET
;

671 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

673 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

675 
bô°©us
 = 
SET
;

679 
bô°©us
 = 
RESET
;

681  
bô°©us
;

682 
	}
}

704 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

707 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

709 
SDIO
->
ICR
 = 
SDIO_FLAG
;

710 
	}
}

743 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

745 
ITSètus
 
bô°©us
 = 
RESET
;

748 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

749 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

751 
bô°©us
 = 
SET
;

755 
bô°©us
 = 
RESET
;

757  
bô°©us
;

758 
	}
}

779 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

782 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

784 
SDIO
->
ICR
 = 
SDIO_IT
;

785 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c

23 
	~"°m32f10x_•i.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

50 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

53 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

54 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

57 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

60 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

61 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

64 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

65 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

69 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

72 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

73 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

76 
	#I2S2_CLOCK_SRC
 ((
uöt32_t
)(0x00020000))

	)

77 
	#I2S3_CLOCK_SRC
 ((
uöt32_t
)(0x00040000))

	)

78 
	#I2S_MUL_MASK
 ((
uöt32_t
)(0x0000F000))

	)

79 
	#I2S_DIV_MASK
 ((
uöt32_t
)(0x000000F0))

	)

119 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

122 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

124 i‡(
SPIx
 =
SPI1
)

127 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

131 i‡(
SPIx
 =
SPI2
)

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

136 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

140 i‡(
SPIx
 =
SPI3
)

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

148 
	}
}

158 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

160 
uöt16_t
 
tm¥eg
 = 0;

163 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

166 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

167 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

168 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

169 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

170 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

171 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

172 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

173 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

174 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

178 
tm¥eg
 = 
SPIx
->
CR1
;

180 
tm¥eg
 &
CR1_CLEAR_Mask
;

189 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

190 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

191 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

192 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

194 
SPIx
->
CR1
 = 
tm¥eg
;

197 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

201 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

202 
	}
}

219 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

221 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

222 
uöt32_t
 
tmp
 = 0;

223 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

224 
uöt32_t
 
sour˚˛ock
 = 0;

227 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

228 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

229 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

230 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

231 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

232 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

233 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

237 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

238 
SPIx
->
I2SPR
 = 0x0002;

241 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

244 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

246 
i2sodd
 = (
uöt16_t
)0;

247 
i2sdiv
 = (
uöt16_t
)2;

253 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

256 
∑ckëÀngth
 = 1;

261 
∑ckëÀngth
 = 2;

265 if(((
uöt32_t
)
SPIx
Ë=
SPI2_BASE
)

268 
tmp
 = 
I2S2_CLOCK_SRC
;

273 
tmp
 = 
I2S3_CLOCK_SRC
;

278 #ifde‡
STM32F10X_CL


279 if((
RCC
->
CFGR2
 & 
tmp
) != 0)

282 
tmp
 = (
uöt32_t
)((
RCC
->
CFGR2
 & 
I2S_MUL_MASK
) >> 12);

285 if((
tmp
 > 5) && (tmp < 15))

288 
tmp
 += 2;

292 i‡(
tmp
 == 15)

295 
tmp
 = 20;

299 
sour˚˛ock
 = (
uöt32_t
)(((
RCC
->
CFGR2
 & 
I2S_DIV_MASK
) >> 4) + 1);

302 
sour˚˛ock
 = (
uöt32_t
Ë((
HSE_VÆue
 / sour˚˛ockË* 
tmp
 * 2);

307 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

310 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

314 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

317 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

321 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

324 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

329 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

333 
tmp
 =Åmp / 10;

336 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

339 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

342 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

346 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

349 
i2sdiv
 = 2;

350 
i2sodd
 = 0;

354 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

357 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

358 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

359 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

362 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

363 
	}
}

370 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

374 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

376 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

378 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

380 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

382 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

384 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

386 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

388 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

390 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

391 
	}
}

398 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

402 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

405 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

408 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

411 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

414 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

417 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

418 
	}
}

427 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

430 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

432 i‡(
NewSèã
 !
DISABLE
)

435 
SPIx
->
CR1
 |
CR1_SPE_Së
;

440 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

442 
	}
}

451 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

455 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

456 i‡(
NewSèã
 !
DISABLE
)

459 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

464 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

466 
	}
}

482 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

486 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

491 
ôpos
 = 
SPI_I2S_IT
 >> 4;

494 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

496 i‡(
NewSèã
 !
DISABLE
)

499 
SPIx
->
CR2
 |
ômask
;

504 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

506 
	}
}

521 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

524 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

525 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

526 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

527 i‡(
NewSèã
 !
DISABLE
)

530 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

535 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

537 
	}
}

547 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

550 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

553 
SPIx
->
DR
 = 
D©a
;

554 
	}
}

563 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

566 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

569  
SPIx
->
DR
;

570 
	}
}

581 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

584 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

585 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

586 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

589 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

594 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

596 
	}
}

605 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

608 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

609 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

610 i‡(
NewSèã
 !
DISABLE
)

613 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

618 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

620 
	}
}

631 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

634 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

635 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

637 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

639 
SPIx
->
CR1
 |
SPI_D©aSize
;

640 
	}
}

647 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

650 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

653 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

654 
	}
}

663 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

668 i‡(
NewSèã
 !
DISABLE
)

671 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

676 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

678 
	}
}

689 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

691 
uöt16_t
 
¸¸eg
 = 0;

693 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

694 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

695 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

698 
¸¸eg
 = 
SPIx
->
TXCRCR
;

703 
¸¸eg
 = 
SPIx
->
RXCRCR
;

706  
¸¸eg
;

707 
	}
}

714 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

717 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

720  
SPIx
->
CRCPR
;

721 
	}
}

732 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

735 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

736 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

737 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

740 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

745 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

747 
	}
}

766 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

768 
FœgSètus
 
bô°©us
 = 
RESET
;

770 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

771 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

773 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

776 
bô°©us
 = 
SET
;

781 
bô°©us
 = 
RESET
;

784  
bô°©us
;

785 
	}
}

804 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

807 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

808 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

811 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

812 
	}
}

829 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

831 
ITSètus
 
bô°©us
 = 
RESET
;

832 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

835 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

836 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

839 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

842 
ômask
 = 
SPI_I2S_IT
 >> 4;

845 
ômask
 = 0x01 << itmask;

848 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

851 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

854 
bô°©us
 = 
SET
;

859 
bô°©us
 = 
RESET
;

862  
bô°©us
;

863 
	}
}

883 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

885 
uöt16_t
 
ôpos
 = 0;

887 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

888 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

891 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

894 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

895 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c

23 
	~"°m32f10x_tim.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

49 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

50 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

51 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

77 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

78 
uöt16_t
 
TIM_ICFûãr
);

79 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

80 
uöt16_t
 
TIM_ICFûãr
);

81 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

82 
uöt16_t
 
TIM_ICFûãr
);

83 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

84 
uöt16_t
 
TIM_ICFûãr
);

122 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

125 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

127 i‡(
TIMx
 =
TIM1
)

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

132 i‡(
TIMx
 =
TIM2
)

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

137 i‡(
TIMx
 =
TIM3
)

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

142 i‡(
TIMx
 =
TIM4
)

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

147 i‡(
TIMx
 =
TIM5
)

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

150 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

152 i‡(
TIMx
 =
TIM6
)

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

155 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

157 i‡(
TIMx
 =
TIM7
)

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

162 i‡(
TIMx
 =
TIM8
)

164 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

165 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

167 i‡(
TIMx
 =
TIM9
)

169 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

170 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

172 i‡(
TIMx
 =
TIM10
)

174 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

175 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

177 i‡(
TIMx
 =
TIM11
)

179 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

180 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

182 i‡(
TIMx
 =
TIM12
)

184 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

185 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

187 i‡(
TIMx
 =
TIM13
)

189 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

192 i‡(
TIMx
 =
TIM14
)

194 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

197 i‡(
TIMx
 =
TIM15
)

199 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
ENABLE
);

200 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
DISABLE
);

202 i‡(
TIMx
 =
TIM16
)

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
ENABLE
);

205 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
DISABLE
);

209 i‡(
TIMx
 =
TIM17
)

211 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
ENABLE
);

212 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
DISABLE
);

215 
	}
}

226 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

228 
uöt16_t
 
tmp¸1
 = 0;

231 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

232 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

233 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

235 
tmp¸1
 = 
TIMx
->
CR1
;

237 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
)||

238 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

241 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

242 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

245 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

248 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CKD
));

249 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

252 
TIMx
->
CR1
 = 
tmp¸1
;

255 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

258 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

260 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)|| (TIMx =
TIM16
Ë|| (TIMx =
TIM17
))

263 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

268 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

269 
	}
}

279 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

281 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

284 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

285 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

286 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

287 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

289 
TIMx
->
CCER
 &(
uöt16_t
)(~(uöt16_t)
TIM_CCER_CC1E
);

291 
tmpc˚r
 = 
TIMx
->
CCER
;

293 
tmp¸2
 = 
TIMx
->
CR2
;

296 
tmpccmrx
 = 
TIMx
->
CCMR1
;

299 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC1M
));

300 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC1S
));

303 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

306 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1P
));

308 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

311 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

313 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)||

314 (
TIMx
 =
TIM16
)|| (TIMx =
TIM17
))

316 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

317 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

318 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

319 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

322 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NP
));

324 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

327 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NE
));

329 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

332 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1
));

333 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1N
));

336 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

338 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

341 
TIMx
->
CR2
 = 
tmp¸2
;

344 
TIMx
->
CCMR1
 = 
tmpccmrx
;

347 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

350 
TIMx
->
CCER
 = 
tmpc˚r
;

351 
	}
}

362 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

364 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

367 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

368 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

369 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

370 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

372 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2E
));

375 
tmpc˚r
 = 
TIMx
->
CCER
;

377 
tmp¸2
 = 
TIMx
->
CR2
;

380 
tmpccmrx
 = 
TIMx
->
CCMR1
;

383 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC2M
));

384 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC2S
));

387 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

390 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2P
));

392 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

395 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

397 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

399 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

400 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

401 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

402 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

405 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NP
));

407 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

410 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NE
));

412 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

415 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2
));

416 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2N
));

419 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

421 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

424 
TIMx
->
CR2
 = 
tmp¸2
;

427 
TIMx
->
CCMR1
 = 
tmpccmrx
;

430 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

433 
TIMx
->
CCER
 = 
tmpc˚r
;

434 
	}
}

444 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

446 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

449 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

450 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

451 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

452 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

454 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3E
));

457 
tmpc˚r
 = 
TIMx
->
CCER
;

459 
tmp¸2
 = 
TIMx
->
CR2
;

462 
tmpccmrx
 = 
TIMx
->
CCMR2
;

465 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC3M
));

466 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC3S
));

468 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

471 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3P
));

473 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

476 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

478 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

480 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

481 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

482 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

483 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

486 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NP
));

488 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

490 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NE
));

493 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

495 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3
));

496 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3N
));

498 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

500 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

503 
TIMx
->
CR2
 = 
tmp¸2
;

506 
TIMx
->
CCMR2
 = 
tmpccmrx
;

509 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

512 
TIMx
->
CCER
 = 
tmpc˚r
;

513 
	}
}

523 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

525 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

528 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

529 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

530 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

531 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

533 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4E
));

536 
tmpc˚r
 = 
TIMx
->
CCER
;

538 
tmp¸2
 = 
TIMx
->
CR2
;

541 
tmpccmrx
 = 
TIMx
->
CCMR2
;

544 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC4M
));

545 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC4S
));

548 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

551 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4P
));

553 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

556 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

558 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

560 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

562 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS4
));

564 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

567 
TIMx
->
CR2
 = 
tmp¸2
;

570 
TIMx
->
CCMR2
 = 
tmpccmrx
;

573 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

576 
TIMx
->
CCER
 = 
tmpc˚r
;

577 
	}
}

587 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

590 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

591 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

592 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

593 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

595 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

596 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

598 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

602 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY_LITE
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

604 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

606 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

608 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

612 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

614 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

616 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

618 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

619 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

620 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

622 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

624 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

626 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

628 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

629 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

630 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

632 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

636 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

638 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

639 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

640 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

642 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

644 
	}
}

654 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

656 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

657 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

659 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

661 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

663 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

667 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

670 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

672 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

676 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

678 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

681 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

682 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

684 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

686 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

688 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

693 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

694 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

696 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

698 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

700 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

702 
	}
}

712 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

715 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

716 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

717 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

718 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

719 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

720 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

721 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

724 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

725 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

726 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

727 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

728 
	}
}

736 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

739 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

740 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

741 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

742 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

743 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

744 
	}
}

752 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

755 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

756 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

757 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

758 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

759 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

760 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

761 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

762 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

763 
	}
}

771 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

774 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

775 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

776 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

777 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

778 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

779 
	}
}

787 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

790 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

791 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

792 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

793 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

794 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

795 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

796 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

797 
	}
}

806 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

809 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

810 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

812 i‡(
NewSèã
 !
DISABLE
)

815 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

820 
TIMx
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
));

822 
	}
}

831 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

834 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

835 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

836 i‡(
NewSèã
 !
DISABLE
)

839 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

844 
TIMx
->
BDTR
 &(
uöt16_t
)(~((uöt16_t)
TIM_BDTR_MOE
));

846 
	}
}

872 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

875 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

876 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

877 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

879 i‡(
NewSèã
 !
DISABLE
)

882 
TIMx
->
DIER
 |
TIM_IT
;

887 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

889 
	}
}

909 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

912 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

913 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

916 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

917 
	}
}

937 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

940 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

941 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

942 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

944 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

945 
	}
}

964 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

967 
	`as£π_∑øm
(
	`IS_TIM_LIST9_PERIPH
(
TIMx
));

968 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

969 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

971 i‡(
NewSèã
 !
DISABLE
)

974 
TIMx
->
DIER
 |
TIM_DMASour˚
;

979 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

981 
	}
}

989 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

992 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

994 
TIMx
->
SMCR
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

995 
	}
}

1008 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1011 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1012 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1014 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

1016 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1017 
	}
}

1035 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1036 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

1039 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1040 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

1041 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

1042 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

1044 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

1046 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1050 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1053 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

1055 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1056 
	}
}

1075 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1076 
uöt16_t
 
ExtTRGFûãr
)

1078 
uöt16_t
 
tmpsm¸
 = 0;

1080 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1081 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1082 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1083 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1085 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1088 
tmpsm¸
 = 
TIMx
->
SMCR
;

1090 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1092 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

1094 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1095 
tmpsm¸
 |
TIM_TS_ETRF
;

1097 
TIMx
->
SMCR
 = 
tmpsm¸
;

1098 
	}
}

1117 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1121 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1122 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1123 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1124 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1126 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1128 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

1129 
	}
}

1148 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1149 
uöt16_t
 
ExtTRGFûãr
)

1151 
uöt16_t
 
tmpsm¸
 = 0;

1153 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1154 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1155 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1156 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1157 
tmpsm¸
 = 
TIMx
->
SMCR
;

1159 
tmpsm¸
 &
SMCR_ETR_Mask
;

1161 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

1163 
TIMx
->
SMCR
 = 
tmpsm¸
;

1164 
	}
}

1176 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1179 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1180 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1182 
TIMx
->
PSC
 = 
PªsˇÀr
;

1184 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1185 
	}
}

1199 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1201 
uöt16_t
 
tmp¸1
 = 0;

1203 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1204 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1205 
tmp¸1
 = 
TIMx
->
CR1
;

1207 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

1209 
tmp¸1
 |
TIM_Cou¡îMode
;

1211 
TIMx
->
CR1
 = 
tmp¸1
;

1212 
	}
}

1229 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1231 
uöt16_t
 
tmpsm¸
 = 0;

1233 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1234 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1236 
tmpsm¸
 = 
TIMx
->
SMCR
;

1238 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1240 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1242 
TIMx
->
SMCR
 = 
tmpsm¸
;

1243 
	}
}

1264 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1265 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1267 
uöt16_t
 
tmpsm¸
 = 0;

1268 
uöt16_t
 
tmpccmr1
 = 0;

1269 
uöt16_t
 
tmpc˚r
 = 0;

1272 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1273 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1274 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1275 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1278 
tmpsm¸
 = 
TIMx
->
SMCR
;

1281 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1284 
tmpc˚r
 = 
TIMx
->
CCER
;

1287 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1288 
tmpsm¸
 |
TIM_EncodîMode
;

1291 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& (uöt16_t)(~((uöt16_t)
TIM_CCMR1_CC2S
)));

1292 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

1295 
tmpc˚r
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCER_CC1P
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCER_CC2P
)));

1296 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

1299 
TIMx
->
SMCR
 = 
tmpsm¸
;

1301 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1303 
TIMx
->
CCER
 = 
tmpc˚r
;

1304 
	}
}

1315 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1317 
uöt16_t
 
tmpccmr1
 = 0;

1319 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1320 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1321 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1323 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1M
);

1325 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1327 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1328 
	}
}

1339 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1341 
uöt16_t
 
tmpccmr1
 = 0;

1343 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1344 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1345 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1347 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2M
);

1349 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1351 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1352 
	}
}

1363 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1365 
uöt16_t
 
tmpccmr2
 = 0;

1367 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1368 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1369 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1371 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3M
);

1373 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1375 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1376 
	}
}

1387 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1389 
uöt16_t
 
tmpccmr2
 = 0;

1391 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1392 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1393 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1395 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4M
);

1397 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1399 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1400 
	}
}

1409 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1412 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1413 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1414 i‡(
NewSèã
 !
DISABLE
)

1417 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

1422 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_ARPE
);

1424 
	}
}

1433 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1436 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1437 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1438 i‡(
NewSèã
 !
DISABLE
)

1441 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

1446 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCUS
);

1448 
	}
}

1458 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1461 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1462 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1463 i‡(
NewSèã
 !
DISABLE
)

1466 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

1471 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCDS
);

1473 
	}
}

1483 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1486 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1488 i‡(
NewSèã
 !
DISABLE
)

1491 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

1496 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCPC
);

1498 
	}
}

1509 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1511 
uöt16_t
 
tmpccmr1
 = 0;

1513 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1514 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1515 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1517 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1PE
);

1519 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1521 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1522 
	}
}

1534 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1536 
uöt16_t
 
tmpccmr1
 = 0;

1538 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1539 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1540 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1542 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2PE
);

1544 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1546 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1547 
	}
}

1558 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1560 
uöt16_t
 
tmpccmr2
 = 0;

1562 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1563 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1564 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1566 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3PE
);

1568 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1570 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1571 
	}
}

1582 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1584 
uöt16_t
 
tmpccmr2
 = 0;

1586 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1587 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1588 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1590 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4PE
);

1592 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1594 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1595 
	}
}

1606 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1608 
uöt16_t
 
tmpccmr1
 = 0;

1610 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1611 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1613 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1615 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1FE
);

1617 
tmpccmr1
 |
TIM_OCFa°
;

1619 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1620 
	}
}

1632 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1634 
uöt16_t
 
tmpccmr1
 = 0;

1636 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1637 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1639 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1641 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2FE
);

1643 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1645 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1646 
	}
}

1657 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1659 
uöt16_t
 
tmpccmr2
 = 0;

1661 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1662 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1664 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1666 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3FE
);

1668 
tmpccmr2
 |
TIM_OCFa°
;

1670 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1671 
	}
}

1682 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1684 
uöt16_t
 
tmpccmr2
 = 0;

1686 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1687 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1689 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1691 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4FE
);

1693 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1695 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1696 
	}
}

1707 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1709 
uöt16_t
 
tmpccmr1
 = 0;

1711 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1712 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1714 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1717 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1CE
);

1719 
tmpccmr1
 |
TIM_OCCÀ¨
;

1721 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1722 
	}
}

1733 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1735 
uöt16_t
 
tmpccmr1
 = 0;

1737 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1738 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1739 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1741 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2CE
);

1743 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1745 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1746 
	}
}

1757 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1759 
uöt16_t
 
tmpccmr2
 = 0;

1761 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1762 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1763 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1765 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3CE
);

1767 
tmpccmr2
 |
TIM_OCCÀ¨
;

1769 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1770 
	}
}

1781 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1783 
uöt16_t
 
tmpccmr2
 = 0;

1785 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1786 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1787 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1789 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4CE
);

1791 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1793 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1794 
	}
}

1805 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1807 
uöt16_t
 
tmpc˚r
 = 0;

1809 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1810 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1811 
tmpc˚r
 = 
TIMx
->
CCER
;

1813 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1P
);

1814 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1816 
TIMx
->
CCER
 = 
tmpc˚r
;

1817 
	}
}

1828 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1830 
uöt16_t
 
tmpc˚r
 = 0;

1832 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1833 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1835 
tmpc˚r
 = 
TIMx
->
CCER
;

1837 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1NP
);

1838 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1840 
TIMx
->
CCER
 = 
tmpc˚r
;

1841 
	}
}

1852 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1854 
uöt16_t
 
tmpc˚r
 = 0;

1856 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1857 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1858 
tmpc˚r
 = 
TIMx
->
CCER
;

1860 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2P
);

1861 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1863 
TIMx
->
CCER
 = 
tmpc˚r
;

1864 
	}
}

1875 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1877 
uöt16_t
 
tmpc˚r
 = 0;

1879 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1880 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1882 
tmpc˚r
 = 
TIMx
->
CCER
;

1884 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2NP
);

1885 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1887 
TIMx
->
CCER
 = 
tmpc˚r
;

1888 
	}
}

1899 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1901 
uöt16_t
 
tmpc˚r
 = 0;

1903 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1904 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1905 
tmpc˚r
 = 
TIMx
->
CCER
;

1907 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3P
);

1908 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1910 
TIMx
->
CCER
 = 
tmpc˚r
;

1911 
	}
}

1922 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1924 
uöt16_t
 
tmpc˚r
 = 0;

1927 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1928 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1930 
tmpc˚r
 = 
TIMx
->
CCER
;

1932 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3NP
);

1933 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1935 
TIMx
->
CCER
 = 
tmpc˚r
;

1936 
	}
}

1947 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1949 
uöt16_t
 
tmpc˚r
 = 0;

1951 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1952 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1953 
tmpc˚r
 = 
TIMx
->
CCER
;

1955 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4P
);

1956 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1958 
TIMx
->
CCER
 = 
tmpc˚r
;

1959 
	}
}

1974 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1976 
uöt16_t
 
tmp
 = 0;

1979 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1980 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1981 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1983 
tmp
 = 
CCER_CCE_Së
 << 
TIM_Ch™√l
;

1986 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1989 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1990 
	}
}

2004 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

2006 
uöt16_t
 
tmp
 = 0;

2009 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2010 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2011 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2013 
tmp
 = 
CCER_CCNE_Së
 << 
TIM_Ch™√l
;

2016 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

2019 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2020 
	}
}

2045 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

2047 
uöt32_t
 
tmp
 = 0;

2048 
uöt16_t
 
tmp1
 = 0;

2051 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2052 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2053 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

2055 
tmp
 = (
uöt32_t
Ë
TIMx
;

2056 
tmp
 +
CCMR_Off£t
;

2058 
tmp1
 = 
CCER_CCE_Së
 << (
uöt16_t
)
TIM_Ch™√l
;

2061 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

2063 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

2065 
tmp
 +(
TIM_Ch™√l
>>1);

2068 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC1M
);

2071 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

2075 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

2078 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC2M
);

2081 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

2083 
	}
}

2092 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2095 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2096 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2097 i‡(
NewSèã
 !
DISABLE
)

2100 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

2105 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_UDIS
);

2107 
	}
}

2120 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2123 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2125 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2128 
TIMx
->
CR1
 |
TIM_CR1_URS
;

2133 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_URS
);

2135 
	}
}

2144 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2147 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2149 i‡(
NewSèã
 !
DISABLE
)

2152 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

2157 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_TI1S
);

2159 
	}
}

2170 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2173 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2174 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2176 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_OPM
);

2178 
TIMx
->
CR1
 |
TIM_OPMode
;

2179 
	}
}

2202 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2205 
	`as£π_∑øm
(
	`IS_TIM_LIST7_PERIPH
(
TIMx
));

2206 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2208 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_MMS
);

2210 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2211 
	}
}

2225 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2228 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2229 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2231 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_SMS
);

2233 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2234 
	}
}

2246 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2249 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2250 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2252 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_MSM
);

2255 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2256 
	}
}

2264 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2267 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2269 
TIMx
->
CNT
 = 
Cou¡î
;

2270 
	}
}

2278 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2281 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2283 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2284 
	}
}

2292 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2295 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2297 
TIMx
->
CCR1
 = 
Com∑ª1
;

2298 
	}
}

2306 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2309 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2311 
TIMx
->
CCR2
 = 
Com∑ª2
;

2312 
	}
}

2320 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2323 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2325 
TIMx
->
CCR3
 = 
Com∑ª3
;

2326 
	}
}

2334 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2337 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2339 
TIMx
->
CCR4
 = 
Com∑ª4
;

2340 
	}
}

2353 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2356 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2357 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2359 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC1PSC
);

2361 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2362 
	}
}

2375 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2378 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2379 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2381 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC2PSC
);

2383 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2384 
	}
}

2397 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2400 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2401 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2403 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC3PSC
);

2405 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2406 
	}
}

2419 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2422 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2423 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2425 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC4PSC
);

2427 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2428 
	}
}

2441 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2444 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2445 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2447 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_CKD
);

2449 
TIMx
->
CR1
 |
TIM_CKD
;

2450 
	}
}

2457 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2460 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2462  
TIMx
->
CCR1
;

2463 
	}
}

2470 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2473 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2475  
TIMx
->
CCR2
;

2476 
	}
}

2483 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2486 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2488  
TIMx
->
CCR3
;

2489 
	}
}

2496 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2499 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2501  
TIMx
->
CCR4
;

2502 
	}
}

2509 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2512 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2514  
TIMx
->
CNT
;

2515 
	}
}

2522 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2525 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2527  
TIMx
->
PSC
;

2528 
	}
}

2556 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2558 
ITSètus
 
bô°©us
 = 
RESET
;

2560 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2561 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2563 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2565 
bô°©us
 = 
SET
;

2569 
bô°©us
 = 
RESET
;

2571  
bô°©us
;

2572 
	}
}

2600 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2603 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2604 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

2607 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2608 
	}
}

2632 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2634 
ITSètus
 
bô°©us
 = 
RESET
;

2635 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2637 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2638 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2640 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2642 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2643 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2645 
bô°©us
 = 
SET
;

2649 
bô°©us
 = 
RESET
;

2651  
bô°©us
;

2652 
	}
}

2676 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2679 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2680 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2682 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2683 
	}
}

2701 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2702 
uöt16_t
 
TIM_ICFûãr
)

2704 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2706 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1E
);

2707 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2708 
tmpc˚r
 = 
TIMx
->
CCER
;

2710 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC1F
)));

2711 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2713 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2714 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2717 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
));

2718 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2723 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

2724 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2728 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2729 
TIMx
->
CCER
 = 
tmpc˚r
;

2730 
	}
}

2748 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2749 
uöt16_t
 
TIM_ICFûãr
)

2751 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2753 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2E
);

2754 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2755 
tmpc˚r
 = 
TIMx
->
CCER
;

2756 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2758 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC2S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC2F
)));

2759 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2760 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2762 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2763 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2766 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
));

2767 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

2772 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

2773 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC2E
);

2777 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2778 
TIMx
->
CCER
 = 
tmpc˚r
;

2779 
	}
}

2797 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2798 
uöt16_t
 
TIM_ICFûãr
)

2800 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2802 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3E
);

2803 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2804 
tmpc˚r
 = 
TIMx
->
CCER
;

2805 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2807 
tmpccmr2
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR2_CC3S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC3F
)));

2808 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2810 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2811 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2814 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
));

2815 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

2820 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
));

2821 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC3E
);

2825 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2826 
TIMx
->
CCER
 = 
tmpc˚r
;

2827 
	}
}

2845 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2846 
uöt16_t
 
TIM_ICFûãr
)

2848 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2851 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4E
);

2852 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2853 
tmpc˚r
 = 
TIMx
->
CCER
;

2854 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2856 
tmpccmr2
 &(
uöt16_t
)((uöt16_t)(~(uöt16_t)
TIM_CCMR2_CC4S
Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC4F
)));

2857 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2858 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2860 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2861 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2864 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC4P
));

2865 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

2870 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC4NP
));

2871 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC4E
);

2874 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2875 
TIMx
->
CCER
 = 
tmpc˚r
;

2876 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c

23 
	~"°m32f10x_ußπ.h
"

24 
	~"°m32f10x_rcc.h
"

47 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

48 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

50 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

52 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

53 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

54 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

55 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

56 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

58 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

59 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

61 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

62 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

63 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

65 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

66 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

68 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

69 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

71 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

72 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

74 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

75 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

77 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

78 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

79 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

80 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

81 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

84 
	#CR1_OVER8_Së
 ((
u16
)0x8000Ë

	)

85 
	#CR1_OVER8_Re£t
 ((
u16
)0x7FFFË

	)

88 
	#CR3_ONEBITE_Së
 ((
u16
)0x0800Ë

	)

89 
	#CR3_ONEBITE_Re£t
 ((
u16
)0xF7FFË

	)

130 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

133 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

135 i‡(
USARTx
 =
USART1
)

137 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

138 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

140 i‡(
USARTx
 =
USART2
)

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

145 i‡(
USARTx
 =
USART3
)

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

150 i‡(
USARTx
 =
UART4
)

152 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

157 i‡(
USARTx
 =
UART5
)

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

163 
	}
}

176 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

178 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

179 
uöt32_t
 
öãgîdividî
 = 0x00;

180 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

181 
uöt32_t
 
ußπxba£
 = 0;

182 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

184 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

185 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

186 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

187 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

188 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

189 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

190 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

192 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

194 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

197 
ußπxba£
 = (
uöt32_t
)
USARTx
;

200 
tm¥eg
 = 
USARTx
->
CR2
;

202 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

205 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

208 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

211 
tm¥eg
 = 
USARTx
->
CR1
;

213 
tm¥eg
 &
CR1_CLEAR_Mask
;

218 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

219 
USART_InôSåu˘
->
USART_Mode
;

221 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

224 
tm¥eg
 = 
USARTx
->
CR3
;

226 
tm¥eg
 &
CR3_CLEAR_Mask
;

229 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

231 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

235 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

236 i‡(
ußπxba£
 =
USART1_BASE
)

238 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

242 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

246 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

249 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

254 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

256 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

259 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

262 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

264 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

268 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

272 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

273 
	}
}

281 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

284 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

285 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

286 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

287 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

288 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

289 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

290 
	}
}

302 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

304 
uöt32_t
 
tm¥eg
 = 0x00;

306 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

307 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

308 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

309 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

310 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

313 
tm¥eg
 = 
USARTx
->
CR2
;

315 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

321 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

322 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

324 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

325 
	}
}

333 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

336 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

337 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

338 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

339 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

340 
	}
}

351 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

354 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

355 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

357 i‡(
NewSèã
 !
DISABLE
)

360 
USARTx
->
CR1
 |
CR1_UE_Së
;

365 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

367 
	}
}

388 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

390 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

391 
uöt32_t
 
ußπxba£
 = 0x00;

393 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

394 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

395 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

397 i‡(
USART_IT
 =
USART_IT_CTS
)

399 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

402 
ußπxba£
 = (
uöt32_t
)
USARTx
;

405 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

408 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

409 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

411 i‡(
ußπªg
 == 0x01)

413 
ußπxba£
 += 0x0C;

415 i‡(
ußπªg
 == 0x02)

417 
ußπxba£
 += 0x10;

421 
ußπxba£
 += 0x14;

423 i‡(
NewSèã
 !
DISABLE
)

425 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

429 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

431 
	}
}

448 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

451 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

452 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

454 i‡(
NewSèã
 !
DISABLE
)

458 
USARTx
->
CR3
 |
USART_DMAReq
;

464 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

466 
	}
}

476 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

479 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

480 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

483 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

485 
USARTx
->
CR2
 |
USART_Addªss
;

486 
	}
}

499 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

502 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

503 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

505 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

506 
USARTx
->
CR1
 |
USART_WakeUp
;

507 
	}
}

518 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

521 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

522 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

524 i‡(
NewSèã
 !
DISABLE
)

527 
USARTx
->
CR1
 |
CR1_RWU_Së
;

532 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

534 
	}
}

547 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

550 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

551 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

553 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

554 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

555 
	}
}

566 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

569 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

570 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

572 i‡(
NewSèã
 !
DISABLE
)

575 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

580 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

582 
	}
}

592 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

595 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

596 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

599 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

600 
	}
}

609 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

612 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

615  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

616 
	}
}

625 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

631 
USARTx
->
CR1
 |
CR1_SBK_Së
;

632 
	}
}

641 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

644 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

647 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

649 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

650 
	}
}

661 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

664 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

667 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

669 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

670 
	}
}

680 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

683 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

684 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

685 i‡(
NewSèã
 !
DISABLE
)

688 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

693 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

695 
	}
}

705 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

708 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

709 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

710 i‡(
NewSèã
 !
DISABLE
)

713 
USARTx
->
CR3
 |
CR3_NACK_Së
;

718 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

720 
	}
}

731 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

734 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

735 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

737 i‡(
NewSèã
 !
DISABLE
)

740 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

745 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

747 
	}
}

762 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

765 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

766 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
USARTx
->
CR1
 |
CR1_OVER8_Së
;

776 
USARTx
->
CR1
 &
CR1_OVER8_Re£t
;

778 
	}
}

789 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

792 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

793 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

795 i‡(
NewSèã
 !
DISABLE
)

798 
USARTx
->
CR3
 |
CR3_ONEBITE_Së
;

803 
USARTx
->
CR3
 &
CR3_ONEBITE_Re£t
;

805 
	}
}

818 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

821 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

822 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

824 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

825 
USARTx
->
CR3
 |
USART_IrDAMode
;

826 
	}
}

837 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

840 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

841 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

843 i‡(
NewSèã
 !
DISABLE
)

846 
USARTx
->
CR3
 |
CR3_IREN_Së
;

851 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

853 
	}
}

874 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

876 
FœgSètus
 
bô°©us
 = 
RESET
;

878 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

879 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

881 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

883 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

886 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

888 
bô°©us
 = 
SET
;

892 
bô°©us
 = 
RESET
;

894  
bô°©us
;

895 
	}
}

923 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

926 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

927 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

929 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

931 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

934 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

935 
	}
}

956 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

958 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

959 
ITSètus
 
bô°©us
 = 
RESET
;

961 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

962 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

964 i‡(
USART_IT
 =
USART_IT_CTS
)

966 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

970 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

972 
ômask
 = 
USART_IT
 & 
IT_Mask
;

973 
ômask
 = (
uöt32_t
)0x01 << itmask;

975 i‡(
ußπªg
 == 0x01)

977 
ômask
 &
USARTx
->
CR1
;

979 i‡(
ußπªg
 == 0x02)

981 
ômask
 &
USARTx
->
CR2
;

985 
ômask
 &
USARTx
->
CR3
;

988 
bôpos
 = 
USART_IT
 >> 0x08;

989 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

990 
bôpos
 &
USARTx
->
SR
;

991 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

993 
bô°©us
 = 
SET
;

997 
bô°©us
 = 
RESET
;

1000  
bô°©us
;

1001 
	}
}

1030 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1032 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1034 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1035 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1037 i‡(
USART_IT
 =
USART_IT_CTS
)

1039 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1042 
bôpos
 = 
USART_IT
 >> 0x08;

1043 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1044 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1045 
	}
}

	@libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c

23 
	~"°m32f10x_wwdg.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

51 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

52 
	#EWI_BôNumbî
 0x09

	)

53 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

58 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

61 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

62 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

63 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

102 
	$WWDG_DeInô
()

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

105 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

106 
	}
}

118 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

120 
uöt32_t
 
tm¥eg
 = 0;

122 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

124 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

126 
tm¥eg
 |
WWDG_PªsˇÀr
;

128 
WWDG
->
CFR
 = 
tm¥eg
;

129 
	}
}

137 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

139 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

142 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

145 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

148 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_Mask
;

151 
WWDG
->
CFR
 = 
tm¥eg
;

152 
	}
}

159 
	$WWDG_E«bÀIT
()

161 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

162 
	}
}

170 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

173 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

176 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

177 
	}
}

185 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

188 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

189 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

190 
	}
}

197 
FœgSètus
 
	$WWDG_GëFœgSètus
()

199  (
FœgSètus
)(
WWDG
->
SR
);

200 
	}
}

207 
	$WWDG_CÀ¨Fœg
()

209 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

210 
	}
}

	@src/main.c

10 
	~"°m32f10x.h
"

11 
	~"°m32f10x_rcc.h
"

12 
	~"°m32f10x_gpio.h
"

14 
	$maö
(
¨gc
, *
¨gv
[])

16 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

17 
u32
 
dñay
;

19 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

21 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
;

22 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

23 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

24 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

29 
x
 = 42, 
y
 = 23, 
z
 = 7;

30 
i
 = 0;

31  
i
 = 0; i < 6; i++ )

33 
z
 = (
x
*
y
)/z;

37 
GPIOC
->
BSRR
 = 
GPIO_BSRR_BS12
;

41 
dñay
=500000;

42 
dñay
)

43 
dñay
--;

46 
GPIOC
->
BSRR
 = 
GPIO_BSRR_BR12
;

50 
dñay
=500000;

51 
dñay
)

52 
dñay
--;

54 
	}
}

	@src/newlib_stubs.c

7 
	~<î∫o.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/times.h
>

10 
	~<sys/uni°d.h
>

11 
	~"°m32f10x_ußπ.h
"

14 #i‚de‡
STDOUT_USART


15 
	#STDOUT_USART
 1

	)

18 #i‚de‡
STDERR_USART


19 
	#STDERR_USART
 1

	)

22 #i‚de‡
STDIN_USART


23 
	#STDIN_USART
 1

	)

26 #unde‡
î∫o


27 
î∫o
;

34 *
	g__ív
[1] = { 0 };

35 **
	gívú⁄
 = 
__ív
;

37 
_wrôe
(
fûe
, *
±r
, 
Àn
);

39 
	$_exô
(
°©us
) {

40 
	`_wrôe
(1, "exit", 4);

44 
	}
}

46 
	$_˛o£
(
fûe
) {

48 
	}
}

53 
	$_execve
(*
«me
, **
¨gv
, **
ív
) {

54 
î∫o
 = 
ENOMEM
;

56 
	}
}

62 
	$_f‹k
() {

63 
î∫o
 = 
EAGAIN
;

65 
	}
}

72 
	$_f°©
(
fûe
, 
°©
 *
°
) {

73 
°
->
°_mode
 = 
S_IFCHR
;

75 
	}
}

82 
	$_gëpid
() {

84 
	}
}

90 
	$_ißây
(
fûe
) {

91 
fûe
){

92 
STDOUT_FILENO
:

93 
STDERR_FILENO
:

94 
STDIN_FILENO
:

98 
î∫o
 = 
EBADF
;

101 
	}
}

108 
	$_kûl
(
pid
, 
sig
) {

109 
î∫o
 = 
EINVAL
;

111 
	}
}

118 
	$_lök
(*
ﬁd
, *
√w
) {

119 
î∫o
 = 
EMLINK
;

121 
	}
}

127 
	$_l£ek
(
fûe
, 
±r
, 
dú
) {

129 
	}
}

136 
ˇddr_t
 
	$_sbrk
(
ö¸
) {

138 
_ebss
;

139 *
hóp_íd
;

140 *
¥ev_hóp_íd
;

142 i‡(
hóp_íd
 == 0) {

143 
hóp_íd
 = &
_ebss
;

145 
¥ev_hóp_íd
 = 
hóp_íd
;

147 * 
°ack
 = (*Ë
	`__gë_MSP
();

148 i‡(
hóp_íd
 + 
ö¸
 > 
°ack
)

150 
	`_wrôe
 (
STDERR_FILENO
, "Heapánd stack collision\n", 25);

151 
î∫o
 = 
ENOMEM
;

152  (
ˇddr_t
) -1;

156 
hóp_íd
 +
ö¸
;

157  (
ˇddr_t
Ë
¥ev_hóp_íd
;

159 
	}
}

168 
	$_ªad
(
fûe
, *
±r
, 
Àn
) {

169 
n
;

170 
num
 = 0;

171 
fûe
) {

172 
STDIN_FILENO
:

173 
n
 = 0;Ç < 
Àn
;Ç++) {

174 #i‡ 
STDIN_USART
 == 1

175 (
USART1
->
SR
 & 
USART_FLAG_RXNE
Ë=(
uöt16_t
)
RESET
) {}

176 
c
 = ()(
USART1
->
DR
 & (
uöt16_t
)0x01FF);

177 #ñi‡
STDIN_USART
 == 2

178 (
USART2
->
SR
 & 
USART_FLAG_RXNE
Ë=(
uöt16_t
Ë
RESET
) {}

179 
c
 = (Ë(
USART2
->
DR
 & (
uöt16_t
) 0x01FF);

180 #ñi‡
STDIN_USART
 == 3

181 (
USART3
->
SR
 & 
USART_FLAG_RXNE
Ë=(
uöt16_t
)
RESET
) {}

182 
c
 = ()(
USART3
->
DR
 & (
uöt16_t
)0x01FF);

184 *
±r
++ = 
c
;

185 
num
++;

189 
î∫o
 = 
EBADF
;

192  
num
;

193 
	}
}

201 
	$_°©
(c⁄° *
fûï©h
, 
°©
 *
°
) {

202 
°
->
°_mode
 = 
S_IFCHR
;

204 
	}
}

211 
˛ock_t
 
	$_times
(
tms
 *
buf
) {

213 
	}
}

219 
	$_u∆ök
(*
«me
) {

220 
î∫o
 = 
ENOENT
;

222 
	}
}

228 
	$_waô
(*
°©us
) {

229 
î∫o
 = 
ECHILD
;

231 
	}
}

238 
	$_wrôe
(
fûe
, *
±r
, 
Àn
) {

239 
n
;

240 
fûe
) {

241 
STDOUT_FILENO
:

242 
n
 = 0;Ç < 
Àn
;Ç++) {

243 #i‡
STDOUT_USART
 == 1

244 (
USART1
->
SR
 & 
USART_FLAG_TC
Ë=(
uöt16_t
)
RESET
) {}

245 
USART1
->
DR
 = (*
±r
++ & (
uöt16_t
)0x01FF);

246 #ñi‡ 
STDOUT_USART
 == 2

247 (
USART2
->
SR
 & 
USART_FLAG_TC
Ë=(
uöt16_t
Ë
RESET
) {

249 
USART2
->
DR
 = (*
±r
++ & (
uöt16_t
) 0x01FF);

250 #ñi‡ 
STDOUT_USART
 == 3

251 (
USART3
->
SR
 & 
USART_FLAG_TC
Ë=(
uöt16_t
)
RESET
) {}

252 
USART3
->
DR
 = (*
±r
++ & (
uöt16_t
)0x01FF);

256 
STDERR_FILENO
:

257 
n
 = 0;Ç < 
Àn
;Ç++) {

258 #i‡
STDERR_USART
 == 1

259 (
USART1
->
SR
 & 
USART_FLAG_TC
Ë=(
uöt16_t
)
RESET
) {}

260 
USART1
->
DR
 = (*
±r
++ & (
uöt16_t
)0x01FF);

261 #ñi‡ 
STDERR_USART
 == 2

262 (
USART2
->
SR
 & 
USART_FLAG_TC
Ë=(
uöt16_t
Ë
RESET
) {

264 
USART2
->
DR
 = (*
±r
++ & (
uöt16_t
) 0x01FF);

265 #ñi‡ 
STDERR_USART
 == 3

266 (
USART3
->
SR
 & 
USART_FLAG_TC
Ë=(
uöt16_t
)
RESET
) {}

267 
USART3
->
DR
 = (*
±r
++ & (
uöt16_t
)0x01FF);

272 
î∫o
 = 
EBADF
;

275  
Àn
;

276 
	}
}

	@src/startup.c

1 
	~"°m32f10x.h
"

2 –*c⁄° 
	tötfunc
 )( );

3 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

5 
_ëext
;

6 
_sid©a
;

7 
_sd©a
;

8 
_ed©a
;

9 
_sbss
;

10 
_ebss
;

11 
_e°ack
;

13 
	$Re£t_H™dÀr
(Ë
	`__©åibuã__
((
__öãºu±__
));

14 
	`__Inô_D©a
();

15 
	`DeÁu…_H™dÀr
();

17 
	`maö
();

19 
WEAK
 
	`NMI_H™dÀr
();

20 
WEAK
 
	`H¨dFau…_H™dÀr
();

21 
WEAK
 
	`MemM™age_H™dÀr
();

22 
WEAK
 
	`BusFau…_H™dÀr
();

23 
WEAK
 
	`UßgeFau…_H™dÀr
();

24 
WEAK
 
	`MemM™age_H™dÀr
();

25 
WEAK
 
	`SVC_H™dÀr
();

26 
WEAK
 
	`DebugM⁄_H™dÀr
();

27 
WEAK
 
	`PídSV_H™dÀr
();

28 
WEAK
 
	`SysTick_H™dÀr
();

30 
WEAK
 
	`WWDG_IRQH™dÀr
();

31 
WEAK
 
	`PVD_IRQH™dÀr
();

32 
WEAK
 
	`TAMPER_IRQH™dÀr
();

33 
WEAK
 
	`RTC_IRQH™dÀr
();

34 
WEAK
 
	`FLASH_IRQH™dÀr
();

35 
WEAK
 
	`RCC_IRQH™dÀr
();

36 
WEAK
 
	`EXTI0_IRQH™dÀr
();

37 
WEAK
 
	`EXTI1_IRQH™dÀr
();

38 
WEAK
 
	`EXTI2_IRQH™dÀr
();

39 
WEAK
 
	`EXTI3_IRQH™dÀr
();

40 
WEAK
 
	`EXTI4_IRQH™dÀr
();

41 
WEAK
 
	`DMA1_Ch™√l1_IRQH™dÀr
();

42 
WEAK
 
	`DMA1_Ch™√l2_IRQH™dÀr
();

43 
WEAK
 
	`DMA1_Ch™√l3_IRQH™dÀr
();

44 
WEAK
 
	`DMA1_Ch™√l4_IRQH™dÀr
();

45 
WEAK
 
	`DMA1_Ch™√l5_IRQH™dÀr
();

46 
WEAK
 
	`DMA1_Ch™√l6_IRQH™dÀr
();

47 
WEAK
 
	`DMA1_Ch™√l7_IRQH™dÀr
();

48 
WEAK
 
	`ADC1_2_IRQH™dÀr
();

49 
WEAK
 
	`USB_HP_CAN1_TX_IRQH™dÀr
();

50 
WEAK
 
	`USB_LP_CAN1_RX0_IRQH™dÀr
();

51 
WEAK
 
	`CAN1_RX1_IRQH™dÀr
();

52 
WEAK
 
	`CAN1_SCE_IRQH™dÀr
();

53 
WEAK
 
	`EXTI9_5_IRQH™dÀr
();

54 
WEAK
 
	`TIM1_BRK_IRQH™dÀr
();

55 
WEAK
 
	`TIM1_UP_IRQH™dÀr
();

56 
WEAK
 
	`TIM1_TRG_COM_IRQH™dÀr
();

57 
WEAK
 
	`TIM1_CC_IRQH™dÀr
();

58 
WEAK
 
	`TIM2_IRQH™dÀr
();

59 
WEAK
 
	`TIM3_IRQH™dÀr
();

60 
WEAK
 
	`TIM4_IRQH™dÀr
();

61 
WEAK
 
	`I2C1_EV_IRQH™dÀr
();

62 
WEAK
 
	`I2C1_ER_IRQH™dÀr
();

63 
WEAK
 
	`I2C2_EV_IRQH™dÀr
();

64 
WEAK
 
	`I2C2_ER_IRQH™dÀr
();

65 
WEAK
 
	`SPI1_IRQH™dÀr
();

66 
WEAK
 
	`SPI2_IRQH™dÀr
();

67 
WEAK
 
	`USART1_IRQH™dÀr
();

68 
WEAK
 
	`USART2_IRQH™dÀr
();

69 
WEAK
 
	`USART3_IRQH™dÀr
();

70 
WEAK
 
	`EXTI15_10_IRQH™dÀr
();

71 
WEAK
 
	`RTCAœrm_IRQH™dÀr
();

72 
WEAK
 
	`USBWakeUp_IRQH™dÀr
();

73 
WEAK
 
	`TIM8_BRK_IRQH™dÀr
();

74 
WEAK
 
	`TIM8_UP_IRQH™dÀr
();

75 
WEAK
 
	`TIM8_TRG_COM_IRQH™dÀr
();

76 
WEAK
 
	`TIM8_CC_IRQH™dÀr
();

77 
WEAK
 
	`ADC3_IRQH™dÀr
();

78 
WEAK
 
	`FSMC_IRQH™dÀr
();

79 
WEAK
 
	`SDIO_IRQH™dÀr
();

80 
WEAK
 
	`TIM5_IRQH™dÀr
();

81 
WEAK
 
	`SPI3_IRQH™dÀr
();

82 
WEAK
 
	`UART4_IRQH™dÀr
();

83 
WEAK
 
	`UART5_IRQH™dÀr
();

84 
WEAK
 
	`TIM6_IRQH™dÀr
();

85 
WEAK
 
	`TIM7_IRQH™dÀr
();

86 
WEAK
 
	`DMA2_Ch™√l1_IRQH™dÀr
();

87 
WEAK
 
	`DMA2_Ch™√l2_IRQH™dÀr
();

88 
WEAK
 
	`DMA2_Ch™√l3_IRQH™dÀr
();

89 
WEAK
 
	`DMA2_Ch™√l4_5_IRQH™dÀr
();

91 
	`__©åibuã__
 ((
	`£˘i⁄
(".isr_vectors")))

92 (* c⁄° 
g_p‚Ve˘‹s
[])() = {

93 (
ötfunc
)(()&
_e°ack
),

94 
Re£t_H™dÀr
,

95 
NMI_H™dÀr
,

96 
H¨dFau…_H™dÀr
,

97 
MemM™age_H™dÀr
,

98 
BusFau…_H™dÀr
,

99 
UßgeFau…_H™dÀr
,

104 
SVC_H™dÀr
,

105 
DebugM⁄_H™dÀr
,

107 
PídSV_H™dÀr
,

108 
SysTick_H™dÀr
,

111 
WWDG_IRQH™dÀr
,

112 
PVD_IRQH™dÀr
,

113 
TAMPER_IRQH™dÀr
,

114 
RTC_IRQH™dÀr
,

115 
FLASH_IRQH™dÀr
,

116 
RCC_IRQH™dÀr
,

117 
EXTI0_IRQH™dÀr
,

118 
EXTI1_IRQH™dÀr
,

119 
EXTI2_IRQH™dÀr
,

120 
EXTI3_IRQH™dÀr
,

121 
EXTI4_IRQH™dÀr
,

122 
DMA1_Ch™√l1_IRQH™dÀr
,

123 
DMA1_Ch™√l2_IRQH™dÀr
,

124 
DMA1_Ch™√l3_IRQH™dÀr
,

125 
DMA1_Ch™√l4_IRQH™dÀr
,

126 
DMA1_Ch™√l5_IRQH™dÀr
,

127 
DMA1_Ch™√l6_IRQH™dÀr
,

128 
DMA1_Ch™√l7_IRQH™dÀr
,

129 
ADC1_2_IRQH™dÀr
,

130 
USB_HP_CAN1_TX_IRQH™dÀr
,

131 
USB_LP_CAN1_RX0_IRQH™dÀr
,

132 
CAN1_RX1_IRQH™dÀr
,

133 
CAN1_SCE_IRQH™dÀr
,

134 
EXTI9_5_IRQH™dÀr
,

135 
TIM1_BRK_IRQH™dÀr
,

136 
TIM1_UP_IRQH™dÀr
,

137 
TIM1_TRG_COM_IRQH™dÀr
,

138 
TIM1_CC_IRQH™dÀr
,

139 
TIM2_IRQH™dÀr
,

140 
TIM3_IRQH™dÀr
,

141 
TIM4_IRQH™dÀr
,

142 
I2C1_EV_IRQH™dÀr
,

143 
I2C1_ER_IRQH™dÀr
,

144 
I2C2_EV_IRQH™dÀr
,

145 
I2C2_ER_IRQH™dÀr
,

146 
SPI1_IRQH™dÀr
,

147 
SPI2_IRQH™dÀr
,

148 
USART1_IRQH™dÀr
,

149 
USART2_IRQH™dÀr
,

150 
USART3_IRQH™dÀr
,

151 
EXTI15_10_IRQH™dÀr
,

152 
RTCAœrm_IRQH™dÀr
,

153 
USBWakeUp_IRQH™dÀr
,

154 
TIM8_BRK_IRQH™dÀr
,

155 
TIM8_UP_IRQH™dÀr
,

156 
TIM8_TRG_COM_IRQH™dÀr
,

157 
TIM8_CC_IRQH™dÀr
,

158 
ADC3_IRQH™dÀr
,

159 
FSMC_IRQH™dÀr
,

160 
SDIO_IRQH™dÀr
,

161 
TIM5_IRQH™dÀr
,

162 
SPI3_IRQH™dÀr
,

163 
UART4_IRQH™dÀr
,

164 
UART5_IRQH™dÀr
,

165 
TIM6_IRQH™dÀr
,

166 
TIM7_IRQH™dÀr
,

167 
DMA2_Ch™√l1_IRQH™dÀr
,

168 
DMA2_Ch™√l2_IRQH™dÀr
,

169 
DMA2_Ch™√l3_IRQH™dÀr
,

170 
DMA2_Ch™√l4_5_IRQH™dÀr
,

180 (
ötfunc
)0xF1E0F85F

181 
	}
};

183 
	$__Inô_D©a
() {

184 *
§c
, *
d°
;

186 
§c
 = &
_sid©a
;

188 
d°
 = &
_sd©a
;

189 i‡(
§c
 !
d°
)

190 
d°
 < &
_ed©a
)

191 *(
d°
++Ë*(
§c
++);

193 
d°
 = &
_sbss
;

194 
d°
 < &
_ebss
)

195 *(
d°
++) = 0;

196 
	}
}

198 
	$Re£t_H™dÀr
() {

199 
	`__Inô_D©a
();

200 
u32
 
_i§_ve˘‹s_offs
;

201 
SCB
->
VTOR
 = 0x08000000 | ((
u32
)&
_i§_ve˘‹s_offs
 & (u32)0x1FFFFF80);

202 
	`Sy°emInô
();

203 
	`maö
();

205 
	}
}

207 #¥agm®
wók
 
MMI_H™dÀr

DeÁu…_H™dÀr


208 #¥agm®
wók
 
MemM™age_H™dÀr

DeÁu…_H™dÀr


209 #¥agm®
wók
 
BusFau…_H™dÀr

DeÁu…_H™dÀr


210 #¥agm®
wók
 
UßgeFau…_H™dÀr

DeÁu…_H™dÀr


211 #¥agm®
wók
 
SVC_H™dÀr

DeÁu…_H™dÀr


212 #¥agm®
wók
 
DebugM⁄_H™dÀr

DeÁu…_H™dÀr


213 #¥agm®
wók
 
PídSV_H™dÀr

DeÁu…_H™dÀr


214 #¥agm®
wók
 
SysTick_H™dÀr

DeÁu…_H™dÀr


215 #¥agm®
wók
 
WWDG_IRQH™dÀr

DeÁu…_H™dÀr


216 #¥agm®
wók
 
PVD_IRQH™dÀr

DeÁu…_H™dÀr


217 #¥agm®
wók
 
TAMPER_IRQH™dÀr

DeÁu…_H™dÀr


218 #¥agm®
wók
 
RTC_IRQH™dÀr

DeÁu…_H™dÀr


219 #¥agm®
wók
 
FLASH_IRQH™dÀr

DeÁu…_H™dÀr


220 #¥agm®
wók
 
RCC_IRQH™dÀr

DeÁu…_H™dÀr


221 #¥agm®
wók
 
EXTI0_IRQH™dÀr

DeÁu…_H™dÀr


222 #¥agm®
wók
 
EXTI1_IRQH™dÀr

DeÁu…_H™dÀr


223 #¥agm®
wók
 
EXTI2_IRQH™dÀr

DeÁu…_H™dÀr


224 #¥agm®
wók
 
EXTI3_IRQH™dÀr

DeÁu…_H™dÀr


225 #¥agm®
wók
 
EXTI4_IRQH™dÀr

DeÁu…_H™dÀr


226 #¥agm®
wók
 
DMA1_Ch™√l1_IRQH™dÀr

DeÁu…_H™dÀr


227 #¥agm®
wók
 
DMA1_Ch™√l2_IRQH™dÀr

DeÁu…_H™dÀr


228 #¥agm®
wók
 
DMA1_Ch™√l3_IRQH™dÀr
 = 
DeÁu…_H™dÀr


229 #¥agm®
wók
 
DMA1_Ch™√l4_IRQH™dÀr
 = 
DeÁu…_H™dÀr


230 #¥agm®
wók
 
DMA1_Ch™√l5_IRQH™dÀr
 = 
DeÁu…_H™dÀr


231 #¥agm®
wók
 
DMA1_Ch™√l6_IRQH™dÀr
 = 
DeÁu…_H™dÀr


232 #¥agm®
wók
 
DMA1_Ch™√l7_IRQH™dÀr
 = 
DeÁu…_H™dÀr


233 #¥agm®
wók
 
ADC1_2_IRQH™dÀr
 = 
DeÁu…_H™dÀr


234 #¥agm®
wók
 
USB_HP_CAN1_TX_IRH™dÀr
 = 
DeÁu…_H™dÀr


235 #¥agm®
wók
 
USB_LP_CAN1_RX0_IRQH™dÀr
 = 
DeÁu…_H™dÀr


236 #¥agm®
wók
 
CAN1_RX1_IRQH™dî
 = 
DeÁu…_H™dÀr


237 #¥agm®
wók
 
CAN1_SCE_IRQH™dÀr
 = 
DeÁu…_H™dÀr


238 #¥agm®
wók
 
EXTI9_5_IRQH™dÀr
 = 
DeÁu…_H™dÀr


239 #¥agm®
wók
 
TIM1_BRK_IRQH™dÀr
 = 
DeÁu…_H™dÀr


240 #¥agm®
wók
 
TIM1_UP_IRQH™dÀr
 = 
DeÁu…_H™dÀr


241 #¥agm®
wók
 
TIM1_TRG_COM_IRQH™dÀr
 = 
DeÁu…_H™dÀr


242 #¥agm®
wók
 
TIM1_CC_IRQH™dÀr
 = 
DeÁu…_H™dÀr


243 #¥agm®
wók
 
TIM2_IRQH™dÀr
 = 
DeÁu…_H™dÀr


244 #¥agm®
wók
 
TIM3_IRQH™dÀr
 = 
DeÁu…_H™dÀr


245 #¥agm®
wók
 
TIM4_IRQH™dÀr
 = 
DeÁu…_H™dÀr


246 #¥agm®
wók
 
I2C1_EV_IRQH™dÀr
 = 
DeÁu…_H™dÀr


247 #¥agm®
wók
 
I2C1_ER_IRQH™dÀr
 = 
DeÁu…_H™dÀr


248 #¥agm®
wók
 
I2C2_EV_IRQH™dÀr
 = 
DeÁu…_H™dÀr


249 #¥agm®
wók
 
I2C2_ER_IRQH™dÀr
 = 
DeÁu…_H™dÀr


250 #¥agm®
wók
 
SPI1_IRQH™dÀr
 = 
DeÁu…_H™dÀr


251 #¥agm®
wók
 
SPI2_IRQH™dÀr
 = 
DeÁu…_H™dÀr


252 #¥agm®
wók
 
USART1_IRQH™dÀr
 = 
DeÁu…_H™dÀr


253 #¥agm®
wók
 
USART2_IRQH™dÀr
 = 
DeÁu…_H™dÀr


254 #¥agm®
wók
 
USART3_IRQH™dÀr
 = 
DeÁu…_H™dÀr


255 #¥agm®
wók
 
EXTI15_10_IRQH™dÀr
 = 
DeÁu…_H™dÀr


256 #¥agm®
wók
 
RTCAœrm_IRQH™dÀr
 = 
DeÁu…_H™dÀr


257 #¥agm®
wók
 
USBWakeUp_IRQH™dÀr
 = 
DeÁu…_H™dÀr


258 #¥agm®
wók
 
TIM8_BRK_IRQH™dÀr
 = 
DeÁu…_H™dÀr


259 #¥agm®
wók
 
TIM8_UP_IRQH™dÀr
 = 
DeÁu…_H™dÀr


260 #¥agm®
wók
 
TIM8_TRG_COM_IRQH™dÀr
 = 
DeÁu…_H™dÀr


261 #¥agm®
wók
 
TIM8_CC_IRQH™dÀr
 = 
DeÁu…_H™dÀr


262 #¥agm®
wók
 
ADC3_IRQH™dÀr
 = 
DeÁu…_H™dÀr


263 #¥agm®
wók
 
FSMC_IRQH™dÀr
 = 
DeÁu…_H™dÀr


264 #¥agm®
wók
 
SDIO_IRQH™dÀr
 = 
DeÁu…_H™dÀr


265 #¥agm®
wók
 
TIM5_IRQH™dÀr
 = 
DeÁu…_H™dÀr


266 #¥agm®
wók
 
SPI3_IRQH™dÀr
 = 
DeÁu…_H™dÀr


267 #¥agm®
wók
 
UART4_IRQH™dÀr
 = 
DeÁu…_H™dÀr


268 #¥agm®
wók
 
UART5_IRQH™dÀr
 = 
DeÁu…_H™dÀr


269 #¥agm®
wók
 
TIM6_IRQH™dÀr
 = 
DeÁu…_H™dÀr


270 #¥agm®
wók
 
TIM7_IRQH™dÀr
 = 
DeÁu…_H™dÀr


271 #¥agm®
wók
 
DMA2_Ch™√l1_IRQH™dÀr
 = 
DeÁu…_H™dÀr


272 #¥agm®
wók
 
DMA2_Ch™√l2_IRQH™dÀr
 = 
DeÁu…_H™dÀr


273 #¥agm®
wók
 
DMA2_Ch™√l3_IRQH™dÀr
 = 
DeÁu…_H™dÀr


274 #¥agm®
wók
 
DMA2_Ch™√l4_5_IRQH™dÀr
 = 
DeÁu…_H™dÀr


276 
	$DeÁu…_H™dÀr
() {

278 
	}
}

	@src/stm32f10x_delay.c

1 
	~"°m32f10x.h
"

3 
vu32
 
	gTimeDñay
;

4 
	$SysTick_C⁄figuøti⁄
()

6 i‡(
	`SysTick_C⁄fig
(
Sy°emC‹eClock
/1000))

10 
	}
}

11 
	$Dñay
(
u32
 
nms
)

13 
TimeDñay
=
nms
;

14 
TimeDñay
);

15 
	}
}

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

146 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


148 #i‡
__WORDSIZE
 == 64

149 
	#__INT64_C
(
c
Ë¯## 
L


	)

150 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

152 
	#__INT64_C
(
c
Ë¯## 
LL


	)

153 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

159 
	#INT8_MIN
 (-128)

	)

160 
	#INT16_MIN
 (-32767-1)

	)

161 
	#INT32_MIN
 (-2147483647-1)

	)

162 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

164 
	#INT8_MAX
 (127)

	)

165 
	#INT16_MAX
 (32767)

	)

166 
	#INT32_MAX
 (2147483647)

	)

167 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

170 
	#UINT8_MAX
 (255)

	)

171 
	#UINT16_MAX
 (65535)

	)

172 
	#UINT32_MAX
 (4294967295U)

	)

173 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

177 
	#INT_LEAST8_MIN
 (-128)

	)

178 
	#INT_LEAST16_MIN
 (-32767-1)

	)

179 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

180 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

182 
	#INT_LEAST8_MAX
 (127)

	)

183 
	#INT_LEAST16_MAX
 (32767)

	)

184 
	#INT_LEAST32_MAX
 (2147483647)

	)

185 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

188 
	#UINT_LEAST8_MAX
 (255)

	)

189 
	#UINT_LEAST16_MAX
 (65535)

	)

190 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

191 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 
	#INT_FAST8_MIN
 (-128)

	)

196 #i‡
__WORDSIZE
 == 64

197 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

198 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

200 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

201 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

203 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

205 
	#INT_FAST8_MAX
 (127)

	)

206 #i‡
__WORDSIZE
 == 64

207 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

208 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

210 
	#INT_FAST16_MAX
 (2147483647)

	)

211 
	#INT_FAST32_MAX
 (2147483647)

	)

213 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

216 
	#UINT_FAST8_MAX
 (255)

	)

217 #i‡
__WORDSIZE
 == 64

218 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

219 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

221 
	#UINT_FAST16_MAX
 (4294967295U)

	)

222 
	#UINT_FAST32_MAX
 (4294967295U)

	)

224 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

228 #i‡
__WORDSIZE
 == 64

229 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

230 
	#INTPTR_MAX
 (9223372036854775807L)

	)

231 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

233 
	#INTPTR_MIN
 (-2147483647-1)

	)

234 
	#INTPTR_MAX
 (2147483647)

	)

235 
	#UINTPTR_MAX
 (4294967295U)

	)

240 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

242 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

245 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

251 #i‡
__WORDSIZE
 == 64

252 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

253 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

255 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

256 
	#PTRDIFF_MAX
 (2147483647)

	)

260 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

261 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

264 #i‡
__WORDSIZE
 == 64

265 
	#SIZE_MAX
 (18446744073709551615UL)

	)

267 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

286 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


289 
	#INT8_C
(
c
Ë
	)
c

290 
	#INT16_C
(
c
Ë
	)
c

291 
	#INT32_C
(
c
Ë
	)
c

292 #i‡
__WORDSIZE
 == 64

293 
	#INT64_C
(
c
Ë¯## 
L


	)

295 
	#INT64_C
(
c
Ë¯## 
LL


	)

299 
	#UINT8_C
(
c
Ë
	)
c

300 
	#UINT16_C
(
c
Ë
	)
c

301 
	#UINT32_C
(
c
Ë¯## 
U


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#UINT64_C
(
c
Ë¯## 
UL


	)

305 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

309 #i‡
__WORDSIZE
 == 64

310 
	#INTMAX_C
(
c
Ë¯## 
L


	)

311 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

313 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

314 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

31 || 
deföed
 
	g__USE_ATFILE


32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

35 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


36 
	#__√ed_time•ec


	)

38 
	~<time.h
>

41 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


44 #i‚de‡
__dev_t_deföed


45 
__dev_t
 
	tdev_t
;

46 
	#__dev_t_deföed


	)

49 #i‚de‡
__gid_t_deföed


50 
__gid_t
 
	tgid_t
;

51 
	#__gid_t_deföed


	)

54 #i‚de‡
__öo_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__öo_t
 
	töo_t
;

58 
__öo64_t
 
	töo_t
;

60 
	#__öo_t_deföed


	)

63 #i‚de‡
__mode_t_deföed


64 
__mode_t
 
	tmode_t
;

65 
	#__mode_t_deföed


	)

68 #i‚de‡
__∆ök_t_deföed


69 
__∆ök_t
 
	t∆ök_t
;

70 
	#__∆ök_t_deföed


	)

73 #i‚de‡
__off_t_deföed


74 #i‚de‡
__USE_FILE_OFFSET64


75 
__off_t
 
	toff_t
;

77 
__off64_t
 
	toff_t
;

79 
	#__off_t_deföed


	)

82 #i‚de‡
__uid_t_deföed


83 
__uid_t
 
	tuid_t
;

84 
	#__uid_t_deföed


	)

88 #ifde‡
__USE_UNIX98


89 #i‚de‡
__blk˙t_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__blk˙t_t
 
	tblk˙t_t
;

93 
__blk˙t64_t
 
	tblk˙t_t
;

95 
	#__blk˙t_t_deföed


	)

98 #i‚de‡
__blksize_t_deföed


99 
__blksize_t
 
	tblksize_t
;

100 
	#__blksize_t_deföed


	)

104 
	g__BEGIN_DECLS


106 
	~<bôs/°©.h
>

108 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


109 
	#S_IFMT
 
__S_IFMT


	)

110 
	#S_IFDIR
 
__S_IFDIR


	)

111 
	#S_IFCHR
 
__S_IFCHR


	)

112 
	#S_IFBLK
 
__S_IFBLK


	)

113 
	#S_IFREG
 
__S_IFREG


	)

114 #ifde‡
__S_IFIFO


115 
	#S_IFIFO
 
__S_IFIFO


	)

117 #ifde‡
__S_IFLNK


118 
	#S_IFLNK
 
__S_IFLNK


	)

120 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

121 && 
deföed
 
	g__S_IFSOCK


122 
	#S_IFSOCK
 
__S_IFSOCK


	)

128 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

130 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

131 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

132 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

133 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

134 #ifde‡
__S_IFIFO


135 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

137 #ifde‡
__S_IFLNK


138 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

141 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


142 
	#S_ISLNK
(
mode
Ë0

	)

145 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

146 && 
deföed
 
	g__S_IFSOCK


147 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

148 #ñi‡
deföed
 
__USE_XOPEN2K


149 
	#S_ISSOCK
(
mode
Ë0

	)

156 #ifdef 
__USE_POSIX199309


157 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

158 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

159 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

165 
	#S_ISUID
 
__S_ISUID


	)

166 
	#S_ISGID
 
__S_ISGID


	)

168 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


170 
	#S_ISVTX
 
__S_ISVTX


	)

173 
	#S_IRUSR
 
__S_IREAD


	)

174 
	#S_IWUSR
 
__S_IWRITE


	)

175 
	#S_IXUSR
 
__S_IEXEC


	)

177 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

179 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


180 
	#S_IREAD
 
S_IRUSR


	)

181 
	#S_IWRITE
 
S_IWUSR


	)

182 
	#S_IEXEC
 
S_IXUSR


	)

185 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

186 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

187 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

189 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

191 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

192 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

193 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

195 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

198 #ifdef 
__USE_BSD


200 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

201 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

202 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

204 
	#S_BLKSIZE
 512

	)

208 #i‚de‡
__USE_FILE_OFFSET64


210 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

211 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

215 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

217 #ifde‡
__REDIRECT_NTH


218 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

219 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

220 
	`__n⁄nuŒ
 ((1, 2));

221 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

222 
	`__n⁄nuŒ
 ((2));

224 
	#°©
 
°©64


	)

225 
	#f°©
 
f°©64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

230 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

231 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

234 #ifde‡
__USE_ATFILE


238 #i‚de‡
__USE_FILE_OFFSET64


239 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

243 #ifde‡
__REDIRECT_NTH


244 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

245 
°©
 *
__ª°ri˘
 
__buf
,

246 
__Êag
),

247 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

249 
	#f°©©
 
f°©©64


	)

253 #ifde‡
__USE_LARGEFILE64


254 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

255 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

256 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

260 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


261 #i‚de‡
__USE_FILE_OFFSET64


264 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

267 #ifde‡
__REDIRECT_NTH


268 
	`__REDIRECT_NTH
 (
l°©
,

269 (c⁄° *
__ª°ri˘
 
__fûe
,

270 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 
	#l°©
 
l°©64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

278 
°©64
 *
__ª°ri˘
 
__buf
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

285 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1));

288 #ifde‡
__USE_BSD


292 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


298 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

301 #ifde‡
__USE_ATFILE


304 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

305 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

315 #ifdef 
__USE_GNU


318 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

322 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

325 #ifde‡
__USE_ATFILE


329 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

330 
__THROW
 
	`__n⁄nuŒ
 ((2));

336 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


337 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 #ifde‡
__USE_ATFILE


344 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

345 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

351 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 #ifde‡
__USE_ATFILE


358 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2));

362 #ifde‡
__USE_ATFILE


365 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

366 c⁄° 
time•ec
 
__times
[2],

367 
__Êags
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2));

371 #ifde‡
__USE_XOPEN2K8


373 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

391 #i‚de‡
_STAT_VER


392 
	#_STAT_VER
 0

	)

394 #i‚de‡
_MKNOD_VER


395 
	#_MKNOD_VER
 0

	)

399 #i‚de‡
__USE_FILE_OFFSET64


400 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

401 
__THROW
 
	`__n⁄nuŒ
 ((3));

402 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

406 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

407 
°©
 *
__°©_buf
, 
__Êag
)

408 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

410 #ifde‡
__REDIRECT_NTH


411 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

412 
°©
 *
__°©_buf
), 
__fx°©64
)

413 
	`__n⁄nuŒ
 ((3));

414 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__x°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

418 
°©
 *
__°©_buf
), 
__lx°©64
)

419 
	`__n⁄nuŒ
 ((2, 3));

420 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

421 c⁄° *
__fûíame
,

422 
°©
 *
__°©_buf
, 
__Êag
),

423 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

426 
	#__fx°©
 
__fx°©64


	)

427 
	#__x°©
 
__x°©64


	)

428 
	#__lx°©
 
__lx°©64


	)

432 #ifde‡
__USE_LARGEFILE64


433 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

434 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

439 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

440 
°©64
 *
__°©_buf
, 
__Êag
)

441 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

443 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

444 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

447 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

450 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


453 
__exã∫_ölöe
 

454 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

456  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

457 
	}
}

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


460 
__exã∫_ölöe
 

461 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

463  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

464 
	}
}

467 
__exã∫_ölöe
 

468 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

470  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

471 
	}
}

473 #ifde‡
__USE_ATFILE


474 
__exã∫_ölöe
 

475 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

476 
__Êag
))

478  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

479 
	}
}

482 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


483 
__exã∫_ölöe
 

484 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

486  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

487 
	}
}

490 #ifde‡
__USE_ATFILE


491 
__exã∫_ölöe
 

492 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

493 
__dev_t
 
__dev
))

495  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

496 
	}
}

499 #i‡
deföed
 
__USE_LARGEFILE64
 \

500 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

501 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

502 
__exã∫_ölöe
 

503 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

505  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

506 
	}
}

508 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


509 
__exã∫_ölöe
 

510 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

512  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

513 
	}
}

516 
__exã∫_ölöe
 

517 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

519  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

520 
	}
}

522 #ifde‡
__USE_ATFILE


523 
__exã∫_ölöe
 

524 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

525 
__Êag
))

527  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

528 
	}
}

535 
	g__END_DECLS


	@/usr/include/sys/times.h

22 #i‚def 
_SYS_TIMES_H


23 
	#_SYS_TIMES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_˛ock_t


	)

28 
	~<time.h
>

31 
__BEGIN_DECLS


34 
	stms


36 
˛ock_t
 
	mtms_utime
;

37 
˛ock_t
 
	mtms_°ime
;

39 
˛ock_t
 
	mtms_cutime
;

40 
˛ock_t
 
	mtms_c°ime
;

48 
˛ock_t
 
	$times
 (
tms
 *
__buf„r
Ë
__THROW
;

50 
__END_DECLS


	@/usr/include/sys/unistd.h

1 
	~<uni°d.h
>

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

154 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

157 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

160 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

163 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

168 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

169 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

172 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

173 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

176 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

177 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

185 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

187 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

191 
__off64_t
 
	t__loff_t
;

192 
__quad_t
 *
	t__qaddr_t
;

193 *
	t__ˇddr_t
;

196 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

199 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

202 #unde‡
__STD_TYPE


	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 16

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 
	#_XBS5_ILP32_OFF32
 1

	)

74 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__SWBLK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

77 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

143 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

145 #i‡
__GNUC_PREREQ
 (4,3)

146 
	#__w¨nde˛
(
«me
, 
msg
) \

147 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

148 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

149 
	#__îr‹de˛
(
«me
, 
msg
) \

150 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

152 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

153 
	#__w¨«âr
(
msg
)

	)

154 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

158 #i‡
__GNUC_PREREQ
 (2,97)

160 
	#__Êex¨r
 []

	)

162 #ifde‡
__GNUC__


163 
	#__Êex¨r
 [0]

	)

165 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

166 
	#__Êex¨r
 []

	)

169 
	#__Êex¨r
 [1]

	)

185 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

187 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

188 #ifde‡
__˝lu•lus


189 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

190 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

191 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

192 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

194 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

195 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

196 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

197 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

199 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

200 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

213 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

214 
	#__©åibuã__
(
xyz
Ë

	)

220 #i‡
__GNUC_PREREQ
 (2,96)

221 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

223 
	#__©åibuã_mÆloc__


	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

323 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

324 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


325 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

329 
	#__exã∫_ölöe
 
__ölöe


	)

330 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

336 #i‡
__GNUC_PREREQ
 (4,3)

337 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

338 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

345 #i‡!
__GNUC_PREREQ
 (2,8)

346 
	#__exãnsi⁄__


	)

350 #i‡!
__GNUC_PREREQ
 (2,92)

351 
	#__ª°ri˘


	)

357 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


358 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

360 #ifde‡
__GNUC__


361 
	#__ª°ri˘_¨r


	)

363 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

364 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

367 
	#__ª°ri˘_¨r


	)

372 #i‡
__GNUC__
 >= 3

373 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

375 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 
	~<bôs/byãsw≠-16.h
>

37 
	#__bsw≠_c⁄°™t_32
(
x
) \

38 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

39 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

41 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 2)

43 
__ölöe
 

44 
	$__bsw≠_32
 (
__bsx
)

46  
	`__buûtö_bsw≠32
 (
__bsx
);

47 
	}
}

48 #ñi‡
__GNUC__
 >= 2

49 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

50 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

51 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

52 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

53 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

54 || 
deföed
 
	g__amdÁm10__
)

57 
	#__bsw≠_32
(
x
) \

58 (
__exãnsi⁄__
 \

59 ({ 
__v
, 
__x
 = (
x
); \

60 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

61 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

63 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

64 
__v
; }))

	)

66 
	#__bsw≠_32
(
x
) \

67 (
__exãnsi⁄__
 \

68 ({ 
__v
, 
__x
 = (
x
); \

69 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

70 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

72 
	`__asm__
 ("rorw $8, %w0;" \

75 : "Ù" (
__v
) \

76 : "0" (
__x
) \

78 
__v
; }))

	)

81 
	#__bsw≠_32
(
x
) \

82 (
__exãnsi⁄__
 \

83 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

86 
__ölöe
 

87 
	$__bsw≠_32
 (
__bsx
)

89  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

90 
	}
}

94 #i‡
__GNUC_PREREQ
 (2, 0)

96 
	#__bsw≠_c⁄°™t_64
(
x
) \

97 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

98 | (((
x
) & 0x00ff000000000000ull) >> 40) \

99 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

100 | (((
x
) & 0x000000ff00000000ull) >> 8) \

101 | (((
x
) & 0x00000000ff000000ull) << 8) \

102 | (((
x
) & 0x0000000000ff0000ull) << 24) \

103 | (((
x
) & 0x000000000000ff00ull) << 40) \

104 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

106 #i‡
__GNUC_PREREQ
 (4, 2)

107 
__ölöe
 

108 
	$__bsw≠_64
 (
__bsx
)

110  
	`__buûtö_bsw≠64
 (
__bsx
);

111 
	}
}

112 #ñi‡
__WORDSIZE
 == 64

113 
	#__bsw≠_64
(
x
) \

114 (
__exãnsi⁄__
 \

115 ({ 
__v
, 
__x
 = (
x
); \

116 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

117 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

119 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

120 
__v
; }))

	)

122 
	#__bsw≠_64
(
x
) \

123 (
__exãnsi⁄__
 \

124 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

125 
__l
[2]; } 
__w
, 
__r
; \

126 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

127 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

130 
__w
.
__Œ
 = (
x
); \

131 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

132 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

134 
__r
.
__Œ
; }))

	)

136 #ñi‡
__GLIBC_HAVE_LONG_LONG


137 
	#__bsw≠_c⁄°™t_64
(
x
) \

138 ((((
x
) & 0xff00000000000000ull) >> 56) \

139 | (((
x
) & 0x00ff000000000000ull) >> 40) \

140 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

141 | (((
x
) & 0x000000ff00000000ull) >> 8) \

142 | (((
x
) & 0x00000000ff000000ull) << 8) \

143 | (((
x
) & 0x0000000000ff0000ull) << 24) \

144 | (((
x
) & 0x000000000000ff00ull) << 40) \

145 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

147 
__ölöe
 

148 
	$__bsw≠_64
 (
__bsx
)

150  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

151 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@
1
.
1
/usr/include
119
6414
inc/inc/misc.h
inc/inc/stm32f10x_adc.h
inc/inc/stm32f10x_bkp.h
inc/inc/stm32f10x_can.h
inc/inc/stm32f10x_cec.h
inc/inc/stm32f10x_crc.h
inc/inc/stm32f10x_dac.h
inc/inc/stm32f10x_dbgmcu.h
inc/inc/stm32f10x_dma.h
inc/inc/stm32f10x_exti.h
inc/inc/stm32f10x_flash.h
inc/inc/stm32f10x_fsmc.h
inc/inc/stm32f10x_gpio.h
inc/inc/stm32f10x_i2c.h
inc/inc/stm32f10x_iwdg.h
inc/inc/stm32f10x_pwr.h
inc/inc/stm32f10x_rcc.h
inc/inc/stm32f10x_rtc.h
inc/inc/stm32f10x_sdio.h
inc/inc/stm32f10x_spi.h
inc/inc/stm32f10x_tim.h
inc/inc/stm32f10x_usart.h
inc/inc/stm32f10x_wwdg.h
inc/stm32f10x.h
inc/stm32f10x_conf.h
inc/stm32f10x_delay.h
inc/stm32f10x_it.h
inc/system_stm32f10x.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupport/core_cm3.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupport/core_cm3.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/misc.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/misc.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c
libs/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c
src/main.c
src/newlib_stubs.c
src/startup.c
src/stm32f10x_delay.c
/usr/include/errno.h
/usr/include/stdint.h
/usr/include/sys/stat.h
/usr/include/sys/times.h
/usr/include/sys/unistd.h
/usr/include/bits/errno.h
/usr/include/bits/stat.h
/usr/include/bits/types.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/posix_opt.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/unistd.h
/usr/include/getopt.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/xlocale.h
/usr/include/asm/errno.h
/usr/include/bits/timex.h
/usr/include/ctype.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/asm-generic/errno.h
/usr/include/endian.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/byteswap-16.h
